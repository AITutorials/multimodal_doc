{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"1/","text":"1.1 \u8ba4\u8bc6\u591a\u6a21\u6001 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u4ec0\u4e48\u662f\u591a\u6a21\u6001\u3002 \u4e86\u89e3\u591a\u6a21\u6001\u53d1\u5c55\u7684\u539f\u56e0\u3002 \u4e86\u89e3\u591a\u6a21\u6001\u7684\u5e94\u7528\u5e02\u573a\u3002 \u4ec0\u4e48\u662f\u591a\u6a21\u6001 \u4eba\u7c7b\u7ed9\u8ba1\u7b97\u673a\u80fd\u591f\u8f93\u5165\u7684\u5f62\u5f0f\u4ee5\u53ca\u72b6\u6001\uff0c\u901a\u5e38\u6211\u4eec\u4e3b\u8981\u7814\u7a76\u6a21\u6001\u5305\u62ec\"3V\": \u5373Verbal(\u6587\u672c)\u3001Vocal(\u8bed\u97f3)\u3001Visual(\u89c6\u89c9)\u3002 \u591a\u6a21\u6001\u53d1\u5c55\u7684\u539f\u56e0 \u66f4\u5927\u89c4\u6a21\u7684\u591a\u6a21\u6001\u6570\u636e\u96c6 \u65e9\u671f\u7684\u4e92\u8054\u7f51\u662f\u6587\u672c\u6587\u5b57\u7684\u5929\u4e0b\uff0c\u8d34\u5427\uff0c\u8bba\u575b\uff0c\u5c0f\u8bf4\u7b49\u7b49\uff0c\u5982\u4eca\u968f\u7740\u4f20\u8f93\u901f\u7387\u7684\u63d0\u5347\uff0c\u8bed\u97f3\uff0c\u56fe\u7247\u548c\u89c6\u9891\u5e94\u7528\u8d8a\u6765\u8d8a\u591a\u3002 \u66f4\u591a\u7684\u7b97\u529b \u4ee5\u82f1\u4f1f\u8fbe\u4e3a\u4ee3\u8868\u7684GPU\u5382\u5546\u5927\u529b\u53d1\u5c55\u7b97\u529b\uff0cTesla V100\u4e3a\u7f8e\u56fd\u80fd\u6e90\u90e8\u7684Summit\u8d85\u7ea7\u8ba1\u7b97\u673a\u63d0\u4f9b200\u5343\u4e07\u6b21\u768464\u4f4d\u6d6e\u70b9\u8fd0\u7b97\u80fd\u529b\u3002 \u5f3a\u5927\u7684\u89c6\u89c9\u7279\u5f81\u62bd\u53d6\u80fd\u529b \u66f4\u5f3a\u7684CV\u795e\u7ecf\u7f51\u7edc\uff0c\u5982ResNet\uff0cViT\u7b49\u3002 \u66f4\u9ad8\u7ef4\u5ea6\u7684\u8bed\u8a00\u7279\u5f81\u62bd\u53d6\u80fd\u529b \u66f4\u5f3a\u7684NLP\u795e\u7ecf\u7f51\u7edc\uff0c\u5982BERT\u7b49\u3002 \u591a\u6a21\u6001\u7684\u5e94\u7528\u5e02\u573a \u9488\u5bf9\u5177\u6709\u591a\u6a21\u6001\u6570\u636e\u79ef\u7d2f\u7684\u516c\u53f8\uff0c\u56fd\u5185\u66f4\u591a\u7684\u662f\u505a\u77ed\u89c6\u9891\u7684\u516c\u53f8\uff0c\u5982\u6296\u97f3\uff0c\u5feb\u624b\u7b49\u3002\u56fd\u5916\u5927\u5382\u57fa\u672c\u90fd\u6709\u6d89\u730e\u3002 \u5f53\u524d\u56fd\u5185\u5e02\u573a\u591a\u6a21\u6001\u5904\u4e8e\u53d1\u5c55\u4e2d\uff0c\u516c\u53f8\u4e2d\u7eaf\u7cb9\u7684\u591a\u6a21\u6001\u5de5\u7a0b\u5e08\u5e76\u4e0d\u591a\uff0c\u5927\u591a\u4ee5NLP\uff0cCV\u8054\u5408\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u591a\u6a21\u6001\u7814\u7a76\u3002 \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u591a\u6a21\u6001\u3002 \u5b66\u4e60\u4e86\u591a\u6a21\u6001\u53d1\u5c55\u7684\u539f\u56e0\u3002 \u5b66\u4e60\u4e86\u591a\u6a21\u6001\u7684\u5e94\u7528\u5e02\u573a\u3002 1.2 \u5f71\u54cd\u591a\u6a21\u6001\u53d1\u5c55\u7684\u5de5\u4e1a\u5316\u7cfb\u7edf \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u63a8\u8350\u7cfb\u7edf\u3002 \u4e86\u89e3\u57fa\u4e8e\u6587\u672c\u7684\u6807\u7b7e\u5316\u7cfb\u7edf\u3002 \u63a8\u8350\u7cfb\u7edf \u4f5c\u4e3a\u5f53\u4eca\u5e02\u573a\u6700\u70ed\u95e8\u7684\u5e94\u7528\u578b\u7cfb\u7edf\uff0c\u63a8\u8350\u7cfb\u7edf\u4e2d\u80fd\u591f\u878d\u5408\u975e\u5e38\u591a\u7684NLP\uff0cCV\u5e94\u7528\u3002 \u5176\u91cd\u8981\u7684\u4f5c\u7528\u53ef\u4ee5\u5c06\u6211\u4eec\u4e4b\u540e\u5b66\u4e60\u7684\u5f88\u591a\u9879\u76ee\u878d\u5165\u5176\u4e2d\uff0c\u5f00\u59cb \u63a8\u8350\u7cfb\u7edf \u5b66\u4e60\u4e4b\u65c5\u3002 \u57fa\u4e8e\u6587\u672c\u7684\u6807\u7b7e\u5316\u7cfb\u7edf \u65e9\u671f\u7684\u6807\u7b7e\u5316\u7cfb\u7edf\u5927\u591a\u57fa\u4e8e\u6587\u672c\u89e3\u6790\uff0c\u662f\u5178\u578b\u7684NLP\u5e94\u7528\u3002 \u4e4b\u540e\u6211\u4eec\u4f1a\u5c06\u56fe\u50cf\u6a21\u6001\u7ed3\u5408\u6587\u672c\u4f7f\u7528\u6765\u89e3\u51b3\u6807\u7b7e\u95ee\u9898\uff0c\u5148\u8ba9\u6211\u4eec\u6765\u4e86\u89e3 \u57fa\u4e8e\u6587\u672c\u7684\u6807\u7b7e\u5316\u7cfb\u7edf \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u63a8\u8350\u7cfb\u7edf\u7684\u6574\u4f53\u67b6\u6784\u4ee5\u53ca\u76f8\u5173\u6a21\u578b\u3002 \u5b66\u4e60\u4e86\u6807\u7b7e\u5316\u7cfb\u7edf\u7684\u6574\u4f53\u67b6\u6784\u4ee5\u53ca\u76f8\u5173\u6a21\u578b\u3002","title":"\u7b2c\u4e00\u7ae0\uff1a\u5de5\u7a0b\u5e08\u773c\u4e2d\u7684\u591a\u6a21\u6001\u53d1\u5c55"},{"location":"1/#11","text":"","title":"1.1 \u8ba4\u8bc6\u591a\u6a21\u6001"},{"location":"1/#_1","text":"\u4e86\u89e3\u4ec0\u4e48\u662f\u591a\u6a21\u6001\u3002 \u4e86\u89e3\u591a\u6a21\u6001\u53d1\u5c55\u7684\u539f\u56e0\u3002 \u4e86\u89e3\u591a\u6a21\u6001\u7684\u5e94\u7528\u5e02\u573a\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"1/#_2","text":"\u4eba\u7c7b\u7ed9\u8ba1\u7b97\u673a\u80fd\u591f\u8f93\u5165\u7684\u5f62\u5f0f\u4ee5\u53ca\u72b6\u6001\uff0c\u901a\u5e38\u6211\u4eec\u4e3b\u8981\u7814\u7a76\u6a21\u6001\u5305\u62ec\"3V\": \u5373Verbal(\u6587\u672c)\u3001Vocal(\u8bed\u97f3)\u3001Visual(\u89c6\u89c9)\u3002","title":"\u4ec0\u4e48\u662f\u591a\u6a21\u6001"},{"location":"1/#_3","text":"\u66f4\u5927\u89c4\u6a21\u7684\u591a\u6a21\u6001\u6570\u636e\u96c6 \u65e9\u671f\u7684\u4e92\u8054\u7f51\u662f\u6587\u672c\u6587\u5b57\u7684\u5929\u4e0b\uff0c\u8d34\u5427\uff0c\u8bba\u575b\uff0c\u5c0f\u8bf4\u7b49\u7b49\uff0c\u5982\u4eca\u968f\u7740\u4f20\u8f93\u901f\u7387\u7684\u63d0\u5347\uff0c\u8bed\u97f3\uff0c\u56fe\u7247\u548c\u89c6\u9891\u5e94\u7528\u8d8a\u6765\u8d8a\u591a\u3002 \u66f4\u591a\u7684\u7b97\u529b \u4ee5\u82f1\u4f1f\u8fbe\u4e3a\u4ee3\u8868\u7684GPU\u5382\u5546\u5927\u529b\u53d1\u5c55\u7b97\u529b\uff0cTesla V100\u4e3a\u7f8e\u56fd\u80fd\u6e90\u90e8\u7684Summit\u8d85\u7ea7\u8ba1\u7b97\u673a\u63d0\u4f9b200\u5343\u4e07\u6b21\u768464\u4f4d\u6d6e\u70b9\u8fd0\u7b97\u80fd\u529b\u3002 \u5f3a\u5927\u7684\u89c6\u89c9\u7279\u5f81\u62bd\u53d6\u80fd\u529b \u66f4\u5f3a\u7684CV\u795e\u7ecf\u7f51\u7edc\uff0c\u5982ResNet\uff0cViT\u7b49\u3002 \u66f4\u9ad8\u7ef4\u5ea6\u7684\u8bed\u8a00\u7279\u5f81\u62bd\u53d6\u80fd\u529b \u66f4\u5f3a\u7684NLP\u795e\u7ecf\u7f51\u7edc\uff0c\u5982BERT\u7b49\u3002","title":"\u591a\u6a21\u6001\u53d1\u5c55\u7684\u539f\u56e0"},{"location":"1/#_4","text":"\u9488\u5bf9\u5177\u6709\u591a\u6a21\u6001\u6570\u636e\u79ef\u7d2f\u7684\u516c\u53f8\uff0c\u56fd\u5185\u66f4\u591a\u7684\u662f\u505a\u77ed\u89c6\u9891\u7684\u516c\u53f8\uff0c\u5982\u6296\u97f3\uff0c\u5feb\u624b\u7b49\u3002\u56fd\u5916\u5927\u5382\u57fa\u672c\u90fd\u6709\u6d89\u730e\u3002 \u5f53\u524d\u56fd\u5185\u5e02\u573a\u591a\u6a21\u6001\u5904\u4e8e\u53d1\u5c55\u4e2d\uff0c\u516c\u53f8\u4e2d\u7eaf\u7cb9\u7684\u591a\u6a21\u6001\u5de5\u7a0b\u5e08\u5e76\u4e0d\u591a\uff0c\u5927\u591a\u4ee5NLP\uff0cCV\u8054\u5408\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u591a\u6a21\u6001\u7814\u7a76\u3002","title":"\u591a\u6a21\u6001\u7684\u5e94\u7528\u5e02\u573a"},{"location":"1/#_5","text":"\u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u591a\u6a21\u6001\u3002 \u5b66\u4e60\u4e86\u591a\u6a21\u6001\u53d1\u5c55\u7684\u539f\u56e0\u3002 \u5b66\u4e60\u4e86\u591a\u6a21\u6001\u7684\u5e94\u7528\u5e02\u573a\u3002","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"1/#12","text":"","title":"1.2 \u5f71\u54cd\u591a\u6a21\u6001\u53d1\u5c55\u7684\u5de5\u4e1a\u5316\u7cfb\u7edf"},{"location":"1/#_6","text":"\u4e86\u89e3\u63a8\u8350\u7cfb\u7edf\u3002 \u4e86\u89e3\u57fa\u4e8e\u6587\u672c\u7684\u6807\u7b7e\u5316\u7cfb\u7edf\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"1/#_7","text":"\u4f5c\u4e3a\u5f53\u4eca\u5e02\u573a\u6700\u70ed\u95e8\u7684\u5e94\u7528\u578b\u7cfb\u7edf\uff0c\u63a8\u8350\u7cfb\u7edf\u4e2d\u80fd\u591f\u878d\u5408\u975e\u5e38\u591a\u7684NLP\uff0cCV\u5e94\u7528\u3002 \u5176\u91cd\u8981\u7684\u4f5c\u7528\u53ef\u4ee5\u5c06\u6211\u4eec\u4e4b\u540e\u5b66\u4e60\u7684\u5f88\u591a\u9879\u76ee\u878d\u5165\u5176\u4e2d\uff0c\u5f00\u59cb \u63a8\u8350\u7cfb\u7edf \u5b66\u4e60\u4e4b\u65c5\u3002","title":"\u63a8\u8350\u7cfb\u7edf"},{"location":"1/#_8","text":"\u65e9\u671f\u7684\u6807\u7b7e\u5316\u7cfb\u7edf\u5927\u591a\u57fa\u4e8e\u6587\u672c\u89e3\u6790\uff0c\u662f\u5178\u578b\u7684NLP\u5e94\u7528\u3002 \u4e4b\u540e\u6211\u4eec\u4f1a\u5c06\u56fe\u50cf\u6a21\u6001\u7ed3\u5408\u6587\u672c\u4f7f\u7528\u6765\u89e3\u51b3\u6807\u7b7e\u95ee\u9898\uff0c\u5148\u8ba9\u6211\u4eec\u6765\u4e86\u89e3 \u57fa\u4e8e\u6587\u672c\u7684\u6807\u7b7e\u5316\u7cfb\u7edf","title":"\u57fa\u4e8e\u6587\u672c\u7684\u6807\u7b7e\u5316\u7cfb\u7edf"},{"location":"1/#_9","text":"\u5b66\u4e60\u4e86\u63a8\u8350\u7cfb\u7edf\u7684\u6574\u4f53\u67b6\u6784\u4ee5\u53ca\u76f8\u5173\u6a21\u578b\u3002 \u5b66\u4e60\u4e86\u6807\u7b7e\u5316\u7cfb\u7edf\u7684\u6574\u4f53\u67b6\u6784\u4ee5\u53ca\u76f8\u5173\u6a21\u578b\u3002","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"10/","text":"\u5c55\u793a\u7aef\u9996\u9875 \u4f20\u667aAI\u8d4b\u80fd\uff1a\u54a8\u8be2\u5bf9\u8bdd\u7cfb\u7edf\u4f18\u5316 \u5229\u7528AI\u6280\u672f\uff0c\u5e2e\u52a9\u4fe1\u606f\u4e2d\u5fc3\u4ece\u771f\u5b9e\u54a8\u8be2\u5bf9\u8bdd\u4e2d\u81ea\u52a8\u63d0\u53d6\u5173\u952e\u5b9e\u4f53\uff0c\u5982\u5b66\u5458\u59d3\u540d\uff0c\u624b\u673a\u53f7\uff0c\u610f\u5411\u6821\u533a\u548c\u610f\u5411\u5b66\u79d1\uff0c\u5e2e\u52a9\u54a8\u8be2\u4eba\u5458\u63d0\u5347\u5b66\u5458\u8f6c\u5316\u6548\u7387\u3002 \u4f20\u667aAI\u8d4b\u80fd\uff1a\u8bd5\u5377\u81ea\u52a8\u6279\u9605\u7cfb\u7edf \u5229\u7528AI\u6280\u672f\uff0c\u5e2e\u52a9\u9662\u6821\u90a6\u90e8\u95e8\u5bf9\u5b66\u751f\u7f51\u4e0a\u4f5c\u7b54\u7684\u586b\u7a7a\u9898\u9898\u578b\u8fdb\u884c\u81ea\u52a8\u6253\u5206\uff0c\u5e76\u7ed9\u5b9a\u5bf9\u5e94\u7684\u8bc4\u5206\u7f6e\u4fe1\u5ea6\uff0c\u5e2e\u52a9\u6559\u5e08\u66f4\u597d\u66f4\u5feb\u7684\u5b8c\u6210\u6d77\u91cf\u8bd5\u5377\u6279\u9605\u3002 \u4f20\u667aAI\u8d4b\u80fd\uff1a\u6570\u636e\u5206\u6790\u4e4b\u56fe\u50cf\u89e3\u6790 \u5229\u7528AI\u6280\u672f\uff0c\u5e2e\u52a9\u6570\u636e\u5206\u6790\u56e2\u961f\u5bf9\u5168\u56fd\u673a\u6784\u56fe\u7247\u8fdb\u884c\u89e3\u6790\uff0c\u4ece\u800c\u5224\u65ad\u8be5\u5404\u4e2a\u6821\u533a\u53d7\u75ab\u60c5\u5f71\u54cd\u662f\u5426\u5728\u7ebf\u4e0a\u8fdb\u884c\u6559\u5b66\uff0c\u4ece\u800c\u5b8c\u6210\u66f4\u5177\u6709\u8bf4\u670d\u529b\u7684\u6570\u636e\u5206\u6790\u62a5\u544a\u3002 \u6587\u672c\u6807\u7b7e\u5316 \u7ed9\u5b9a\u4e00\u6bb5\u6587\u672c\uff0c\u901a\u8fc7\u8bed\u4e49\u6280\u672f\uff0c\u8fdb\u884c\u5174\u8da3\u7c7b\u6807\u7b7e\u5224\u65ad\u3002 \u5b9e\u4f53\u62bd\u53d6 \u7ed9\u5b9a\u6307\u5b9a\u683c\u5f0f\u7684\u6587\u672c\uff0c\u901a\u8fc7\u4e0a\u4e0b\u6587\u5173\u8054\uff0c\u8fdb\u884c\u4e3b\u8981\u5b9e\u4f53\u62bd\u53d6\u3002 \u76f8\u4f3c\u5ea6\u6253\u5206 \u7ed9\u5b9a\u4e24\u6bb5\u6587\u672c\uff0c\u901a\u8fc7AI\u6a21\u578b\u5224\u65ad\u8bed\u4e49\u76f8\u4f3c\uff0c\u5f97\u5230\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6\u5206\u503c\u3002 \u56fe\u7247\u5206\u7c7b \u7ed9\u5b9a\u4e00\u5f20\u5b66\u5458\u5b66\u4e60\u56fe\u7247\u8fdb\u884c\u5224\u65ad\u662f\u5426\u5728\u7ebf\u4e0a\u6216\u8005\u7ebf\u4e0b\u5b66\u4e60\u3002 \u5b66\u4e60\u8def\u7ebf \u9488\u5bf9\u96f6\u57fa\u7840\u5c0f\u767d\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u5f00\u542f\u4f60\u7684AI\u5b66\u4e60\u4e4b\u65c5\u5427\uff01 \u8054\u5408\u7acb\u9879 \u5982\u679c\u4f60\u7684\u90e8\u95e8\u6216\u56e2\u961f\u5df2\u7ecf\u79ef\u7d2f\u4e86\u4e00\u5b9a\u7684\u5386\u53f2\u6570\u636e\uff0c\u5e76\u5e0c\u671b\u8fdb\u884cAI\u8d4b\u80fd\uff0c\u8bf7\u8054\u7cfb\u6211\u4eec\uff01 \u884c\u4e1a\u5e94\u7528 AI\u771f\u7684\u706b\u70ed\u5417\uff0c\u6765\u770b\u770b\u6574\u4e2a\u4e92\u8054\u7f51\u5708\u4e2d\u7684AI\u5e94\u7528\u6848\u4f8b\uff0c\u6216\u8bb8\u4f1a\u7ed9\u4f60\u4e00\u4e9b\u542f\u53d1\uff01 \u4e8c\u7ef4\u7801\uff08\u6211\u7684\u4e8c\u7ef4\u7801\uff09 Github \u6296\u97f3\u53f7 \u5b98\u7f51\u5730\u5740 \u6211\u7684\u56e2\u961f \u9662\u6821\u90a6 \u9879\u76ee\u4fe1\u606f\u7ad9 \u4fe1\u606f\u4e2d\u5fc3 \u8be6\u60c5\u9875\u5c55\u793abanner \u7acb\u5373\u4f7f\u7528\u6309\u94ae\u8df3\u8f6c\u529f\u80fd\u6f14\u793a \u6587\u672c\u6807\u7b7e\u5316 \u7ed9\u5b9a\u4e00\u6bb5\u6587\u672c\uff0c\u901a\u8fc7\u8bed\u4e49\u6280\u672f\uff0c\u8fdb\u884c\u5174\u8da3\u7c7b\u6807\u7b7e\u5224\u65ad\u3002 \u5b9e\u4f53\u62bd\u53d6 \u7ed9\u5b9a\u6307\u5b9a\u683c\u5f0f\u7684\u6587\u672c\uff0c\u901a\u8fc7\u4e0a\u4e0b\u6587\u5173\u8054\uff0c\u8fdb\u884c\u4e3b\u8981\u5b9e\u4f53\u62bd\u53d6\u3002 \u76f8\u4f3c\u5ea6\u6253\u5206 \u7ed9\u5b9a\u4e24\u6bb5\u6587\u672c\uff0c\u901a\u8fc7AI\u6a21\u578b\u5224\u65ad\u8bed\u4e49\u76f8\u4f3c\uff0c\u5f97\u5230\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6\u5206\u503c\u3002 \u56fe\u7247\u5206\u7c7b \u7ed9\u5b9a\u4e00\u5f20\u5b66\u5458\u5b66\u4e60\u56fe\u7247\u8fdb\u884c\u5224\u65ad\u662f\u5426\u5728\u7ebf\u4e0a\u6216\u8005\u7ebf\u4e0b\u5b66\u4e60\u3002 \u529f\u80fd\u4ecb\u7ecd \u529f\u80fd\u5c0f\u56fe\u6807 + \u6587\u6848 \u6587\u672c\u6807\u7b7e\u5316 \u8fd9\u662f\u4e00\u6b3e\u4e13\u6ce8\u4e8e\u6cdb\u5a31\u4e50\u9886\u57df\u7684\u6807\u7b7e\u5316\u7cfb\u7edf\uff0c\u5b83\u5c24\u4e3a\u64c5\u957f\u5904\u7406\u4e0e\u660e\u661f\uff0c\u97f3\u4e50\uff0c\u5f71\u89c6\uff0c\u6e38\u620f\uff0c\u7f8e\u98df\u7b49\u76f8\u5173\u7684\u6587\u672c\u5185\u5bb9\u5e76\u751f\u6210\u5408\u9002\u7684\u6807\u7b7e\u3002\u53ef\u8f93\u5165\u7684\u6587\u672c\u5185\u5bb9\u5305\u62ec\uff1a\u5bf9\u8bdd\uff0c\u8bc4\u8bba\uff0c\u7559\u8a00\uff0c\u63cf\u8ff0\u7b49\u3002 \u529f\u80fd\u6f14\u793a \u5efa\u8bae\u4f7f\u7528\u4e0a\u4e0b\u7684\u5f62\u5f0f\uff0c\u8f93\u5165\u7684\u6846\u53ea\u6709\u56fe\u7247\u548c\u6587\u672c\u4e24\u79cd\u6837\u5f0f\uff0c\u8f93\u51fa\u6846\u53ea\u6709\u6587\u672c \u5fc5\u987b\u6709\u968f\u673a\u793a\u4f8b\uff0c\u4e14\u9700\u8981\u6bd4\u8f83\u660e\u663e\u7684\u6309\u94ae \u6587\u672c\u6807\u7b7e\u5316 \u8f93\u5165\u6587\u672c\u6837\u5f0f\uff1a \u6211\u7231\u8e22\u8db3\u7403 \u8f93\u51fa\u6587\u672c\u6837\u5f0f\uff1a [ { \"label\" : \"\u8db3\u7403\" , \"score\" : 0.715871 , \"related\" : [ \"\u4f53\u80b2\" ] } ] \u5e94\u7528\u573a\u666f \u5f62\u5f0f\u4e3a\uff1a\u4e00\u6bb5\u6587\u6848\uff0c\u4e00\u5f20\u56fe\u7247\uff08\u5408\u4f5clogo\uff09 \u6587\u672c\u6807\u7b7e\u5316\uff1a \u6587\u6848\uff1a\u8be5\u7cfb\u7edf\u5e94\u7528\u4e8e\u4f20\u667a\u64ad\u5ba2python web\u9879\u76ee\u7684\u63a8\u8350\u7cfb\u7edf\u4e4b\u4e2d\uff0c\u7528\u4e8e\u7528\u6237\u4e4b\u95f4\u7684\u5174\u8da3\u63a8\u8350\uff0c\u5bf9\u6559\u5b66\u6765\u8bb2\uff0c\u66f4\u52a0\u771f\u5b9e\u7684\u8fd8\u539f\u4e86\u4f01\u4e1a\u7ea7\u7684web\u9879\u76ee\uff0c\u5e76\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5c06AI\u5f15\u5165web\u8bfe\u5802\u3002 \u56fe\u7247\uff1apython web\u7ec4logo \u6280\u672f\u7279\u8272 \u4e09\u6bb5\u6587\u6848\uff0c\u4e09\u5f20\u56fe\u7247\uff08\u5177\u4f53\u6a21\u578b\uff0c\u4f18\u5316\u5de5\u5177\uff0c\u90e8\u7f72\u5de5\u5177\uff09 \u6587\u672c\u6807\u7b7e\u5316\uff1a 1\uff0c\u4f7f\u7528Fasttext\u6a21\u578b\u8fdb\u884c\u591a\u6807\u7b7e\u591a\u5206\u7c7b 2\uff0c\u5bf9\u6a21\u578b\u8fdb\u884cKeras tuner 3\uff0c\u4f7f\u7528tf-serving\u8fdb\u884c\u591a\u6a21\u578b\u90e8\u7f72","title":"10"},{"location":"10/#_1","text":"\u4f20\u667aAI\u8d4b\u80fd\uff1a\u54a8\u8be2\u5bf9\u8bdd\u7cfb\u7edf\u4f18\u5316 \u5229\u7528AI\u6280\u672f\uff0c\u5e2e\u52a9\u4fe1\u606f\u4e2d\u5fc3\u4ece\u771f\u5b9e\u54a8\u8be2\u5bf9\u8bdd\u4e2d\u81ea\u52a8\u63d0\u53d6\u5173\u952e\u5b9e\u4f53\uff0c\u5982\u5b66\u5458\u59d3\u540d\uff0c\u624b\u673a\u53f7\uff0c\u610f\u5411\u6821\u533a\u548c\u610f\u5411\u5b66\u79d1\uff0c\u5e2e\u52a9\u54a8\u8be2\u4eba\u5458\u63d0\u5347\u5b66\u5458\u8f6c\u5316\u6548\u7387\u3002 \u4f20\u667aAI\u8d4b\u80fd\uff1a\u8bd5\u5377\u81ea\u52a8\u6279\u9605\u7cfb\u7edf \u5229\u7528AI\u6280\u672f\uff0c\u5e2e\u52a9\u9662\u6821\u90a6\u90e8\u95e8\u5bf9\u5b66\u751f\u7f51\u4e0a\u4f5c\u7b54\u7684\u586b\u7a7a\u9898\u9898\u578b\u8fdb\u884c\u81ea\u52a8\u6253\u5206\uff0c\u5e76\u7ed9\u5b9a\u5bf9\u5e94\u7684\u8bc4\u5206\u7f6e\u4fe1\u5ea6\uff0c\u5e2e\u52a9\u6559\u5e08\u66f4\u597d\u66f4\u5feb\u7684\u5b8c\u6210\u6d77\u91cf\u8bd5\u5377\u6279\u9605\u3002 \u4f20\u667aAI\u8d4b\u80fd\uff1a\u6570\u636e\u5206\u6790\u4e4b\u56fe\u50cf\u89e3\u6790 \u5229\u7528AI\u6280\u672f\uff0c\u5e2e\u52a9\u6570\u636e\u5206\u6790\u56e2\u961f\u5bf9\u5168\u56fd\u673a\u6784\u56fe\u7247\u8fdb\u884c\u89e3\u6790\uff0c\u4ece\u800c\u5224\u65ad\u8be5\u5404\u4e2a\u6821\u533a\u53d7\u75ab\u60c5\u5f71\u54cd\u662f\u5426\u5728\u7ebf\u4e0a\u8fdb\u884c\u6559\u5b66\uff0c\u4ece\u800c\u5b8c\u6210\u66f4\u5177\u6709\u8bf4\u670d\u529b\u7684\u6570\u636e\u5206\u6790\u62a5\u544a\u3002 \u6587\u672c\u6807\u7b7e\u5316 \u7ed9\u5b9a\u4e00\u6bb5\u6587\u672c\uff0c\u901a\u8fc7\u8bed\u4e49\u6280\u672f\uff0c\u8fdb\u884c\u5174\u8da3\u7c7b\u6807\u7b7e\u5224\u65ad\u3002 \u5b9e\u4f53\u62bd\u53d6 \u7ed9\u5b9a\u6307\u5b9a\u683c\u5f0f\u7684\u6587\u672c\uff0c\u901a\u8fc7\u4e0a\u4e0b\u6587\u5173\u8054\uff0c\u8fdb\u884c\u4e3b\u8981\u5b9e\u4f53\u62bd\u53d6\u3002 \u76f8\u4f3c\u5ea6\u6253\u5206 \u7ed9\u5b9a\u4e24\u6bb5\u6587\u672c\uff0c\u901a\u8fc7AI\u6a21\u578b\u5224\u65ad\u8bed\u4e49\u76f8\u4f3c\uff0c\u5f97\u5230\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6\u5206\u503c\u3002 \u56fe\u7247\u5206\u7c7b \u7ed9\u5b9a\u4e00\u5f20\u5b66\u5458\u5b66\u4e60\u56fe\u7247\u8fdb\u884c\u5224\u65ad\u662f\u5426\u5728\u7ebf\u4e0a\u6216\u8005\u7ebf\u4e0b\u5b66\u4e60\u3002 \u5b66\u4e60\u8def\u7ebf \u9488\u5bf9\u96f6\u57fa\u7840\u5c0f\u767d\u7cbe\u5fc3\u8bbe\u8ba1\uff0c\u5f00\u542f\u4f60\u7684AI\u5b66\u4e60\u4e4b\u65c5\u5427\uff01 \u8054\u5408\u7acb\u9879 \u5982\u679c\u4f60\u7684\u90e8\u95e8\u6216\u56e2\u961f\u5df2\u7ecf\u79ef\u7d2f\u4e86\u4e00\u5b9a\u7684\u5386\u53f2\u6570\u636e\uff0c\u5e76\u5e0c\u671b\u8fdb\u884cAI\u8d4b\u80fd\uff0c\u8bf7\u8054\u7cfb\u6211\u4eec\uff01 \u884c\u4e1a\u5e94\u7528 AI\u771f\u7684\u706b\u70ed\u5417\uff0c\u6765\u770b\u770b\u6574\u4e2a\u4e92\u8054\u7f51\u5708\u4e2d\u7684AI\u5e94\u7528\u6848\u4f8b\uff0c\u6216\u8bb8\u4f1a\u7ed9\u4f60\u4e00\u4e9b\u542f\u53d1\uff01 \u4e8c\u7ef4\u7801\uff08\u6211\u7684\u4e8c\u7ef4\u7801\uff09 Github \u6296\u97f3\u53f7 \u5b98\u7f51\u5730\u5740 \u6211\u7684\u56e2\u961f \u9662\u6821\u90a6 \u9879\u76ee\u4fe1\u606f\u7ad9 \u4fe1\u606f\u4e2d\u5fc3","title":"\u5c55\u793a\u7aef\u9996\u9875"},{"location":"10/#banner","text":"\u7acb\u5373\u4f7f\u7528\u6309\u94ae\u8df3\u8f6c\u529f\u80fd\u6f14\u793a \u6587\u672c\u6807\u7b7e\u5316 \u7ed9\u5b9a\u4e00\u6bb5\u6587\u672c\uff0c\u901a\u8fc7\u8bed\u4e49\u6280\u672f\uff0c\u8fdb\u884c\u5174\u8da3\u7c7b\u6807\u7b7e\u5224\u65ad\u3002 \u5b9e\u4f53\u62bd\u53d6 \u7ed9\u5b9a\u6307\u5b9a\u683c\u5f0f\u7684\u6587\u672c\uff0c\u901a\u8fc7\u4e0a\u4e0b\u6587\u5173\u8054\uff0c\u8fdb\u884c\u4e3b\u8981\u5b9e\u4f53\u62bd\u53d6\u3002 \u76f8\u4f3c\u5ea6\u6253\u5206 \u7ed9\u5b9a\u4e24\u6bb5\u6587\u672c\uff0c\u901a\u8fc7AI\u6a21\u578b\u5224\u65ad\u8bed\u4e49\u76f8\u4f3c\uff0c\u5f97\u5230\u5b83\u4eec\u7684\u76f8\u4f3c\u5ea6\u5206\u503c\u3002 \u56fe\u7247\u5206\u7c7b \u7ed9\u5b9a\u4e00\u5f20\u5b66\u5458\u5b66\u4e60\u56fe\u7247\u8fdb\u884c\u5224\u65ad\u662f\u5426\u5728\u7ebf\u4e0a\u6216\u8005\u7ebf\u4e0b\u5b66\u4e60\u3002","title":"\u8be6\u60c5\u9875\u5c55\u793abanner"},{"location":"10/#_2","text":"\u529f\u80fd\u5c0f\u56fe\u6807 + \u6587\u6848 \u6587\u672c\u6807\u7b7e\u5316 \u8fd9\u662f\u4e00\u6b3e\u4e13\u6ce8\u4e8e\u6cdb\u5a31\u4e50\u9886\u57df\u7684\u6807\u7b7e\u5316\u7cfb\u7edf\uff0c\u5b83\u5c24\u4e3a\u64c5\u957f\u5904\u7406\u4e0e\u660e\u661f\uff0c\u97f3\u4e50\uff0c\u5f71\u89c6\uff0c\u6e38\u620f\uff0c\u7f8e\u98df\u7b49\u76f8\u5173\u7684\u6587\u672c\u5185\u5bb9\u5e76\u751f\u6210\u5408\u9002\u7684\u6807\u7b7e\u3002\u53ef\u8f93\u5165\u7684\u6587\u672c\u5185\u5bb9\u5305\u62ec\uff1a\u5bf9\u8bdd\uff0c\u8bc4\u8bba\uff0c\u7559\u8a00\uff0c\u63cf\u8ff0\u7b49\u3002","title":"\u529f\u80fd\u4ecb\u7ecd"},{"location":"10/#_3","text":"\u5efa\u8bae\u4f7f\u7528\u4e0a\u4e0b\u7684\u5f62\u5f0f\uff0c\u8f93\u5165\u7684\u6846\u53ea\u6709\u56fe\u7247\u548c\u6587\u672c\u4e24\u79cd\u6837\u5f0f\uff0c\u8f93\u51fa\u6846\u53ea\u6709\u6587\u672c \u5fc5\u987b\u6709\u968f\u673a\u793a\u4f8b\uff0c\u4e14\u9700\u8981\u6bd4\u8f83\u660e\u663e\u7684\u6309\u94ae \u6587\u672c\u6807\u7b7e\u5316 \u8f93\u5165\u6587\u672c\u6837\u5f0f\uff1a \u6211\u7231\u8e22\u8db3\u7403 \u8f93\u51fa\u6587\u672c\u6837\u5f0f\uff1a [ { \"label\" : \"\u8db3\u7403\" , \"score\" : 0.715871 , \"related\" : [ \"\u4f53\u80b2\" ] } ]","title":"\u529f\u80fd\u6f14\u793a"},{"location":"10/#_4","text":"\u5f62\u5f0f\u4e3a\uff1a\u4e00\u6bb5\u6587\u6848\uff0c\u4e00\u5f20\u56fe\u7247\uff08\u5408\u4f5clogo\uff09 \u6587\u672c\u6807\u7b7e\u5316\uff1a \u6587\u6848\uff1a\u8be5\u7cfb\u7edf\u5e94\u7528\u4e8e\u4f20\u667a\u64ad\u5ba2python web\u9879\u76ee\u7684\u63a8\u8350\u7cfb\u7edf\u4e4b\u4e2d\uff0c\u7528\u4e8e\u7528\u6237\u4e4b\u95f4\u7684\u5174\u8da3\u63a8\u8350\uff0c\u5bf9\u6559\u5b66\u6765\u8bb2\uff0c\u66f4\u52a0\u771f\u5b9e\u7684\u8fd8\u539f\u4e86\u4f01\u4e1a\u7ea7\u7684web\u9879\u76ee\uff0c\u5e76\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u5c06AI\u5f15\u5165web\u8bfe\u5802\u3002 \u56fe\u7247\uff1apython web\u7ec4logo","title":"\u5e94\u7528\u573a\u666f"},{"location":"10/#_5","text":"\u4e09\u6bb5\u6587\u6848\uff0c\u4e09\u5f20\u56fe\u7247\uff08\u5177\u4f53\u6a21\u578b\uff0c\u4f18\u5316\u5de5\u5177\uff0c\u90e8\u7f72\u5de5\u5177\uff09 \u6587\u672c\u6807\u7b7e\u5316\uff1a 1\uff0c\u4f7f\u7528Fasttext\u6a21\u578b\u8fdb\u884c\u591a\u6807\u7b7e\u591a\u5206\u7c7b 2\uff0c\u5bf9\u6a21\u578b\u8fdb\u884cKeras tuner 3\uff0c\u4f7f\u7528tf-serving\u8fdb\u884c\u591a\u6a21\u578b\u90e8\u7f72","title":"\u6280\u672f\u7279\u8272"},{"location":"2/","text":"2.1 \u80cc\u666f\u9700\u6c42\u4e0e\u5206\u6790 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u8be5\u4efb\u52a1\u7684\u80cc\u666f\u9700\u6c42\u3002 \u901a\u8fc7\u5bf9\u9700\u6c42\u5206\u6790\u660e\u786e\u4ea4\u4ed8\u7cfb\u7edf\u8981\u6c42\u3002 \u80cc\u666f\u9700\u6c42 \u5728\u6574\u4e2a\u5927\u7684\u63a8\u8350\u7cfb\u7edf\u80cc\u666f\u4e0b\uff0c\u9700\u8981\u6784\u5efa\u89c6\u9891\u753b\u50cf\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u7684\u5c31\u662f\u4e3a\u65e0\u6807\u7b7e\u89c6\u9891\u6253\u4e0a\u5408\u9002\u7684\u7cfb\u7edf\u6807\u7b7e\u3002 \u5728\u8fc7\u53bb\u5e74\u6708\u91cc\uff0c\u7531\u4e8e\u7b97\u529b\u7684\u9650\u5236\uff0c\u4e00\u822c\u516c\u53f8\u65e0\u529b\u652f\u6301\u56fe\u50cf\u7684\u5904\u7406\uff0c\u56e0\u6b64\u4e3b\u8981\u4ee5\u5904\u7406\u89c6\u9891\u5468\u8fb9\u7684\u6587\u672c\uff0c\u5982title\uff0c\u83b7\u8d5e\u6700\u591a\u7684\u8bc4\u8bba\u5185\u5bb9\uff0c\u4f5c\u4e3a\u6807\u7b7e\u5316\u7684\u8f93\u5165\uff0c\u800c\u4eca\u6211\u4eec\u5c06\u8fc8\u51fa\u4e00\u5c0f\u6b65\uff0c\u4ee5\u89c6\u9891\u4e2d\u7684\u5173\u952e\u5e27+\u6587\u672c\u4fe1\u606f\u4f5c\u4e3a\u8f93\u5165\u6784\u5efa\u591a\u6a21\u6001\u6a21\u578b\uff0c\u6765\u8fdb\u884c\u66f4\u7cbe\u51c6\u7684\u6807\u7b7e\u5316\u3002 \u6ce8\uff1a\u6240\u8c13\u65e0\u89c6\u9891\u6807\u7b7e\u662f\u6307\uff1a\u7528\u6237\u5728\u4e0a\u4f20\u89c6\u9891\u65f6\u6ca1\u6709\u901a\u8fc7 # \u6765\u81ea\u5b9a\u4e49\u6807\u7b7e\uff0c\u8fd9\u7c7b\u89c6\u9891\u662f\u89c6\u9891\u6807\u7b7e\u5316\u9700\u8981\u5904\u7406\u7684\u91cd\u70b9\u3002 \u9700\u6c42\u5206\u6790 \u901a\u8fc7\u4e0a\u8ff0\u80cc\u666f\u9700\u6c42\uff0c\u6211\u4eec\u9996\u5148\u660e\u786e\u4ee5\u4e0b\u51e0\u70b9: \u7cfb\u7edf\u8f93\u5165: \u89c6\u9891\u7684\u5173\u952e\u5e27\u56fe\u7247\uff08\u4e00\u822c\u4e3a\u5c01\u9875\uff09+ \u89c6\u9891title\u7684\u6587\u672c\u5185\u5bb9\u3002 \u7cfb\u7edf\u8f93\u51fa: \u8f93\u51fa\u662f\u548c\u4e1a\u52a1\u4e00\u540c\u6307\u5b9a\u7684\u6807\u7b7e\u4f53\u7cfb\uff08\u7c7b\u4f3c\u4e8e\u6587\u672c\u6807\u7b7e\u5316\u7cfb\u7edf\uff09\u3002 \u5728\u7ebf\u670d\u52a1\u8981\u6c42: \u65e0\uff08\u79bb\u7ebf\u670d\u52a1\u5373\u53ef\uff09\u3002 \u591a\u6a21\u6001\u4e0b\u7684\u6807\u7b7e\u4f53\u7cfb\u8bbe\u8ba1\uff1a \u4e4b\u524d\u7684\u6587\u672c\u6807\u7b7e\u8bbe\u8ba1\uff0c\u4f9d\u8d56\u4e8e\u6587\u672c\u4e2d\u7684\u5185\u5bb9\u63cf\u8ff0\u6765\u6307\u5411\u6807\u7b7e\uff0c\u6bd4\u5982\u8c08\u8bba\u67d0\u4e2a\u6e38\u620f\u4eba\u7269\u5c31\u5224\u65ad\u548c\u6e38\u620f\u6709\u5173\u3002 \u4f46\u8fd9\u6837\u7684\u6587\u672c\u5185\u5bb9\u5176\u5b9e\u90fd\u662f\u201c\u76f4\u8ff0\u201d\u5185\u5bb9\uff0c\u6700\u5bb9\u6613\u8868\u8fbe\u201c\u76f4\u8ff0\u201d\u5185\u5bb9\u7684\u5e94\u8be5\u662f\u56fe\u50cf\uff08\u6e38\u620f\u753b\u9762\uff09,\u800c\u6587\u672c\uff08title\uff09\u5f80\u5f80\u5728\u8868\u8fbe\u60c5\u611f\uff0c\u60c5\u7eea\uff08\u8fd9\u4e2a\u4e5f\u548c\u5e94\u7528\u672c\u8eab\u7684\u5b9a\u4f4d\u6709\u5173\uff09\uff0c\u6309\u7167\u8fd9\u4e2a\u903b\u8f91\uff0c\u591a\u6a21\u6001\u4e0b\u7684\u6807\u7b7e\u4f53\u7cfb\u53ef\u4ee5\u66f4\u52a0\u7684\u4e30\u5bcc\u3002 \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4efb\u52a1\u7684\u80cc\u666f\u9700\u6c42\u3002 \u5b66\u4e60\u4e86\u4ea4\u4ed8\u7cfb\u7edf\u8981\u6c42\u4ee5\u53ca\u591a\u6a21\u6001\u4e0b\u7684\u6807\u7b7e\u4f53\u7cfb\u8bbe\u8ba1\u3002 2.2 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u521d\u5b9a \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u4f5c\u7528\u3002 \u4e86\u89e3\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u6b65\u9aa4\u3002 \u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u4f5c\u7528 \u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u4e00\u822c\u662f\u5728\u4e0e\u4ea7\u54c1\uff0c\u8fd0\u8425\u8ba8\u8bba\u9700\u6c42\u540e\u5236\u5b9a\u6280\u672f\u89e3\u51b3\u65b9\u6848\u3002\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\u4e0a\uff0cAI\u5de5\u7a0b\u5e08\u5f80\u5f80\u8fd8\u6ca1\u6709\u62ff\u5230\u771f\u5b9e\u7ebf\u4e0a\u6570\u636e\uff0c\u53ea\u80fd\u901a\u8fc7\u9700\u6c42\u63cf\u8ff0\u6765\u5047\u8bbe\u6570\u636e\u60c5\u51b5\uff0c\u5e76\u6839\u636e\u8fd9\u79cd\u60c5\u51b5\u5236\u5b9a\u65b9\u6848\u3002 \u8be5\u65b9\u6848\u4e3b\u8981\u57fa\u4e8e\u6211\u4eec\u4e4b\u524d\u7684\u7c7b\u4f3c\u9879\u76ee\u7ecf\u9a8c\uff0c\u4e00\u65b9\u9762\u5e2e\u52a9\u6211\u4eec\u521d\u6b65\u68b3\u7406\u6574\u4e2a\u5904\u7406\u601d\u8def\u548c\u6d41\u7a0b\uff0c\u53e6\u4e00\u65b9\u9762\u7ed9\u5408\u4f5c\u90e8\u95e8\u4eba\u5458\u5f70\u663e\u6211\u4eec\u662f\u53ef\u4ee5\u80dc\u4efb\u8fd9\u9879\u5de5\u4f5c\u7684\uff08\u8fd9\u5bf9\u4e8e\u56e2\u961f\u4e4b\u95f4\u7684\u5408\u4f5c\u6765\u8bb2\u81f3\u5173\u91cd\u8981\uff0c\u6211\u4eec\u9700\u8981\u5148\u6709\u4e00\u5b9a\u7684\u8868\u793a\u624d\u80fd\u83b7\u5f97\u4fe1\u4efb\uff09\u3002 \u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u4e00\u822c\u662f\u4e00\u4e2a\u7ec6\u8282\u4e0d\u591f\u5b8c\u5584\u7684\u65b9\u6848\uff0c\u4f46\u662f\u5b83\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5927\u4f53\u7684\u89e3\u51b3\u6846\u67b6\uff0c\u5728\u4e4b\u540e\u7684\u771f\u5b9e\u6570\u636e\u4e0b\u548c\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u4f18\u5316\u3002 \u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u73af\u8282 \u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e09\u6b65: \u6784\u5efaResnet\u548cGRU\u7ed3\u5408\u7684\u591a\u6a21\u6001\u6a21\u578b \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0 \u7b2c\u4e94\u6b65: \u603b\u7ed3\u4e0e\u6539\u8fdb \u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u660e\u786e\u95ee\u9898: \u4ee5\u89c6\u9891\u5173\u952e\u5e27\u548c\u9644\u5e26\u7684\u6587\u672c\u4fe1\u606f\u4e3a\u8f93\u5165\uff0c\u4ee5\u6807\u7b7e\u4f53\u7cfb\u4e2d\u7684\u67d0\u4e9b\u6807\u7b7e\u4e3a\u8f93\u51fa\u3002 \u6570\u636e\u8981\u6c42: \u591a\u6a21\u6001\u9700\u8981\u6587\u672c-\u56fe\u50cf\u7684\u5bf9\u5e94\u6570\u636e\uff0c\u7531\u4e8e\u6a21\u578b\u6784\u9020\u4e00\u822c\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u6b64\u5bf9\u6570\u636e\u603b\u91cf\u7684\u8981\u6c42\u4e5f\u6bd4\u8f83\u9ad8\uff0c\u81f3\u5c11\u63d0\u4f9b10\u4e07\u5bf9\u591a\u6a21\u6001\u6570\u636e\u3002 \u57fa\u672c\u6570\u636e\u5f62\u5f0f: # id \u4e3a\u5e8f\u53f7\uff0c img \u4e3a\u56fe\u50cf\u7684\u6587\u4ef6\u4f4d\u7f6e\uff0c label \u4e3a\u6807\u7b7e\u503c\uff0c text \u4e3a\u6587\u672c\u5185\u5bb9 { \" id \" : 7 , \" img \" : \" img\\/7.png \" , \" label \" : 12 , \" text \" : \" \u82e6\u5c3d\u7518\u6765\u65f6\uff0c\u6211\u7ed9\u4f60\u8bb2\u8bb2\u6765\u65f6\u7684\u8def \" } { \" id \" : 10896 , \" img \" : \" img\\/10896.png \" , \" label \" : 0 , \" text \" : \" when you try acid for the first time \" } \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u91cd\u8981\u7684\u6587\u672c\u6570\u636e\u5206\u6790\uff1a 1\uff0c\u7edf\u8ba1\u6587\u672c\u957f\u5ea6\u5206\u5e03 \u4f5c\u7528\uff1a \u901a\u8fc7\u5206\u5e03\u60c5\u51b5\u51b3\u5b9a\u957f\u5ea6\u5408\u6cd5\u6027\u68c0\u9a8c\u7684\u8303\u56f4\uff08\u4e3a\u4e86\u4fdd\u8bc1\u5b9e\u65f6\uff0c\u9700\u8981\u9650\u5b9a\u6bcf\u6b21\u89e3\u6790\u7684\u6587\u672c\u957f\u5ea6\uff09\u3002 2\uff0c\u7edf\u8ba1\u540c\u6807\u7b7e\u7684\u5173\u952e\u8bcd\u6982\u51b5 \u4f5c\u7528\uff1a \u7528\u4e8e\u786e\u5b9a\u8bed\u6599\u8d28\u91cf\u3002 \u91cd\u8981\u7684\u56fe\u50cf\u6570\u636e\u5206\u6790\uff1a 1\uff0c\u5bbd\u9ad8\u5206\u5e03 \u4f5c\u7528\uff1a\u7b5b\u67e5\u5f02\u5e38\u6570\u636e\uff0c\u786e\u4fdd\u5bbd\u9ad8\u5206\u5e03\u7b26\u5408\u6570\u636e\u8981\u6c42\u3002 \u7b2c\u4e09\u6b65\uff1a\u6784\u5efaResnet\u548cGRU\u7ed3\u5408\u7684\u591a\u6a21\u6001\u6a21\u578b \u5728Transformer\u6ca1\u6709\u51fa\u73b0\u4e4b\u524d\uff0c\u65e9\u524d\u7684\u591a\u6a21\u6001\u6784\u5efa\u66f4\u591a\u5c31\u662f\u6839\u636e\u5df2\u6709\u7684\u6a21\u578b\u81ea\u5b9a\u4e49\u7ed3\u6784\uff0c\u6bd4\u5982GRU\u5904\u7406\u6587\u672c\uff0cResnet\u5904\u7406\u56fe\u50cf\uff0c\u518d\u5c06\u4e24\u8005\u7684\u5f20\u91cf\u878d\u5408\uff0c\u6700\u540e\u901a\u8fc7\u4e00\u4e2a\u7f51\u7edc\u505a\u8f93\u51fa\u3002 \u6ce8\uff1a\u8fd9\u91cc\u56de\u987eGRU\u548cResnet\uff0c\u89e3\u91ca \u68af\u5ea6\u6d88\u5931 \u548c \u7f51\u7edc\u9000\u5316 \u3002 \u5c06\u5df2\u6709\u7684\u6a21\u578b\u878d\u5408\u6216\u8005\u8bf4\u81ea\u5b9a\u4e49\u4e1a\u52a1\u9700\u6c42\u7684\u6a21\u578b\u8f93\u5165\u5934\uff0c\u662f\u7b97\u6cd5\u5de5\u7a0b\u5e08\u5728\u4f01\u4e1a\u91cc\u6700\u5e38\u89c1\u4e5f\u662f\u6700\u91cd\u8981\u7684\u5de5\u4f5c\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u91cc\u5c06\u5e26\u7740\u5927\u5bb6\u6765\u4e00\u6b65\u6b65\u6784\u5efaResnet\u548cGRU\u7ed3\u5408\u7684\u591a\u6a21\u6001\u6a21\u578b\uff0c\u76f4\u5230\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3\u3002 Step1\uff1a\u5148\u8bbe\u8ba1\u8fd9\u6837\u4e00\u4e2a\u6a21\u578b\uff0c\u5728\u6587\u672c\u4fa7\uff0c\u9996\u5148\u7ecf\u8fc7Embedding\u5c42\uff0c\u518d\u7ecf\u8fc7Bi-GRU\u5f97\u5230\u9ad8\u7ef4\u5f20\u91cf\u3002\u5728\u56fe\u50cf\u4fa7\uff0c\u4f7f\u7528\u5e26\u6709\u9884\u8bad\u7ec3\u53c2\u6570\u7684Resnet18\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u5168\u8fde\u63a5\u66ff\u6362\u5b83\u7684\u8f93\u51fa\u5c42\uff0c\u4ee5\u4fbf\u4fdd\u8bc1\u8f93\u51fa\u7ef4\u5ea6\u4e0eBi-GRU\u4e00\u81f4\uff0c\u6700\u540e\u5c06\u4e24\u4fa7\u8f93\u51fa\u5f20\u91cf\u52a0\u6027\u878d\u5408\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u505a\u4e8c\u5206\u7c7b\u3002 import torch import torch.nn as nn import numpy as np import torchvision from torchvision import datasets , models , transforms class ResnetGRUModel ( nn . Module ): def __init__ ( self , vocab_size , embed_dim , num_class , dropout , hidden_size , num_layers , ): super ( ResnetGRUModel , self ) . __init__ () self . resnet_model = models . resnet18 ( pretrained = True ) ... ... ... def init_weights ( self ): initrange = 0.5 self . token_embedding . weight . data . uniform_ ( - initrange , initrange ) self . resfc . weight . data . uniform_ ( - initrange , initrange ) self . fc . weight . data . uniform_ ( - initrange , initrange ) def forward ( self , text , img ): token_embedded = self . token_embedding ( text ) ... ... ... if __name__ == \"__main__\" : model = ResnetGRUModel ( vocab_size = vocab_size , embed_dim = 64 , num_class = 2 , dropout = 0.1 , hidden_size = 16 , num_layers = 2 , ) # \u968f\u673a\u5355\u6761\u6570\u636e img = torch . rand ( 1 , 3 , 700 , 500 ) text = torch . tensor ([[ 1 , 2 , 3 , 4 , 5 , 6 ]]) print ( model ( text , img )) Step2\uff1a\u5b8c\u6210\u4e86\u6a21\u578b\u540e\uff0c\u8fd8\u9700\u8981\u5c06\u539f\u59cb\u7684\u6587\u672c\u548c\u56fe\u50cf\u6570\u636e\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u5904\u7406\uff0c\u6210\u4e3a\u6a21\u578b\u7684\u8f93\u5165\uff0c\u73b0\u5728\u6211\u4eec\u7ed9\u5b9a\u5927\u5bb6\u4e00\u4efd\u539f\u59cb\u6570\u636e\uff08\u5305\u62ec\u6587\u672c\u6807\u7b7e\u7684jsonl\u4ee5\u53ca\u5bf9\u5e94\u56fe\u50cf\u96c6\uff09\u3002 # train_multimodal_data.jsonl # {\"id\":7,\"img\":\"./img/7.png\",\"label\":1,\"text\":\"\u82e6\u5c3d\u7518\u6765\u65f6\uff0c\u6211\u7ed9\u4f60\u8bb2\u8bb2\u6765\u65f6\u7684\u8def\"} # {\"id\":8,\"img\":\"./img/8.png\",\"label\":0,\"text\":\"\u82cf\u5dde\u8001\u5927\u51cc\u963f\u4e5d\uff01\"} # \u8bfb\u53d6\u6570\u636e\u5e76\u8f6c\u6210json with open ( \"./train_multimodal_data.jsonl\" , 'r' ) as fr : multimodal_data_list = fr . readlines () # \u5904\u7406\u6587\u672c\u8bfb\u53d6\u65f6\u9644\u5e26\u4e00\u4e9b\u7b26\u53f7\uff0c\u6bd4\u5982\u6362\u884c\u7b26 multimodal_data_list = list ( map ( lambda x : eval ( x [: - 1 ]), multimodal_data_list )) print ( multimodal_data_list ) ## \u6587\u672c\u5904\u7406\u6d41\u7a0b ### \u63d0\u53d6\u6587\u672c multimodal_data_text = list ( map ( lambda x : x [ \"text\" ], multimodal_data_list )) ### \u5bf9\u6587\u672c\u8fdb\u884ctokenizer\u6620\u5c04\u5e76\u8bb0\u5f55\u6620\u5c04\u5668 ... ### \u5bf9\u6587\u672c\u8fdb\u884c\u622a\u65ad\u8865\u9f50 ... ### \u6574\u5408\u5904\u7406\u51fd\u6570 def text_preprocess ( text , tokenizer , max_length ): text_token = _use_tokenizer ( tokenizer , text ) text_token = _pad_sequences ( text_token , max_length , value = 0 , ) return torch . tensor ( text_token ) train_txt_list = text_preprocess ( multimodal_data_text , tokenizer , 15 ) ## \u56fe\u50cf\u5904\u7406\u6d41\u7a0b # \u6839\u636e\u4e4b\u524d\u7684\u6570\u636e\u5206\u6790\u83b7\u5f97 gold_size = ( 700 , 500 ) # \u4f7f\u6a21\u578b\u8f93\u5165\u5f20\u91cf\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5747\u503c\u5217\u8868\uff0c\u4ee3\u8868\u5404\u4e2a\u901a\u9053\u7684\u5747\u503c\uff0c # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u6807\u51c6\u5dee\u5217\u8868\uff0c\u4ee3\u8868\u5404\u4e2a\u901a\u9053\u7684\u6807\u51c6\u5dee\u3002\u8fd9\u91cc\u7684\u56fe\u7247\u90fd\u662f\u6709\u4e09\u4e2a\u901a\u9053\u3002 # \u5176\u4e2d\u5747\u503c\u548c\u6807\u51c6\u5dee\u5217\u8868\u4e2d\u7684\u6570\u503c\u6765\u81ea\u5bf9ImageNet\u7684\u5168\u5c40\u91c7\u6837\u7ed3\u679c\u3002 gold_normalize = ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) # \u5b9a\u4e49\u4e00\u7cfb\u5217\u6807\u51c6\u5904\u7406\u6d41\u7a0b\uff0cResize\uff0c\u5f20\u91cf\u5316\uff0c\u89c4\u8303\u5316 # Resize\u548c\u5f20\u91cf\u5316\u7528\u4e8e\u7edf\u4e00\u56fe\u7247\u5c3a\u5bf8\u548c\u6ee1\u8db3\u6846\u67b6\u8981\u6c42 # \u89c4\u8303\u5316\u4fbf\u4e8e\u6a21\u578b\u5feb\u901f\u6536\u655b data_transforms = { 'train' : transforms . Compose ([ transforms . RandomResizedCrop ( gold_size ), transforms . ToTensor (), transforms . Normalize ( gold_normalize [ 0 ], gold_normalize [ 1 ]) ]), 'val' : transforms . Compose ([ transforms . Resize ( gold_size ), transforms . ToTensor (), transforms . Normalize ( gold_normalize [ 0 ], gold_normalize [ 1 ]) ]), } train_data_dir_list = list ( map ( lambda x : x [ \"img\" ], multimodal_data_list )) from PIL import Image def img_loader ( path ): \"\"\"\u56fe\u7247\u8bfb\u53d6\"\"\" with open ( path , 'rb' ) as f : img = Image . open ( f ) return img . convert ( 'RGB' ) # \u8fdb\u884c\u6307\u5b9a\u7684\u8f6c\u5316 train_img_list = list ( map ( lambda x : data_transforms [ \"train\" ]( img_loader ( x )), train_data_dir_list )) ## \u83b7\u53d6\u6807\u7b7e train_label_list = list ( map ( lambda x : x [ \"label\" ], multimodal_data_list )) ## \u6574\u5408\u6570\u636e\u6210\u4e3aDataLoader from torch.utils.data import DataLoader train_iter = list ( zip ( train_img_list , train_txt_list , train_label_list )) BATCH_SIZE = 8 train_dataloader = DataLoader ( train_iter , batch_size = BATCH_SIZE , shuffle = True ) print ( train_dataloader ) Step3\uff1a\u5b9a\u4e49\u635f\u5931\u51fd\u6570\uff0c\u4f18\u5316\u5668\u4ee5\u53ca\u91cd\u8981\u7684\u8d85\u53c2\u6570\uff0c\u8bad\u7ec3\u548c\u8bc4\u4f30\u4f60\u7684\u6a21\u578b\uff08\u5047\u8bbe\u9a8c\u8bc1\u96c6\uff0c\u6d4b\u8bd5\u96c6\u4e0e\u8bad\u7ec3\u96c6\u76f8\u540c\uff09\u3002 import time # Hyperparameters EPOCHS = 20 # epoch LR = 0.05 # learning rate criterion = torch . nn . CrossEntropyLoss () optimizer = torch . optim . SGD ( model . parameters (), lr = LR ) scheduler = torch . optim . lr_scheduler . StepLR ( optimizer , 0.99 , gamma = 0.1 ) total_accu = None # \u6682\u4e14\u8ba4\u4e3a\u4e09\u4e2a\u6570\u636e\u96c6\u662f\u76f8\u540c\u7684 test_dataloader = valid_dataloader = train_dataloader def train ( dataloader ): model . train () total_acc , total_count = 0 , 0 log_interval = 500 start_time = time . time () for idx , ( img , txt , label ) in enumerate ( dataloader ): optimizer . zero_grad () predited_label = model ( txt , img ) loss = criterion ( predited_label , label ) loss . backward () # torch.nn.utils.clip_grad_norm_(model.parameters(), 0.1) optimizer . step () total_acc += ( predited_label . argmax ( 1 ) == label ) . sum () . item () total_count += label . size ( 0 ) if idx % log_interval == 0 and idx > 0 : elapsed = time . time () - start_time print ( \"| epoch {:3d} | {:5d}/{:5d} batches \" \"| accuracy {:8.3f}\" . format ( epoch , idx , len ( dataloader ), total_acc / total_count ) ) total_acc , total_count = 0 , 0 start_time = time . time () def evaluate ( dataloader ): model . eval () total_acc , total_count = 0 , 0 with torch . no_grad (): for idx , ( img , txt , label ) in enumerate ( dataloader ): predited_label = model ( txt , img ) loss = criterion ( predited_label , label ) total_acc += ( predited_label . argmax ( 1 ) == label ) . sum () . item () total_count += label . size ( 0 ) return total_acc / total_count for epoch in range ( 1 , EPOCHS + 1 ): epoch_start_time = time . time () train ( train_dataloader ) accu_val = evaluate ( valid_dataloader ) if total_accu is not None and total_accu > accu_val : scheduler . step () else : total_accu = accu_val print ( \"-\" * 59 ) print ( \"| end of epoch {:3d} | time: {:5.2f}s | \" \"valid accuracy {:8.3f} \" . format ( epoch , time . time () - epoch_start_time , accu_val ) ) print ( \"-\" * 59 ) print ( \"Checking the results of test dataset.\" ) accu_test = evaluate ( test_dataloader ) print ( \"test accuracy {:8.3f}\" . format ( accu_test )) torch . save ( model . state_dict (), './model_weights.pth' ) \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0 \u603b\u4f53\u670d\u52a1\u67b6\u6784\u8bbe\u8ba1 \u4f7f\u7528\u57fa\u4e8eDjango\u7684\u670d\u52a1\u6846\u67b6\u3002 \u4f7f\u7528nginx\u4f5c\u4e3a\u53cd\u5411\u4ee3\u7406\u548c\u8d1f\u8f7d\u5747\u8861\u3002 \u4f7f\u7528supervisor\u4f5c\u4e3a\u5355\u670d\u52a1\u5b88\u62a4\u4e0e\u76d1\u63a7\u3002 \u4f7f\u7528uwsgi\u4f5c\u4e3a\u9ad8\u6027\u80fdweb server\u3002 \u6a21\u578b\u670d\u52a1\u5c01\u88c5 \u57fa\u4e8etensorflow/keras\u6846\u67b6\u5f00\u53d1\u7684\u6a21\u578b\u4f7f\u7528tf-serving\u8fdb\u884c\u5c01\u88c5\uff0c\u4ee5\u4fdd\u8bc1\u670d\u52a1\u5065\u58ee\u6027\u4ee5\u53ca\u6a21\u578b\u70ed\u66f4\u65b0\u3002 \u57fa\u4e8epytorch\u6846\u67b6\u5f00\u53d1\u7684\u6a21\u578b\u4f7f\u7528flask\u6846\u67b6\u8fdb\u884c\u5c01\u88c5\uff0c\u4f7f\u7528\u4ea4\u66ff\u53cc\u670d\u52a1\u4fdd\u8bc1\u6a21\u578b\u70ed\u66f4\u65b0\u3002 \u7cfb\u7edf\u8054\u8c03\u4e0e\u6d4b\u8bd5 \u4e0e\u5916\u754c\u670d\u52a1\u4f7f\u7528REST API\uff08http\uff09\u8fdb\u884c\u4ea4\u4e92\u3002 \u8f93\u5165\u4e0e\u8f93\u51fa\u4e3a\u89c4\u8303json\u683c\u5f0f\u3002 \u6839\u636e\u5b9e\u9645\u63a5\u53e3\u8c03\u7528\u60c5\u51b5\uff0c\u8fdb\u884c\u5e76\u53d1\u538b\u529b\u6d4b\u8bd5\u3002 \u7070\u5ea6\u53d1\u5e03\uff0c\u8fdb\u884c\u53ef\u7528\u6027\u6d4b\u8bd5\u3002 \u670d\u52a1\u5668\u8d44\u6e90 \u6a21\u578b\u8bad\u7ec3\u670d\u52a1\u5668\uff1a CPU: 64C\uff0c128G\u5185\u5b58\uff0c1T\u786c\u76d8 > * GPU: 4*Tesla T4 \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u5668: CPU: 64C\uff0c128G\u5185\u5b58\uff0c1T\u786c\u76d8\uff0c10M\u5e26\u5bbd \u7b2c\u4e94\u6b65: \u603b\u7ed3\u4e0e\u6539\u8fdb \u4e0a\u8ff0\u65b9\u6848\u7684\u6a21\u578b\u662f\u8f83\u65e9\u671f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06GRU\u548cResnet\u66ff\u6362\u6210\u66f4\u5177\u6709\u63d0\u53d6\u80fd\u529b\u7684\u6a21\u578b\uff0c\u5982\uff1aBERT\uff0cInceptionV3\u7b49\u3002\u540c\u65f6\u7279\u5f81\u878d\u5408\u7684\u70b9\u4e5f\u662f\u503c\u5f97\u8003\u8651\u7684\uff0c\u7b80\u5355\u7684\u52a0\u6027\u8fd0\u7b97\u6216\u5219\u62fc\u63a5\u7edd\u4e0d\u662f\u6700\u4f73\u7684\u9009\u62e9\u3002 \u6240\u4ee5\u5728\u4e4b\u540e\u771f\u6b63\u7684\u65b9\u6848\u5b9e\u65bd\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u66f4\u591a\u7684\u65b9\u6cd5\u3002 \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u4f5c\u7528: \u4e00\u65b9\u9762\u5e2e\u52a9\u6211\u4eec\u521d\u6b65\u68b3\u7406\u6574\u4e2a\u5904\u7406\u601d\u8def\u548c\u6d41\u7a0b\uff0c\u53e6\u4e00\u65b9\u9762\u7ed9\u5408\u4f5c\u90e8\u95e8\u4eba\u5458\u5f70\u663e\u6211\u4eec\u662f\u53ef\u4ee5\u80dc\u4efb\u8fd9\u9879\u5de5\u4f5c\u7684\u3002 \u5b66\u4e60\u4e86\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e09\u6b65: \u6784\u5efaResnet\u548cGRU\u7ed3\u5408\u7684\u591a\u6a21\u6001\u6a21\u578b \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0 \u7b2c\u4e94\u6b65: \u603b\u7ed3\u4e0e\u6539\u8fdb 2.3 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u5b9e\u65bd\u4e0e\u8c03\u6574 \u5b66\u4e60\u76ee\u6807 \u638c\u63e1ViLBERT\u4e2d\u6700\u6838\u5fc3\u7684\u4f18\u5316\u65b9\u6848\u4ee5\u53ca\u4ee3\u7801\u5b9e\u73b0\u3002 \u638c\u63e1\u771f\u5b9e\u6a21\u578b\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u91cd\u70b9\u5de5\u7a0b\u95ee\u9898\u3002 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5b9e\u65bd\u6b65\u9aa4 \u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e8c\u6b65: \u8fdb\u884c\u6a21\u578b\u8bc6\u522b\u90e8\u5206\u5206\u6790 \u7b2c\u4e09\u6b65: \u5bf9\u6a21\u578b\u8fdb\u884c\u5de5\u7a0b\u5316\u90e8\u7f72 \u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790 \u6839\u636e\u4e4b\u524d\u7684\u6570\u636e\u8981\u6c42\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u5355\u7c7b\u522b\u81f3\u5c1110\u4e07\u7684\u6587\u672c\u4e0e\u56fe\u50cf\u6570\u636e\uff0c\u5047\u8bbe\u6211\u4eec\u7684\u7c7b\u522b\u603b\u6570\u662f50\uff0c\u90a3\u4e48\u6570\u636e\u603b\u91cf\u5c31\u662f500\u4e07+\uff1b\u8fd9\u4e9b\u6570\u636e\u600e\u4e48\u6765\u7684\u5462\uff0c\u5e76\u4e0d\u662f\u4eba\u5de5\u6807\u6ce8\u5f97\u5230\u7684\uff0c\u800c\u662f\u901a\u8fc7\u7528\u6237\u81ea\u5b9a\u4e49\u6807\u7b7e\u83b7\u5f97\u7684\uff0c\u6bd4\u5982\u7528\u6237\u5728\u7ed9\u89c6\u9891\u6253\u4e86#\u5468\u6770\u4f26\uff0c\u90a3\u8fd9\u4e2a\u89c6\u9891\u53bb\u9664\u6807\u7b7e\u540e\u5c31\u6210\u4e3a\u4e86\u201c\u97f3\u4e50\u201d\u6807\u7b7e\u7684\u6b63\u6837\u672c\u3002 \u5bf9\u6587\u672c\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790\uff1a \u6ce8\uff1a\u6570\u636e\u662f\u4e25\u683c\u7684\u516c\u53f8\u8d44\u4ea7\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u4e00\u822c\u65e0\u6cd5\u62ff\u5230\u771f\u5b9e\u91cf\u7ea7\u7684\u6570\u636e\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u5f71\u54cd\u6211\u4eec\u5728\u9762\u8bd5\u8fc7\u7a0b\u4e2d\u9610\u8ff0\u6570\u636e\u5f62\u5f0f\uff0c\u548c\u5b66\u4e60\u6709\u5173\u6570\u636e\u7684\u6280\u672f\uff0c\u4e0b\u9762\u7684\u6570\u636e\u5206\u6790\u5c06\u4ee5\u201c\u4f20\u667a\u5927\u8111\u201d\u9879\u76ee\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u8fc1\u79fb\u8bb2\u89e3\u3002 \u4ece\u7279\u5b9asql\u6570\u636e\u5e93\u4e2d\u83b7\u5f97\u6307\u5b9a\u6570\u636e: # \u8bf7\u5b89\u88c5mysql\u5de5\u5177\uff1apip install pymysql import pandas as pd import pymysql # \u5185\u90e8\u6570\u636e\u5e93\u914d\u7f6e, \u8fd9\u662f\u7531\u6570\u4ed3\u5de5\u7a0b\u5e08\u63d0\u4f9b\u7684 sql_config = { \"host\" : \"47.241.24.21\" , \"user\" : \"ai_test\" , \"password\" : \"*****************\" , \"database\" : \"ai\" , } # \u6253\u5f00\u6570\u636e\u5e93\u8fde\u63a5 db = pymysql . connect ( ** sql_config ) # \u4f7f\u7528 cursor() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u6e38\u6807\u5bf9\u8c61 cursor cursor = db . cursor () # \u4f7f\u7528 execute() \u65b9\u6cd5\u6267\u884c SQL \u67e5\u8be2 # \u7f16\u5199sql\u8bed\u53e5\uff0c\u6839\u636eid\u53d6\u51fa\u6307\u5b9a\u8303\u56f4\u7684\u5185\u5bb9\u67e5\u770b, \u8fd9\u91cc\u53d6\u524d1000\u6761 cursor . execute ( \"SELECT * from `ai_test` WHERE 0 < id < 1000\" ) # \u4f7f\u7528 fetchall() \u65b9\u6cd5\u83b7\u53d6\u5168\u90e8\u6570\u636e. data = cursor . fetchall () # \u8f93\u51fa\u6210csv\u6216excel\u6587\u4ef6\uff0c\u8fd9\u91cc\u662f\u8f93\u51facsv # \u8f93\u51faexcel\u4f7f\u7528df.to_excel API\u5373\u53ef df = pd . DataFrame ( data ) df . to_csv ( \"./corpus.csv\" ) # \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5 db . close () \u4ee3\u7801\u4f4d\u7f6e: \u5185\u7f51\u670d\u52a1\u5668\u7684/data/coItcastBrain/fetch_data.py \u8f93\u51fa\u6548\u679c: \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210corpus.csv\u6216corpus.xlsx\u6587\u4ef6 \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\u56fe\u6240\u793a\uff08\u8fd9\u91cc\u4e3a\u4e86\u6e05\u6670\u663e\u793a\u548c\u8bf4\u660e\u4f7f\u7528excel\u6253\u5f00\uff09 \u5185\u7f51\u673a\u5668IP\uff1a172.17.0.228 \u6570\u636e\u8bf4\u660e: \u7531\u4e8e\u6570\u636e\u6d89\u53ca\u7528\u6237\u9690\u79c1\uff0c\u5b66\u751f\u65e0\u6cd5\u8bf7\u6c42\u5185\u7f51\u6570\u636e\u5e93\uff0c\u4f46\u662f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7ed9\u5b9a\u7684\u90e8\u5206\u8131\u654f\u6570\u636e\uff08\u5982\u4e0a\u56feexcel\u5f62\u5f0f\uff09\u3002 \u901a\u8fc7\u4e0a\u56fe\u8868\u683c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5171\u670913\u5217\uff0813\u4e2a\u5b57\u6bb5\uff09\uff0c\u5206\u522b\u662f\"\u4f1a\u8bddID\"\uff0c\"\u65f6\u95f4\"\uff0c\"\u65f6\u95f4\u6233\"\uff0c\"\u5185\u5bb9\"\uff0c\"\u6d88\u606f\u53d1\u9001\u4eba\"\uff0c\"\u59d3\u540d\"\uff0c\"\u624b\u673a\u53f7\"\uff0c\"QQ\"\uff0c\"\u5fae\u4fe1\"\uff0c\"\u610f\u5411\u6821\u533a\"\uff0c\"\u610f\u5411\u5b66\u79d1\"\uff0c\"\u4e13\u9898\u9875\u6807\u9898\"\uff0c\"\u5730\u533a\"\u3002\u4e0b\u9762\u5bf9\u6bcf\u4e2a\u5b57\u6bb5\u5206\u522b\u89e3\u91ca\u3002 \u4f1a\u8bddID\uff1a\u6574\u4e2a\u5bf9\u8bdd\u5757\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u7528\u4e8e\u533a\u5206\u6d88\u606f\u5185\u5bb9\u662f\u5426\u4e3a\u540c\u4e00\u6b21\u5bf9\u8bdd\u3002 \u65f6\u95f4\uff1a\u8be5\u6761\u6d88\u606f\u53d1\u9001\u51fa\u53bb\u7684\u5177\u4f53\u7ed3\u6784\u5316\u65f6\u95f4\u3002 \u65f6\u95f4\u6233\uff1a\u8be5\u6761\u6d88\u606f\u53d1\u9001\u51fa\u53bb\u7684\u65f6\u95f4\u6233\u3002 \u5185\u5bb9\uff1a\u8be5\u6761\u6d88\u606f\u7684\u5177\u4f53\u5185\u5bb9\u3002 \u6d88\u606f\u53d1\u9001\u4eba\uff1a\u8be5\u6761\u6d88\u606f\u662f\u7531\u8c01\u53d1\u9001\u7684\uff0c\u8fd9\u91cc\u53ea\u6709\"\u5ba2\u6237\"\u548c\"\u54a8\u8be2\u5e08\"\u4e24\u79cd\u3002 \u59d3\u540d\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u59d3\u540d\u3002\u4ece\"\u59d3\u540d\"\u5b57\u6bb5\u5f00\u59cb\u4e3a\u975e\u5bf9\u8bdd\u5757\u672c\u8eab\u7684\u5b57\u6bb5\uff0c\u800c\u662f\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u5757\u586b\u5199\u7684\u5b66\u5458\u4fe1\u606f\u6216\u5176\u4ed6\u8f85\u52a9\u4fe1\u606f\u3002 \u624b\u673a\u53f7\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u624b\u673a\u53f7\u3002 QQ\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458QQ\u53f7\u3002 \u5fae\u4fe1\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u5fae\u4fe1\u53f7\u3002 \u610f\u5411\u6821\u533a\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u610f\u5411\u6821\u533a\u3002 \u610f\u5411\u5b66\u79d1\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u610f\u5411\u5b66\u79d1\u3002 \u4e13\u9898\u9875\u6807\u9898\uff1a\u8fd9\u662f\u4e00\u4e2a\u54a8\u8be2\u5e08\u8f85\u52a9\u4fe1\u606f\uff0c\u4ee3\u8868\u5b66\u5458\u901a\u8fc7\u5b98\u7f51\u4e2d\u54ea\u4e2a\u9875\u9762\u8fdb\u884c\u54a8\u8be2\u7684\u3002\u8fd9\u4e2a\u4fe1\u606f\u54a8\u8be2\u5e08\u4f7f\u7528\u7684\u7cfb\u7edf\u662f\u53ef\u4ee5\u83b7\u5f97\u7684\u3002 \u5730\u533a\uff1a\u8fd9\u4e5f\u662f\u4e00\u4e2a\u8f85\u52a9\u4fe1\u606f\uff0c\u4ee3\u8868\u5b66\u5458\u4f7f\u7528\u7684\u7ec8\u7aef\u6240\u5728IP\u5730\u533a\u3002\u8fd9\u4e2a\u4fe1\u606f\u54a8\u8be2\u5e08\u4f7f\u7528\u7684\u7cfb\u7edf\u4e5f\u662f\u53ef\u4ee5\u83b7\u5f97\u7684\u3002 \u7edf\u8ba1\u6587\u672c\u957f\u5ea6\u5206\u5e03\u7684\u5b9e\u73b0: # \u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u5305 import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # \u8bbe\u7f6e\u663e\u793a\u98ce\u683c plt . style . use ( \"fivethirtyeight\" ) # \u8fd9\u91cc\u4ee5\u7ed9\u5b9a\u7684excel\u8868\u683c\u4e3a\u8f93\u5165 # \u8be5\u6570\u636e\u53ef\u4ee5\u5728\u7ed9\u5b9a\u7684\u539f\u59cb\u4ee3\u7801\u4e2d\u627e\u5230 # \u53ef\u4ee5\u5c06\u8be5\u6bb5\u4ee3\u7801\u548c\u6570\u636e\u62f7\u8d1d\u5230\u672c\u5730\u8fd0\u884c\uff0c\u67e5\u770b\u53ef\u89c6\u5316\u6548\u679c path = \"/data/coItcastBrain/\u539f\u59cb\u6570\u636e\u5df2\u8131\u654f.xlsx\" # \u8bfb\u53d6excel\u8868\u683c original_data = pd . read_excel ( path , \"Sheet4\" ) # \u6211\u4eec\u4f1a\u5c06\"\u5ba2\u6237\"\u7684\u6d88\u606f\u5185\u5bb9\u548c\"\u54a8\u8be2\u5e08\"\u7684\u6d88\u606f\u5185\u5bb9\u5206\u5f00\u7edf\u8ba1 # \u5206\u522b\u83b7\u5f97\u5bf9\u5e94\u7684\u5185\u5bb9 user_original_data = original_data [ original_data [ \"\u6d88\u606f\u53d1\u9001\u4eba\" ] == \"\u5ba2\u6237\" ] employee_original_data = original_data [ original_data [ \"\u6d88\u606f\u53d1\u9001\u4eba\" ] == \"\u54a8\u8be2\u5e08\" ] # \u5206\u522b\u5728\u6570\u636e\u4e2d\u6dfb\u52a0\u65b0\u7684\u53e5\u5b50\u957f\u5ea6\u5217 user_original_data [ \"sentence_length\" ] = list ( map ( lambda x : len ( str ( x )), user_original_data [ \"\u5185\u5bb9\" ]) ) employee_original_data [ \"sentence_length\" ] = list ( map ( lambda x : len ( str ( x )), employee_original_data [ \"\u5185\u5bb9\" ]) ) print ( \"\u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u5206\u5e03\u56fe:\" ) # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u7684\u6570\u91cf\u5206\u5e03\u56fe sns . countplot ( \"sentence_length\" , data = user_original_data ) # \u4e3b\u8981\u5173\u6ce8count\u957f\u5ea6\u5206\u5e03\u7684\u7eb5\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u6a2a\u5750\u6807, \u6a2a\u5750\u6807\u8303\u56f4\u901a\u8fc7dist\u56fe\u8fdb\u884c\u67e5\u770b plt . xticks ([]) plt . show () # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( user_original_data [ \"sentence_length\" ]) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . show () print ( \"\u7ed8\u5236\u54a8\u8be2\u5e08\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u5206\u5e03\u56fe:\" ) # \u7ed8\u5236\u54a8\u8be2\u5e08\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u7684\u6570\u91cf\u5206\u5e03\u56fe sns . countplot ( \"sentence_length\" , data = employee_original_data ) # \u4e3b\u8981\u5173\u6ce8count\u957f\u5ea6\u5206\u5e03\u7684\u7eb5\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u6a2a\u5750\u6807, \u6a2a\u5750\u6807\u8303\u56f4\u901a\u8fc7dist\u56fe\u8fdb\u884c\u67e5\u770b plt . xticks ([]) plt . show () # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( employee_original_data [ \"sentence_length\" ]) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . show () \u4ee3\u7801\u4f4d\u7f6e: /data/coItcastBrain/data_analysis.py \u8f93\u51fa\u6548\u679c: \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u6570\u91cf-\u957f\u5ea6\u5206\u5e03\u56fe: \u7ed8\u5236\u54a8\u8be2\u5e08\u5bf9\u8bdd\u53e5\u5b50\u6570\u91cf-\u957f\u5ea6\u5206\u5e03\u56fe: \u5206\u6790: \u6839\u636e\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u5206\u5e03\u56fe\u5206\u6790\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b66\u5458\u5355\u6b21\u5bf9\u8bdd\u957f\u5ea6\u9650\u5b9a\u5728\u5c0f\u4e8e50\u7684\u4f4d\u7f6e\u5373\u53ef\u8986\u76d690%\u5de6\u53f3\u7684\u60c5\u51b5\uff1b\u54a8\u8be2\u5e08\u5355\u6b21\u5bf9\u8bdd\u957f\u5ea6\u9650\u5b9a\u5728\u5c0f\u4e8e100\u7684\u4f4d\u7f6e\u5373\u53ef\u8986\u76d690%\u5de6\u53f3\u7684\u60c5\u51b5\u3002\u610f\u5473\u7740\u5728\u4e4b\u540e\u8d85\u8fc7\u9650\u5b9a\u957f\u5ea6\u7684\u53e5\u5b50\u5c06\u4e0d\u518d\u88ab\u5904\u7406\uff0c\u7528\u4ee5\u51cf\u5c11\u8ba1\u7b97\u538b\u529b\u3002 \u4e3a\u4e86\u9a8c\u8bc1\u88ab\u5ffd\u7565\u7684\u53e5\u5b50\u786e\u5b9e\u4f5c\u7528\u4e0d\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u627e\u5230\u9650\u5b9a\u957f\u5ea6\u540e\u8fdb\u884c\u8d85\u9650\u53e5\u5b50\u62bd\u6837\u67e5\u770b\u3002\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u8fdb\u884c\u6253\u5370\u67e5\u770b\uff1a # \u5bf9\u5b66\u5458\u548c\u54a8\u8be2\u5e08\u7684\u8d85\u9650\u53e5\u5b50\u8fdb\u884c\u62bd\u6837\u67e5\u770b, \u8fd9\u91cc\u62bd\u683710\u6761\u6570\u636e print ( \"\u5b66\u5458\u8d85\u9650\u53e5\u5b50\u67e5\u770b:\" ) print ( user_original_data [ user_original_data [ \"sentence_length\" ] > 50 ][ \"\u5185\u5bb9\" ][: 10 ]) print ( \"\u54a8\u8be2\u5e08\u8d85\u9650\u53e5\u5b50\u67e5\u770b:\" ) print ( employee_original_data [ employee_original_data [ \"sentence_length\" ] > 100 ][ \"\u5185\u5bb9\" ][: 10 ]) \u8f93\u51fa\u6548\u679c: \u5b66\u5458\u8d85\u9650\u53e5\u5b50\u67e5\u770b: 17 \u6765\u6e90\uff1a<a target='_blank' href='http://www.itheima... 50 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://m.itheima... 70 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://m.itheima... 104 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://m.itheima... 274 https://fs-im-kefu.0moor.com/im/b1f02202-210e-... 376 \u6765\u6e90\uff1a<a target='_blank' href='http://www.itheima... 724 \u6765\u6e90\uff1a<a target='_blank' href='http://www.itcast.... 725 \u6765\u6e90\uff1a<a target='_blank' href='http://m.itheima.c... 863 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://www.ithei... 1083 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://m.itheima... Name: \u5185\u5bb9, dtype: object \u54a8\u8be2\u5e08\u8d85\u9650\u53e5\u5b50\u67e5\u770b: 0 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 19 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 29 https://fs-im-kefu.0moor.com/im/d01d1cf2-1e00-... 39 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 56 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 91 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 113 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 125 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 141 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 158 https://fs-im-kefu.0moor.com/im/b1f02202-210e-... Name: \u5185\u5bb9, dtype: object \u5206\u6790: \u6211\u4eec\u53d1\u73b0\u51e0\u4e4e\u6240\u6709\u7684\u8d85\u9650\u53e5\u5b50\u90fd\u662f\u7cfb\u7edf\u81ea\u52a8\u53d1\u9001\u7684\u4e00\u4e9b\u6d88\u606f\uff0c\u5e76\u4e0d\u6765\u81ea\u4e8e\u771f\u5b9e\u7684\u5bf9\u8bdd\u4e3b\u4f53\uff0c\u5bf9\u6211\u4eec\u7684\u6587\u672c\u5206\u6790\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002 \u6839\u636e \u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u73af\u8282: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u6211\u4eec\u8fd8\u9700\u8981\u7edf\u8ba1\u6587\u672c\u4e2d\u5404\u4e2a\u4e3b\u8981\u5b9e\u4f53\u771f\u5b9e\u51fa\u73b0\u9891\u7387\uff0c\u6765\u786e\u5b9a\u5404\u4e2a\u5b9e\u4f53\u8bc6\u522b\u7684\u4f18\u5148\u7b49\u7ea7\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5728\u771f\u5b9e\u7684\u6570\u636e\u4e2d\uff0c\u54a8\u8be2\u5e08\u5e76\u4e0d\u80fd\u51c6\u786e\u586b\u5199\u5b9e\u4f53\u4fe1\u606f\uff0c\u800c\u4e14\u7c7b\u4f3c\u4e8e\"\u610f\u5411\u6821\u533a\"\u548c\"\u610f\u5411\u5b66\u79d1\"\u57fa\u672c\u4e0a\u662f\u901a\u8fc7\"\u5730\u533a\"\u548c\"\u4e13\u9898\u9875\u6807\u9898\"\u8fd9\u6837\u7684\u8f85\u52a9\u4fe1\u606f\u6765\u786e\u5b9a\u7684\uff0c\u4e0e\u5bf9\u8bdd\u5185\u5bb9\u672c\u8eab\u5e76\u65e0\u5173\u8054\u3002\u56e0\u6b64\u6211\u4eec\u6ca1\u6709\u505a\u8be5\u79cd\u6570\u636e\u5206\u6790\u3002 \u4e5f\u53ef\u4ee5\u6253\u5370\u6bcf\u4e2a\u5bf9\u8bdd\u5757\u4e2d\u7684\u5b66\u5458\u5bf9\u8bdd\u5185\u5bb9\u8fdb\u884c\u67e5\u770b: \u4e3b\u8981\u5173\u6ce8\u5bf9\u8bdd\u8d28\u91cf ## \u6253\u5370\u5b66\u5458\u5bf9\u8bdd\u5185\u5bb9 # \u5148\u5bf9\u957f\u5ea6\u8d85\u8fc750\u7684\u53e5\u5b50\u8fdb\u884c\u8fc7\u6ee4 user_original_data = user_original_data [ user_original_data [ \"sentence_length\" ] <= 50 ] # \u518d\u53bb\u9664\u591a\u4f59\u7684\u5217\uff0c\u53ea\u7559\u4e0b\u201c\u4f1a\u8bddID\u201d\u548c\u201c\u5185\u5bb9\u201d df = user_original_data . drop ( [ \"\u65f6\u95f4\" , \"\u65f6\u95f4\u6233\" , \"sentence_length\" , \"\u59d3\u540d\" , \"\u624b\u673a\u53f7\" , \"QQ\" , \"\u5fae\u4fe1\" , \"\u610f\u5411\u5b66\u79d1\" , \"\u610f\u5411\u6821\u533a\" , \"\u6d88\u606f\u53d1\u9001\u4eba\" , \"\u4e13\u9898\u9875\u6807\u9898\" , \"\u5730\u533a\" , ], axis = 1 , ) # \u5c06DataFrame\u8f6c\u6210\u5217\u8868 # \u5f62\u5982[[\u4f1a\u8bddID1, \u5bf9\u5e94\u7684\u5185\u5bb91], [\u4f1a\u8bddID1, \u5bf9\u5e94\u7684\u5185\u5bb92], # [\u4f1a\u8bddID2, \u5bf9\u5e94\u7684\u5185\u5bb91], [\u4f1a\u8bddID2, \u5bf9\u5e94\u7684\u5185\u5bb92]] temp = df . values . tolist () # \u4f7f\u7528\u4ee5\u4e0b\u8fc7\u7a0b\u5c06temp\u8f6c\u6362\u4e3a[[\u4f1a\u8bddID1, \u5bf9\u5e94\u7684\u5185\u5bb91, \u5bf9\u5e94\u7684\u5185\u5bb92], # [\u4f1a\u8bddID2, \u5bf9\u5e94\u7684\u5185\u5bb91, \u5bf9\u5e94\u7684\u5185\u5bb92]] # \u521b\u5efa\u5b58\u50a8\u7ed3\u679c\u7684\u7a7a\u5217\u8868 result = [] # \u5bf9temp\u8fdb\u884c\u5faa\u73af\u904d\u5386 for index , item in enumerate ( temp ): # \u4f7f\u5bf9\u8bdd\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b item [ 1 ] = str ( item [ 1 ]) # \u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u5217\u8868\u76f4\u63a5\u88c5\u8fdb\u7ed3\u679c\u5217\u8868 if index == 0 : result . append ( item ) else : # \u63a5\u4e0b\u6765\u904d\u5386\u7684\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u4f1a\u8bddID\u8981\u4e0e\u5df2\u8fdb\u5165\u7ed3\u679c\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5217\u8868\u4f1a\u8bddID\u505a\u6bd4\u8f83 # \u5982\u679c\u76f8\u540c\uff0c\u8bf4\u660e\u662f\u540c\u4e00\u4e2a\u5bf9\u8bdd\u5757\u4e2d\u7684\u5185\u5bb9 if item [ 0 ] == result [ - 1 ][ 0 ]: # \u5219\u5c06\u5185\u5bb9\u5b58\u5230\u7ed3\u679c\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5217\u8868\u4e2d result [ - 1 ] . append ( item [ 1 ]) else : # \u5426\u5219\u8bf4\u660e\u662f\u4e0d\u540c\u7684\u5bf9\u8bdd\u5757\uff0c\u5219\u5e26\u7740\u4f1a\u8bddID\u76f4\u63a5\u5b58\u8fdb\u7ed3\u679c\u5217\u8868 result . append ( item ) # \u6253\u5370\u8f6c\u5316\u540e\u7684\u7ed3\u679c print ( result ) \u4ee3\u7801\u4f4d\u7f6e: /data/coItcastBrain/data_analysis.py \u8f93\u51fa\u6548\u679c: [[2324393, '\u4ef7\u683c\uff1f', 'C++', '\u597d', 'wangtong_chn@022.com', '02101021202'], [2324405, '022221221', '\u7528\u6237\u5df2\u79bb\u5f00'], [2324430, '\u8f6f\u4ef6\u6d4b\u8bd5', '\u6ca1\u6709', '02202122220'], [2324667, '\u4f60\u597d', '\u65b0\u5a92\u4f53\u77ed\u89c6\u9891\uff0c\u8fd0\u8425', '01202021012', '\u5fae\u4fe1\u53f7', '\u55ef\u55ef\u5bf9\u7684'], [2325404, 'ui\u8bbe\u8ba1', '\u662f\u7684', '\u5fae\u4fe1\u5427', 'JP0222121', '01102010022', '\u597d\u7684', '\uff1f\uff1f\uff1f', '\u597d\u7684\u597d\u7684'], [2325542, '\u52a0\u4e2a\u5fae\u4fe1\u804a', '02202112112', '\u662f\u7684', '\u4e0d\u8981\u6253\u7535\u8bdd'], [2325615, '\u6211\u5df2\u7ecf\u62a5\u540d\u4e86\uff0c\u8fc7\u6765\u770b\u4e00\u4e0b', '\u6211\u4eec\u6cb3\u6c60\u5e02\u7edf\u4e00\u7684', '00000222220', '\u55ef', '\u7528\u6237\u5df2\u79bb\u5f00'], [2325712, '\u96f6\u57fa\u7840', '\u5bf9\u81ea\u5a92\u4f53\u7684\u6982\u5ff5\u5f88\u542b\u7cca\uff0c\u4e0d\u77e5\u600e\u4e48\u5165\u624b', '11120012QQ\u53f7', '\u662f\u7684', '00001002002', '\u5c31\u662f\u8fd9\u4e2a\u53ef\u4ee5\u73b0\u573a\u57f9\u8bad\u5417'], [2325852, '2', '\u8fd9\u4e2a\u662f\u4ee3\u7801\u754c\u9762\u4e48\uff1f', '\u662f\u7684', '\u5de5\u4f5c\u9700\u8981', '\u5fae\u4fe1', '01212121121', '\u540c\u6b65', '\u597d\u7684'], [2325977, '\u6211\u60f3\u5b66\u5e73\u9762\u8bbe\u8ba1', '\u6ca1\u6709', '\u8c22\u8c22', '1121021000QQ\u53f7', '\u6211\u8fd9\u8fb9\u767b\u5f55QQ\u6536\u4e00\u4e0b', '\u597d\u7684', '02022100221', '\u8fd9\u4e2a\u5b66\u4e60\u9700\u8981\u591a\u4e45 \u51e0\u5e74 \u6587\u5316\u7a0b\u5ea6\u8981\u6c42'], [2326111, '120212020', '01212021201'], [2326250, '\u5728', '\u5b66\u4e60\u57fa\u7840', '\u600e\u6837\u6536\u8d39\uff1f', '\u662f\u7684', '02210111222', '\u662f\u7684'], [2326497, 'java', '\u6ca1\u6709', 'scl01220220111', '\u597d\u7684', '\u55ef', '\u7528\u6237\u5df2\u79bb\u5f00', '\u65b0\u7528\u6237\u63a5\u5165', '\u4f60\u77e5\u9053\u8fd9\u4e2a\u8bfe\u662f\u4e0d\u662f\u4f60\u4eec\u7684\u54ea\u4f4d\u8001\u5e08\u8bb2\u7684\uff1f', '\u6211\u662f\u522b\u7684\u4e0a\u9762\u770b\u5230\u7684', '\u6c34\u5370\u662f\u6c5f\u82cf\u4f20\u667a\u535a\u5ba2\u79d1\u6280\u6709\u9650\u516c\u53f8', '\u6069'], [2326538, '\u8bed\u6587', 'scrapy\u6846\u67b6', '\u6846\u67b62\u57fa\u7840\uff0cpython\u770b\u4e86\u4e00\u70b9', 'QQ', '002112212', '01102222201', '\u6069\uff0c\u8c22\u8c22'], ...] \u7edf\u8ba1\u56fe\u7247\u5bbd-\u9ad8\u5206\u5e03 \u4f46\u67e5\u770b\u5bbd-\u9ad8\u5206\u5e03\u662f\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u4e4b\u540e\u5728\u8f93\u5165\u6a21\u578b\u524d\u9700\u8981\u89c4\u8303\u56fe\u7247\u5c3a\u5bf8\uff0c\u901a\u8fc7\u8be5\u5206\u5e03\uff0c\u53ef\u4ee5\u83b7\u5f97\u6bd4\u8f83\u5408\u9002\u7684\u4e2d\u95f4\u503c\u3002 import seaborn as sns # \u51c6\u5907online\u548coffline\u8def\u5f84\u4e0b\u7684\u56fe\u7247\u540d\u5b57 online_image_path = \"./online/\" online_image_names = os . listdir ( online_image_path ) offline_image_path = \"./offline/\" offline_image_names = os . listdir ( offline_image_path ) # \u521d\u59cb\u5316\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5217\u8868 w_list = [] h_list = [] # \u5bf9\u6240\u6709\u7684\u56fe\u7247\uff08\u5305\u62econline\u548coffline\uff09\u540d\u5b57\u8fdb\u884c\u904d\u5386 for image_name in online_image_names + offline_image_names : # \u8fd9\u91cc\u4f7f\u7528try\u6765\u533a\u5206\u6253\u5f00\u56fe\u7247\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u56fe\u7247\u540d\u5b57\u65e2\u6709online\u53c8\u6709offline # \u5728online\u8def\u5f84\u4e0b\u6253\u5f00\u51fa\u9519\uff0c\u5219\u5728offline\u8def\u5f84\u4e0b\u6253\u5f00 try : im = Image . open ( os . path . join ( online_image_path , image_name )) except : im = Image . open ( os . path . join ( offline_image_path , image_name )) # \u5c06\u6bcf\u5f20\u56fe\u7247\u7684\u5bbd\u9ad8\u5b58\u5165\u5217\u8868 w_list . append ( im . size [ 0 ]) # \u63a5\u4e0b\u6765\u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( w_list ) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . savefig ( \"./w_distribu.png\" ) plt . close () # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( h_list ) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . savefig ( \"./h_distribu.png\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: \u5728/data/ItcastBrain_CV/\u8def\u5f84\u4e0b\u751f\u6210w_distribu.png\u548ch_distribu.png\u4e24\u5f20\u56fe\u7247\u3002 \u5206\u6790: \u4ece\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6240\u6709\u56fe\u7247\u7684\u5bbd\u5ea6\u8303\u56f4\u5927\u6982\u4e3a\uff1a500-2000\uff0c\u5bc6\u5ea6\u8f83\u9ad8\u5728500-1000\u4e4b\u95f4\uff1b\u9ad8\u5ea6\u8303\u56f4\u5927\u6982\u4e3a\uff1a250-2000\uff0c\u5bc6\u5ea6\u8f83\u9ad8\u5728250-750\u4e4b\u95f4\uff0c\u56e0\u6b64\u8f83\u5408\u7406\u7684\u89c4\u8303\u88c1\u526a\u5bbd\u5ea6\u4e3a(500 + 1000)/2 = 750, \u526a\u88c1\u9ad8\u5ea6\u4e3a(250 + 750)/2 = 500\u3002\u8fd9\u5728\u8bad\u7ec3\u524d\u5904\u7406\u65f6\u5c06\u4f1a\u4f7f\u7528\u3002 \u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u6a21\u578b\u8bc6\u522b\u90e8\u5206\u5206\u6790 \u968f\u7740\u8fc1\u79fb\u5b66\u4e60\u6280\u672f\u8d8a\u6765\u8d8a\u6210\u719f\uff0c\u6570\u636e\u79ef\u7d2f\u8d8a\u6765\u8d8a\u591a\uff0c\u5927\u578b\u6a21\u578b\u5728\u591a\u6a21\u6001\u9886\u57df\u7684\u8868\u73b0\u8d8a\u6765\u8d8a\u62a2\u773c\u3002\u4ee5VisualBERT\u548cViLBERT\u4e3a\u4ee3\u8868\u7684\u5355\u53cc\u6d41\u6a21\u578b\u662f\u65f6\u4ee3\u4e4b\u661f\uff0c\u5c24\u5176\u5728\u62e5\u6709\u6d77\u91cf\u6570\u636e\u7684\u5de5\u4e1a\u754c\uff0cViLBERT\u5e94\u7528\u66f4\u662f\u5e7f\u6cdb\u3002\u4e0b\u9762\u6211\u4eec\u5c06\u7b80\u5355\u4ecb\u7ecd\u8be5\u6a21\u578b\uff0c\u5e76\u5b9e\u73b0\u5176\u4e2d\u6838\u5fc3\u7684\u5f20\u91cf\u878d\u5408\u65b9\u5f0fCo-Attention\u3002 \u6ce8\uff1a\u56de\u987e Transformer \u4ee5\u53ca faster-RCNN \u5728\u4ecb\u7ecdViLBERT\u4e4b\u524d\u8fd8\u662f\u9700\u8981\u5148\u8bf4\u660eVisualBERT\uff1a \u6a21\u578b\u7684\u4e3b\u8981\u7ed3\u6784\u4e3a\u501f\u52a9\u4e00\u7ec4\u5806\u53e0\u7684transformer encoder\u5c42\uff0c\u901a\u8fc7\u81ea\u6ce8\u610f\u529b\u673a\u5236\u628a\u628a\u8f93\u5165\u4e00\u6bb5\u6587\u672c\u4e2d\u7684\u5143\u7d20\u548c\u4e00\u5f20\u76f8\u5173\u7684\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u533a\u57df\u9690\u5f0f\u5730\u5bf9\u2eec\u8d77\u6765\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u56fe\u50cf\u901a\u8fc7\u68c0\u6d4b\u7684\u65b9\u6cd5\u63d0\u53d6\u76ee\u6807 region\u4f5c\u4e3a\u57fa\u7840\u7684\u89c6\u89c9\u5355\u5143\uff0c\u4e0e\u6587\u672c\u533a\u57df\u8fdb\u884c\u62fc\u63a5\u540e\u4f5c\u4e3atransformer\u7684\u8f93\u5165\u3002 \u4e0e\u4e4b\u76f8\u6bd4\u7684ViLBERT \u53cc\u6d41\u6a21\u578b\u91c7\u7528\u53cc\u6d41\u5904\u7406\u673a\u5236\uff0c\u5bf9\u6587\u672c\u6a21\u6001\u548c\u89c6\u89c9\u6a21\u6001\u5206\u522b\u8fdb\u884c\u5904\u7406\uff0c\u7136\u540e\u91c7\u7528\u4e92\u6ce8\u610f\u529b\u673a\u5236\u5bf9\u89c6\u89c9 \u548c\u6587\u672c\u7684\u67e5\u8be2\u5411\u91cf\u5206\u522b\u8fdb\u884c\u4ea4\u53c9\uff0c\u4e4b\u540e\u5206\u522b\u901a\u8fc7TRM\u5c42\u5f97\u5230\u89c6\u89c9\u6a21\u6001\u548c\u6587\u672c\u6a21\u6001\u7684\u5404\u81ea\u8f93\u51fa\u3002 finetuning\u9636\u6bb5\u5bf9\u4e24\u4e2a\u6a21\u6001\u5206\u522b\u8f93\u51fa\u7684\u5411\u91cf\u91c7\u7528mul\u6216\u8005sum\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba1\u7b97\u3002 \u76f8\u6bd4\u5355\u6d41VisualBERT\u6a21\u578b\uff0c\u53cc\u6d41ViLBERT\u6a21\u578b\u4e3b\u8981\u6709\u4e24\u70b9\u6539\u8fdb: \u5f15\u5165\u4e92\u6ce8\u610f\u529b\u673a\u5236(\u6765\u81ea\u8bba\u6587 Hierarchical Question-Image Co-Attention for Visual Question Answering )\uff0c\u5176\u4e3a\u6a21\u578b\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u76f8\u6bd4\u5355\u7eaf\u7684\u81ea\u6ce8\u610f\u529b\u673a\u5236\uff0c\u4e92\u6ce8\u610f\u529b\u5728\u8fdb\u884c\u8fd0\u7b97\u65f6\u4ea4\u6362\u4e86\u4e24\u79cd\u6a21\u6001self-attention\u8fd0\u7b97\u65f6\u7684K/V\u67e5 \u8be2\u5bf9\uff0c\u8ba9\u4e24\u79cd\u6a21\u6001\u7684\u8fdb\u884c\u5145\u5206\u7684\u5b66\u4e60\uff0c\u662f\u6a21\u6001\u878d\u5408\u7684\u91cd\u8981\u65b9\u6cd5\u3002 \u589e\u52a0\u4e86\u89c6\u89c9\u4f4d\u7f6e\u4fe1\u606f\u8868\u793a\uff0c\u901a\u8fc7\u6784\u5efa\u4e00\u4e2a5\u7ef4\u7684\u6570\u7ec4(\u4ece\u5de6\u4e0a\u2ec6\u5230\u53f3\u4e0b\u2ec6\u7684\u4e24\u7ec4\u5750\u6807+\u6574\u4e2a\u533a\u57df\u7684\u9762\u79ef)\u4f5c\u4e3a\u89c6\u89c9\u4fe1\u606f\u7684\u4f4d\u7f6e\u8868\u793a\u3002 ViLBERT\u4e2dco-attention\u662f\u5c06\u6765\u9762\u8bd5\u548c\u5de5\u4f5c\u5e94\u7528\u7684\u91cd\u70b9 import torch import torch.nn as nn import math class Config : def __init__ ( self ): super () . __init__ () self . bi_num_attention_heads = 12 self . bi_hidden_size = 516 self . v_hidden_size = 516 self . hidden_size = 516 self . v_attention_probs_dropout_prob = 0.2 self . attention_probs_dropout_prob = 0.2 # \u4ea4\u53c9\u81ea\u6ce8\u610f\u529b\u5b50\u5c42 class BertBiAttention ( nn . Module ): def __init__ ( self , config ): super () . __init__ () # \u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u4e2d\u591a\u5934\u7684\u6570\u91cf self . num_attention_heads = config . bi_num_attention_heads # \u6bcf\u4e2aattention\u5934\u8f93\u51fa\u7684\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u5c3a\u5bf8 # \u5176\u4e2dconfig.bi_hidden_size\u662f\u6307\u5e0c\u671b\u901a\u8fc7bi-attention\u4e4b\u540e\u8f93\u51fa\u7684\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u5c3a\u5bf8 # \u56e0\u4e3a\u6700\u540e\u8981\u505a\u201c\u62fc\u63a5\u201d\u64cd\u4f5c\uff0c\u56e0\u6b64\u6bcf\u4e2aattention\u5934\u8f93\u51fa\u7684\u5f20\u91cf\u5c3a\u5bf8\u4e3a\u4e8c\u8005\u7684\u5546 self . attention_head_size = int ( config . bi_hidden_size / config . bi_num_attention_heads ) # \u975e\u7279\u6b8a\u60c5\u51b5\u4e0bself.all_head_size\u4e0econfig.bi_hidden_size\u662f\u76f8\u540c\u7684 # \u4e0d\u8fc7\u4e8c\u8005\u5e94\u7528\u7684\u542b\u4e49\u4e0d\u540c\uff0cself.all_head_size\u662f\u6307QKV\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u51fa\u7ef4\u5ea6 self . all_head_size = self . num_attention_heads * self . attention_head_size # \u89c6\u89c9Q/K/V\u53c2\u6570\u77e9\u9635 # \u6ce8\uff1a\u6309\u7167\u81ea\u6ce8\u610f\u529b\u673a\u5236\u7684\u539f\u7406\uff0c\u4e00\u822cQKV\u53c2\u6570\u77e9\u9635\u90fd\u662f\u65b9\u9635\uff0c # \u5373config.v_hidden_size = self.all_head_size self . query1 = nn . Linear ( config . v_hidden_size , self . all_head_size ) self . key1 = nn . Linear ( config . v_hidden_size , self . all_head_size ) self . value1 = nn . Linear ( config . v_hidden_size , self . all_head_size ) self . dropout1 = nn . Dropout ( config . v_attention_probs_dropout_prob ) # \u6587\u672cQ/K/V\u53c2\u6570\u77e9\u9635 self . query2 = nn . Linear ( config . hidden_size , self . all_head_size ) self . key2 = nn . Linear ( config . hidden_size , self . all_head_size ) self . value2 = nn . Linear ( config . hidden_size , self . all_head_size ) self . dropout2 = nn . Dropout ( config . attention_probs_dropout_prob ) def transpose_for_scores ( self , x ): \"\"\"\u5728\u8fdb\u5165attention\u8ba1\u7b97\u516c\u5f0f\u524d\u9700\u8981\u505a\u4e00\u4e9b\u51c6\u5907 \u9996\u5148\u9700\u8981view\uff0c\u5c06QKV\u5168\u8fde\u63a5\u8f93\u51fa\u7684Q\uff0fK\uff0fV\u6309\u5934\u5206\u5272 \u7136\u540e\u5bf9\u7b2c\u4e8c\u7ef4\u548c\u7b2c\u4e09\u7ef4\u8fdb\u884c\u8f6c\u7f6e\u64cd\u4f5c\uff0c \u4e3a\u4e86\u8ba9\u4ee3\u8868\u53e5\u5b50\u957f\u5ea6\u7ef4\u5ea6\u548c\u8bcd\u5411\u91cf\u7ef4\u5ea6\u80fd\u591f\u76f8\u90bb\uff0c\u8fd9\u6837\u6ce8\u610f\u529b\u673a\u5236\u624d\u80fd\u627e\u5230\u8bcd\u4e49\u4e0e\u53e5\u5b50\u4f4d\u7f6e\u7684\u5173\u7cfb\uff0c \u4eceattention\u51fd\u6570\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u5229\u7528\u7684\u662f\u539f\u59cb\u8f93\u5165\u7684\u5012\u6570\u7b2c\u4e00\u548c\u7b2c\u4e8c\u7ef4.\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6bcf\u4e2a\u5934\u7684\u8f93\u5165. \"\"\" # x\u7684\u6700\u540e\u4e00\u7ef4\u53d8\u6210\u4e24\u7ef4\uff0c\u9700\u4fdd\u8bc1\u6700\u540e\u4e00\u7ef4\u7684size = self.num_attention_heads * self.attention_head_size new_x_shape = x . size ()[: - 1 ] + ( self . num_attention_heads , self . attention_head_size , ) # \u8fd9\u6837\u8f93\u5165\u7684\u4e09\u7ef4\u5f20\u91cf\u53d8\u6210\u4e86\u56db\u7ef4\uff0c\u4ece\u6587\u672c\u89d2\u5ea6\uff0c\u7b2c\u4e8c\u4e3a\u4ee3\u8868\u957f\u5ea6\u5e94\u8be5\u4e0e\u6700\u540e\u4e00\u7ef4\u7684\u8bcd\u5411\u91cf\u76f8\u90bb x = x . view ( new_x_shape ) # \u56e0\u6b64\u5728\u8fd9\u91cc\u5c06\u6587\u672c\u957f\u5ea6\u7ef4\u5ea6\u4e0eattention\u5934\u6570\u7ef4\u5ea6\u8c03\u6362 return x . permute ( 0 , 2 , 1 , 3 ) def forward ( self , input_tensor1 , input_tensor2 ): # \u5bf9\u89c6\u89c9\u8f93\u5165\u8ba1\u7b97\u5411\u91cf mixed_query_layer1 = self . query1 ( input_tensor1 ) mixed_key_layer1 = self . key1 ( input_tensor1 ) mixed_value_layer1 = self . value1 ( input_tensor1 ) query_layer1 = self . transpose_for_scores ( mixed_query_layer1 ) key_layer1 = self . transpose_for_scores ( mixed_key_layer1 ) value_layer1 = self . transpose_for_scores ( mixed_value_layer1 ) # \u5bf9\u6587\u672c\u8f93\u5165\u8ba1\u7b97\u5411\u91cf mixed_query_layer2 = self . query2 ( input_tensor2 ) mixed_key_layer2 = self . key2 ( input_tensor2 ) mixed_value_layer2 = self . value2 ( input_tensor2 ) query_layer2 = self . transpose_for_scores ( mixed_query_layer2 ) key_layer2 = self . transpose_for_scores ( mixed_key_layer2 ) value_layer2 = self . transpose_for_scores ( mixed_value_layer2 ) # attention scores for value 1. \u8fd9\u662f\u5173\u952e\u90e8\u5206\uff0c\u4e3b\u8981\u4e3a\u8ba1\u7b97text query \u548c image \u7684 key\u7684\u7ed3\u679c # \u89c6\u89c9\u7684query \u4e0e\u6587\u672c\u7684Key\u7684\u8f6c\u7f6e\u8fdb\u884c\u4ea4\u53c9 attention_scores1 = torch . matmul ( query_layer2 , key_layer1 . transpose ( - 1 , - 2 )) attention_scores1 = attention_scores1 / math . sqrt ( self . attention_head_size ) # \u901a\u8fc7softmax \u5f52\u4e00\u5316\u5f97\u5206\u6982\u7387 attention_probs1 = nn . functional . softmax ( attention_scores1 , dim =- 1 ) attention_probs1 = self . dropout1 ( attention_probs1 ) # \u5f97\u5230\u7684\u5f52\u4e00\u5316\u6982\u7387\u4e0e\u6587\u672cvalue\u8fdb\u884c\u8fd0\u7b97\u5f97\u5230context_layer context_layer1 = torch . matmul ( attention_probs1 , value_layer1 ) # \u53d8\u6362\u6210\u539f\u6765\u7684\u7ef4\u5ea6\u4ee5\u53ca\u5bf9\u5e94\u7684\u542b\u4e49 context_layer1 = context_layer1 . permute ( 0 , 2 , 1 , 3 ) . contiguous () new_context_layer_shape1 = context_layer1 . size ()[: - 2 ] + ( self . all_head_size ,) context_layer1 = context_layer1 . view ( new_context_layer_shape1 ) # \u6587\u672c\u7684query\u4e0e\u89c6\u89c9\u7684key \u8fdb\u884c\u8fd0\u7b97\uff0c\u8fd0\u7b97\u65b9\u5f0f\u4e0e\u4e0a\u9762\u76f8\u540c attention_scores2 = torch . matmul ( query_layer1 , key_layer2 . transpose ( - 1 , - 2 )) attention_scores2 = attention_scores2 / math . sqrt ( self . attention_head_size ) # Normalize attention_probs2 = nn . functional . softmax ( attention_scores2 , dim =- 1 ) attention_probs2 = self . dropout2 ( attention_probs2 ) context_layer2 = torch . matmul ( attention_probs2 , value_layer2 ) # \u53d8\u6362\u6210\u539f\u6765\u7684\u7ef4\u5ea6\u4ee5\u53ca\u5bf9\u5e94\u7684\u542b\u4e49 context_layer2 = context_layer2 . permute ( 0 , 2 , 1 , 3 ) . contiguous () new_context_layer_shape2 = context_layer2 . size ()[: - 2 ] + ( self . all_head_size ,) context_layer2 = context_layer2 . view ( new_context_layer_shape2 ) attn_data = { \"attn1\" : attention_probs1 , \"queries1\" : query_layer2 , \"keys1\" : key_layer1 , \"attn2\" : attention_probs2 , \"querues2\" : query_layer1 , \"keys2\" : key_layer2 , } # context_layer1, context_layer2 is for text and vision return context_layer1 , context_layer2 , attn_data if __name__ == \"__main__\" : config = Config () biattention = BertBiAttention ( config ) input_tensor1 = torch . rand ( 1 , 10 , 516 ) input_tensor2 = torch . rand ( 1 , 10 , 516 ) context_layer1 , context_layer2 , attn_data = biattention ( input_tensor1 , input_tensor2 ) print ( context_layer1 , context_layer1 . shape ) print ( context_layer2 , context_layer2 . shape ) \u8f93\u51fa\u6548\u679c: tensor ([[[ - 9.6074e-02 , - 8.1292e-02 , - 1.7113e-01 , ... , 1.8071e-01 , 3.1835e-01 , 7.8117e-02 ], [ - 9.4354e-02 , - 8.3363e-02 , - 1.5782e-01 , ... , 2.0677e-01 , 3.5806e-01 , 1.2813e-01 ], [ - 6.2287e-02 , 2.4098e-04 , - 1.2370e-01 , ... , 1.9457e-01 , 3.7959e-01 , 1.0256e-01 ], ... , [ - 1.1077e-01 , - 3.9221e-02 , - 1.8073e-01 , ... , 2.3376e-01 , 3.9866e-01 , 1.1799e-01 ], [ - 1.1786e-01 , - 2.9357e-02 , - 1.9034e-01 , ... , 2.3433e-01 , 3.9668e-01 , 1.1613e-01 ], [ - 1.1233e-01 , 1.0437e-03 , - 9.6470e-02 , ... , 2.3463e-01 , 3.9997e-01 , 1.1814e-01 ]]], grad_fn =< ViewBackward > ) torch . Size ([ 1 , 10 , 516 ]) tensor ([[[ - 0.2471 , 0.0176 , 0.0424 , ... , 0.3034 , - 0.2601 , - 0.2893 ], [ - 0.2232 , 0.0199 , 0.0218 , ... , 0.1760 , - 0.1642 , - 0.1626 ], [ - 0.2953 , 0.0326 , 0.0608 , ... , 0.2543 , - 0.2102 , - 0.2610 ], ... , [ - 0.2469 , 0.0377 , 0.0494 , ... , 0.3083 , - 0.2558 , - 0.2803 ], [ - 0.2957 , 0.0297 , 0.0630 , ... , 0.3144 , - 0.2671 , - 0.3090 ], [ - 0.2354 , 0.0436 , 0.0457 , ... , 0.1931 , - 0.2148 , - 0.2196 ]]], grad_fn =< ViewBackward > ) torch . Size ([ 1 , 10 , 516 ]) \u8bf4\u660e: co-attention(bi-attention)\u662f\u975e\u5e38\u91cd\u8981\u7684\u7279\u5f81\u878d\u5408\u65b9\u5f0f\uff0c\u5b83\u4e0d\u4ec5\u53ef\u4ee5\u5e94\u7528\u5728\u591a\u6a21\u6001\u9886\u57df\uff0c\u5373\u4f7f\u662f\u540c\u6a21\u6001\u7684\u4e0d\u540c\u7c7b\u578b\u8f93\u5165\u4ecd\u7136\u6709\u4e0d\u9519\u7684\u8868\u73b0\u3002 \u5173\u4e8eattention\u7684\u4f18\u5316\uff1a \u65e0\u8bba\u662fco-attention\u8fd8\u662fself-attention\u90fd\u662fN\u65b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u77e9\u9635\u4e58\u6cd5\uff09\uff0c\u56e0\u6b64\u5f53\u6211\u4eec\u7684\u8f93\u5165\u5f20\u91cf\u8f83\u5927\u65f6\uff0c\u663e\u5b58\u7684\u5360\u7528\u548c\u8ba1\u7b97\u6027\u80fd\u90fd\u662f\u6307\u6570\u589e\u957f\u7684\uff1b \u56e0\u6b64\u5bf9\u4e8eattention\u7684\u64cd\u4f5c\u4ea7\u751f\u4e86\u4e00\u4e9b\u5217\u7684\u4f18\u5316\u624b\u6bb5\uff0c\u4ece\u601d\u60f3\u4e0a\u53ef\u4ee5\u5212\u5206\u4e3a\u56db\u4e2a\u7c7b\u522b\uff1a \u5206\u5757\u601d\u60f3\uff08chunk\uff09: \u5c06\u539f\u6709\u7684token\u8fdb\u884c\u5206\u5757\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u6c60\u5316\uff0c\u539f\u6765NxN\u53d8\u6210\u4e86BxB\uff0cB\u8fdc\u5c0f\u4e8eN\uff1b \u7a00\u91ca\u5316\u601d\u60f3\uff1a\u4ee5\u4e00\u5b9a\u7684\u89c4\u5f8b\u5bf9N\u8fdb\u884c\u4e0b\u91c7\u6837\uff0c\u53ea\u7559\u4e0bK\u4e2a\uff0cK\u8fdc\u5c0f\u4e8eN\uff1b \u6570\u5b66\u538b\u7f29\u601d\u60f3\uff1a\u4f7f\u7528\u77e9\u9635\u5206\u89e3\u6216\u6838\u51fd\u6570\u6620\u5c04\u5c06N\u51cf\u5c0f\u518d\u505aattention\uff1b \u53ef\u5b66\u4e60\u601d\u60f3\uff1a\u5728\u4e4b\u524d\u7684\u601d\u60f3\u65b9\u6cd5\u4e0a\u5f15\u5165\u8bad\u7ec3\u53c2\u6570\uff0c\u5728\u5b66\u4e60\u4e2d\u8c03\u8282\u63a7\u5236N\u7684\u7f29\u5c0f\u8303\u56f4\u3002 \u5206\u5757\u601d\u60f3\uff08chunk\uff09\u8be6\u89e3\uff1a \u4ee5NLP\u4e3a\u4f8b\uff0c\u5c06\u539f\u6765\u5355\u5b57\u5bf9\u5355\u5b57\u7684\u4e00\u4e00\u5bf9\u5e94\uff0c\u53d8\u6210\u7684\u591a\u4e2a\u5b57\u5bf9\u591a\u4e2a\u5b57\u7684\u4e00\u4e00\u5bf9\u5e94\uff0c\u5757\u4e2d\u7684\u6240\u6709\u5b57\u7684\u5bf9\u5e94\u5206\u503c\u4e00\u81f4\u5171\u4eab\u3002 \u5173\u4e8e\u5982\u4f55\u53bb\u5206\u5757\uff0c\u6bcf\u4e2a\u5757\u7684\u8868\u793a\u5f20\u91cf\u662f\u5426\u53ea\u80fd\u4e3a\u5747\u503c\uff0c\u8fd9\u90fd\u662f\u53ef\u4ee5\u8fdb\u884c\u6539\u8fdb\u7684\u70b9\u3002 \u4f7f\u7528\u6c60\u5316\u5b9e\u73b0\u5206\u5757\uff1a ... # \u5bf9\u6587\u672c\u8f93\u5165\u8ba1\u7b97\u5411\u91cf mixed_query_layer2 = self . query2 ( input_tensor2 ) mixed_key_layer2 = self . key2 ( input_tensor2 ) mixed_value_layer2 = self . value2 ( input_tensor2 ) query_layer2 = self . transpose_for_scores ( mixed_query_layer2 ) key_layer2 = self . transpose_for_scores ( mixed_key_layer2 ) value_layer2 = self . transpose_for_scores ( mixed_value_layer2 ) # attention scores for value 1. \u8fd9\u662f\u5173\u952e\u90e8\u5206\uff0c\u4e3b\u8981\u4e3a\u8ba1\u7b97text query \u548c image \u7684 key\u7684\u7ed3\u679c # \u89c6\u89c9\u7684query \u4e0e\u6587\u672c\u7684Key\u7684\u8f6c\u7f6e\u8fdb\u884c\u4ea4\u53c9 # \u5bf9query_layer2\u548ckey_layer1\u8fdb\u884cchunk\u6216\u8005\u7a00\u758f\u5316\u83b7\u5f97\u5c0f\u77e9\u9635\uff0c\u4ee5\u964d\u4f4e\u8ba1\u7b97\u590d\u6742\u5ea6 # AvgPool2d\u4ee3\u8868\u5bf9\u6700\u540e\u4e24\u7ef4\u8fdb\u884c\u6c60\u5316\u64cd\u4f5c\uff0c\u5b83\u7684\u5b9e\u4f8b\u5316\u8f93\u5165\u662f\u56db\u7ef4\u5f20\u91cf # \u5176\u4e2d\u7684\u53c2\u6570\u4ee3\u8868\u6c60\u5316\u64cd\u4f5c\u7684chunk\u5927\u5c0f\uff0c\u5b83\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c # \u7b2c\u4e00\u4e2a2\u4ee3\u8868\u4e24\u201c\u5217\u201d\u76f8\u52a0\u6c42\u5e73\u5747\uff0c\u7b2c\u4e8c\u4e2a1\u4ee3\u88681\u201c\u884c\u201d\u64cd\u4f5c\u5373\u884c\u4e0a\u6570\u503c\u4e0d\u53d8 m = nn . AvgPool2d (( 2 , 1 )) query_layer2 = m ( query_layer2 ) key_layer1 = m ( key_layer1 ) query_layer1 = m ( query_layer1 ) key_layer2 = m ( key_layer2 ) ############# attention_scores1 = torch . matmul ( query_layer2 , key_layer1 . transpose ( - 1 , - 2 )) attention_scores1 = attention_scores1 / math . sqrt ( self . attention_head_size ) # \u901a\u8fc7softmax \u5f52\u4e00\u5316\u5f97\u5206\u6982\u7387\u5373\u6ce8\u610f\u529b\u77e9\u9635 attention_probs1 = nn . functional . softmax ( attention_scores1 , dim =- 1 ) attention_probs1 = self . dropout1 ( attention_probs1 ) # \u8fd9\u91cc\u5bf9\u6ce8\u610f\u529b\u77e9\u9635\u7684\u7ef4\u5ea6\u8fdb\u884c\u8fd8\u539f\uff0c\u4f7f\u5176\u80fd\u591f\u6ee1\u8db3\u4e0b\u9762\u7684\u8ba1\u7b97\u8981\u6c42 temp = torch . cat ([ attention_probs1 , attention_probs1 ], dim =- 1 ) attention_probs1 = torch . cat ([ temp , temp ], dim =- 2 ) ############# # \u5f97\u5230\u7684\u5f52\u4e00\u5316\u6982\u7387\u4e0e\u6587\u672cvalue\u8fdb\u884c\u8fd0\u7b97\u5f97\u5230context_layer context_layer1 = torch . matmul ( attention_probs1 , value_layer1 ) # \u53d8\u6362\u6210\u539f\u6765\u7684\u7ef4\u5ea6\u4ee5\u53ca\u5bf9\u5e94\u7684\u542b\u4e49 context_layer1 = context_layer1 . permute ( 0 , 2 , 1 , 3 ) . contiguous () new_context_layer_shape1 = context_layer1 . size ()[: - 2 ] + ( self . all_head_size ,) context_layer1 = context_layer1 . view ( new_context_layer_shape1 ) # \u6587\u672c\u7684query\u4e0e\u89c6\u89c9\u7684key \u8fdb\u884c\u8fd0\u7b97\uff0c\u8fd0\u7b97\u65b9\u5f0f\u4e0e\u4e0a\u9762\u76f8\u540c attention_scores2 = torch . matmul ( query_layer1 , key_layer2 . transpose ( - 1 , - 2 )) attention_scores2 = attention_scores2 / math . sqrt ( self . attention_head_size ) attention_probs2 = nn . functional . softmax ( attention_scores2 , dim =- 1 ) attention_probs2 = self . dropout2 ( attention_probs2 ) # \u8fd9\u91cc\u5bf9\u6ce8\u610f\u529b\u77e9\u9635\u7684\u7ef4\u5ea6\u8fdb\u884c\u8fd8\u539f\uff0c\u4f7f\u5176\u80fd\u591f\u6ee1\u8db3\u4e0b\u9762\u7684\u8ba1\u7b97\u8981\u6c42 temp = torch . cat ([ attention_probs2 , attention_probs2 ], dim =- 1 ) attention_probs2 = torch . cat ([ temp , temp ], dim =- 2 ) context_layer2 = torch . matmul ( attention_probs2 , value_layer2 ) ... \u5927\u5bb6\u53ef\u4ee5\u52a8\u624b\u5728\u81ea\u5df1\u7684co-attention.py\u6587\u4ef6\u4e2d\u8bd5\u4e00\u8bd5\u3002 \u7a00\u758f\u5316\u601d\u60f3\u8be6\u89e3\uff1a \u7a00\u758f\u5316\u662f\u66f4\u52a0\u7075\u6d3b\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u4ee5\u4e00\u5b9a\u7684\u65b9\u5f0f\u5c06\u8f93\u5165\u7684Q/K\u8fdb\u884c\u7a00\u758f\u5316\uff0c\u6765\u5ffd\u7565\u90e8\u5206\u4fe1\u606f\u4ee5\u7b80\u5316\u8ba1\u7b97\u3002 \u6211\u4eec\u53ef\u4ee5\u5728chunk\u7684\u57fa\u7840\u4e0a\u6765\u5b9e\u73b0\u7a00\u758f\u5316\uff0c\u5728\u5206\u5272\u5b8cchunk\u4e4b\u540e\uff0c\u968f\u673a\u5728\u6bcf\u4e2achunk\u4e2d\u9009\u62e9\u4e00\u4e2a\u5f20\u91cf\u4ee3\u8868chunk\u5f20\u91cf\uff0c\u800c\u5176\u4ed6\u5f20\u91cf\u90fd\u7a00\u758f\u6389\u3002 \u4e0b\u9762\u5927\u5bb6\u6309\u7167\u4e0a\u8ff0\u63cf\u8ff0\uff0c\u6211\u4eec\u5047\u5b9a\u76f4\u63a5\u9009\u62e9\u7b2c\u4e00\u4e2a\u5f20\u91cf\u4f5c\u4e3achunk\u5f20\u91cf\uff08\u800c\u4e0d\u662f\u968f\u673a\uff09\u6765\u81ea\u5df1\u5b9e\u73b0attention\u7684\u7a00\u758f\u5316\u3002 \u6539\u8fdb\u4f18\u5316\u8fc7\u7a0b\u662fAI\u5de5\u7a0b\u5e08\u5728\u5de5\u4f5c\u4e2d\u9700\u8981\u638c\u63e1\u7684\u6280\u80fd\uff0c\u4e5f\u662f\u4e3a\u6570\u4e0d\u591a\u7684\u4ee3\u7801\u8fc7\u7a0b\u3002 def sparsification ( input_ , chunks = 2 ): ... return output \u4e00\u822c\u60c5\u51b5\u4e0bchunk\u6216\u7a00\u758f\u5316\u5bf9attention\u7684\u4f18\u5316\u6548\u679c\uff1a \u5728ViLBERT\u4e2d\u53e6\u4e00\u4e2a\u5177\u6709\u521b\u65b0\u601d\u60f3\u7684\u5730\u65b9\u5c31\u662f\u5728\u56fe\u50cf\u7279\u5f81\u7684\u5904\u7406\u4e0a\uff1a \u4e0e\u6700\u539f\u59cb\u7684GRU-Resnet\u6a21\u578b\u76f8\u6bd4\uff0c\u6ca1\u6709\u4f7f\u7528Resnet\u4e3b\u5e72\u7f51\u7edc\u4ee5\u5206\u7c7b\u7684\u89c6\u89d2\u63d0\u53d6\u7279\u5f81\uff0c\u800c\u662f\u4f7f\u7528faster-RCNN\u4ee5\u76ee\u6807\u68c0\u6d4b\u7684\u89c6\u89d2\u63d0\u53d6\u7279\u5f81\u3002 \u7406\u8bba\u4e0a\uff0c\u76ee\u6807\u68c0\u6d4b\u662f\u5206\u7c7b\u7684\u9ad8\u9636\u4efb\u52a1\uff08\u76ee\u6807\u68c0\u6d4b\u8fc7\u7a0b\u4e00\u5b9a\u5b58\u5728\u5206\u7c7b\u8fc7\u7a0b\uff09\uff0c\u56e0\u6b64\u8fd9\u662f\u5229\u7528\u4e86\u66f4\u591a\u4e14\u66f4\u9ad8\u7ef4\u5ea6\u7684\u56fe\u50cf\u4fe1\u606f\uff0c\u6548\u679c\u4e5f\u81ea\u7136\u6bd4\u5355\u7eaf\u4f7f\u7528\u5206\u7c7b\u7279\u5f81\u66f4\u597d\u3002 ViLBERT\u4e2d\u56fe\u50cf\u4fa7\uff08\u4f7f\u7528\u76ee\u6807\u68c0\u6d4b\uff09\u7684\u6570\u636e\u5f62\u5f0f\uff1a \u540c\u6837\u9700\u8981\u548cGRU-Resnet\u6a21\u578b\u4e00\u6837\u7684jsonl\u6570\u636e\u4ee5\u53ca\u56fe\u7247\u96c6 { \"id\" : 76432 , \"img\" : \"img/76432.png\" , \"label\" : 0 , \"text\" : \"you thinking what i'm thinking?\" } \u8fd8\u9700\u8981\u901a\u8fc7\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u83b7\u5f97\u7684\u4e00\u7cfb\u5217\u7279\u5f81\uff0c\u5b83\u4eec\u4e00\u822c\u88ab\u5b58\u50a8\u5728npy\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u7c7b\u578b\u7684npy\u6587\u4ef6 # \u7b2c\u4e00\u79cd\u7c7b\u578b\u7684npy\u662fimage_info.npy\uff0c\u4ee3\u8868\u56fe\u7247\u7684\u76ee\u6807\u68c0\u6d4b\u4fe1\u606f # \u89e3\u6790npy\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528\uff1a # info_ = np.load('76432_info.npy',allow_pickle=True) # image_info.npy\u91cc\u9762\u5b58\u653e\u7684\u662f # bbox\u5750\u6807\uff1a\u6bcf\u4e2a\u5750\u6807\u662f\u4e00\u4e2a\u56db\u5143\u7d20\u5411\u91cf # num_box \uff1a\u5750\u6807\u6846\u4e2a\u6570 # objects \uff1a\u6240\u5c5e\u7c7b\u522b # cls_prob: \u6bcf\u4e2a\u7c7b\u522b\u7684\u6982\u7387 # image_width/image_height\uff1a\u56fe\u7247\u539f\u59cb\u5bbd\u9ad8 array ({ 'bbox' : array ([[ 365.44653 , 35.541267 , 468.72 , 217.1971 ], [ 194.42055 , 35.909794 , 351.08777 , 314.9061 ], [ 216.342 , 43.642258 , 311.2393 , 139.60973 ], ..... [ 0. , 313.16983 , 96.897736 , 340.57376 ]], dtype = float32 ), 'num_boxes' : 100 , 'objects' : array ([ 119 , 90 , 119 , 137 , 90 , 106 , 90 , 90 , 119 , 440 , 200 , 90 , 119 , 231 , 137 , 119 , 90 , 231 , 237 , 183 , 90 , 181 , 51 , 119 , 119 , 106 , 137 , 266 , 453 , 106 , 334 , 181 , 241 , 181 , 98 , 137 , 266 , 90 , 136 , 119 , 181 , 52 , 137 , 237 , 453 , 727 , 327 , 90 , 51 , 137 , 628 , 181 , 47 , 137 , 237 , 237 , 51 , 200 , 1496 , 440 , 914 , 320 , 200 , 191 , 90 , 90 , 241 , 106 , 303 , 106 , 914 , 183 , 440 , 334 , 181 , 200 , 440 , 128 , 119 , 51 , 440 , 727 , 440 , 182 , 177 , 453 , 303 , 372 , 224 , 453 , 727 , 51 , 52 , 1516 , 51 , 237 , 119 , 372 , 782 , 106 ]), 'cls_prob' : array ([[ 8.20921713e-08 , 5.90938498e-07 , 2.53067469e-07 , ... , 2.59500416e-06 , 4.59596180e-07 , 1.48048301e-07 ], [ 1.89194402e-08 , 2.39286322e-07 , 1.47415520e-07 , ... , 2.33098149e-07 , 1.78933334e-07 , 8.93831285e-08 ], [ 2.49065721e-07 , 5.19247521e-07 , 1.03184175e-06 , ... , 1.71378406e-06 , 1.22604717e-06 , 2.90146431e-07 ], ... , [ 1.64925495e-07 , 2.25859822e-07 , 2.40710079e-07 , ... , 2.73545038e-06 , 2.57280021e-06 , 1.69157474e-07 ], [ 6.30991678e-07 , 1.99194142e-06 , 1.54376630e-06 , ... , 1.69531131e-06 , 8.84776000e-06 , 6.95318533e-07 ], [ 2.81311344e-07 , 3.06193442e-07 , 3.47593368e-06 , ... , 1.25339099e-07 , 1.11896015e-05 , 6.61107947e-07 ]], dtype = float32 ), 'image_width' : 512 , 'image_height' : 341 }, dtype = object ) # \u7b2c\u4e8c\u79cd\u7c7b\u578b\u7684npy\u662fimage.npy\uff0c\u5b58\u653e\u7684\u662f\u6bcf\u4e2abbox\u4e2d\u56fe\u50cf\u7684\u9ad8\u9636\u5f20\u91cf\u8868\u793a\uff0c\u5373\u901a\u8fc7faster-RCNN\u4e3b\u5e72\u7f51\uff08Resnet\uff09\u4e4b\u540e\u7684embedding\uff0c\u4e00\u822c\u662f2048\u7ef4\u3002 info = np . load ( '76432.npy' , allow_pickle = True ) info . shape ( 100 , 2048 ) \u4ee5\u4e0a\u6570\u636e\u6765\u81eaCV\u56e2\u961f\u63d0\u4f9b\u7684\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u8f93\u51fa\u3002\u5173\u4e8e\u5982\u4f55\u4f7f\u7528faster-RCNN\u83b7\u53d6\u8fd9\u4e9b\u56fe\u50cf\u7279\u5f81\u5728\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u3002 ViLBERT\u5982\u4f55\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u8fdb\u884c\u56fe\u50cf\u4fa7\u7279\u5f81\u6784\u5efa\uff1a \u6211\u4eec\u5c06\u4ece\u6e90\u7801\u4e2d\u622a\u53d6ViLBERT\u7c7b\u4e2d\u7684\u91cd\u70b9\u5185\u5bb9\u8bb2\u89e3\u3002 class ViLBERT ( nn . Module ): def __init__ ( self , config ): super () . __init__ () self . config = config self . training_head_type = self . config . training_head_type self . build () @classmethod def config_path ( cls ): return \"configs/models/vilbert/pretrain.yaml\" # \u52a0\u8f7d\u6a21\u578b\u53c2\u6570 def load_state_dict ( self , state_dict , * args , ** kwargs ): copied_state_dict = deepcopy ( state_dict ) # \u5bf9\u4e8ecopied_state_dict\u4e2d\u7684\u6240\u6709keys\u52a0\u8f7d\u53c2\u6570\u8bcd\u5178 for key in list ( copied_state_dict . keys ()): formatted_key = self . format_state_key ( key ) copied_state_dict [ formatted_key ] = copied_state_dict . pop ( key ) return super () . load_state_dict ( copied_state_dict , * args , ** kwargs ) # \u9884\u8bad\u7ec3\u6a21\u578b\u52a0\u8f7d @classmethod def from_pretrained ( cls , checkpoint , config ): # \u7c7b\u8d4b\u503c cls = ViLBERT instance = cls ( config ) instance . is_pretrained = True # \u7c7b\u6784\u5efa instance . build () with PathManager . open ( checkpoint , \"rb\" ) as f : checkpoint = torch . load ( f , map_location = lambda storage , loc : # \u52a0\u8f7d\u72b6\u6001\u53c2\u6570 incompatible_keys = instance . load_state_dict ( checkpoint , strict = False ) # The model has loaded, reset the state # registry.register(\"config\", config_temp_holder) # \u5982\u679c\u53c2\u6570keys\u7f3a\u5931\u62a5\u9519 if len ( incompatible_keys . missing_keys ) != 0 : print ( f \"Missing keys {incompatible_keys.missing_keys} in the\" + \" checkpoint. \\n \" + \"If this is not your checkpoint, please open up an \" + f \"Unexpected keys if any:{incompatible_keys.unexpected_keys}\" ) # \u5982\u679c\u53c2\u6570keys\u5f02\u5e38 if len ( incompatible_keys . unexpected_keys ) != 0 : print ( \"Unexpected keys in state dict\" ) instance . eval () # \u8fd4\u56de\u7c7b\u5b9e\u4f8b return instance def build ( self ): if self . config . training_head_type == \"pretraining\" : # \u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b self . model = ViLBERTForPretraining ( self . config ) else : # \u52a0\u8f7dfintune\u5206\u7c7b\u6a21\u578b self . model = ViLBERTForClassification ( self . config . model_config . vilbert ) if getattr ( self . config , \"freeze_base\" , False ): for p in self . model . bert . parameters (): p . requires_grad = False # \u6784\u5efa\u56fe\u6587\u8f93\u5165\u7279\u5f81 def get_image_and_text_features ( self , sample_list ): bert_input_ids = sample_list . input_ids bert_input_mask = sample_list . input_mask bert_input_type_ids = sample_list . segment_ids # \u56fe\u50cf\u7279\u5f81\u4fe1\u606f\u6784\u5efa # sample_list\u662f\u4e4b\u524d\u7684\u6784\u5efa\u7684\u6570\u636e\u7c7b\uff0c\u7c7b\u4e2d\u7684\u5c5e\u6027\u5305\u62ecimage_info\uff0cimage_labels\uff0cimage_feature\u7b49 # \u901a\u8fc7getattr\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u7c7b\u4e2d\u7684\u5c5e\u6027\u96c6\u5408 image_info = getattr ( sample_list , \"image_info_0\" , {}) # \u56fe\u50cf\u7279\u5f81\u6846\u7684\u6570\u76ee image_dim_variable = getattr ( image_info , \"max_features\" , None ) # \u6bcf\u4e00\u4e2a\u6846\u7684embedding\u7279\u5f81 image_feature_variable = getattr ( sample_list , \"image_feature_0\" , # \u68c0\u6d4b\u7684\u5206\u7c7b\u7ed3\u679c image_label_variable = getattr ( sample_list , \"image_labels\" , None ) # \u6bcf\u4e00\u4e2a\u5206\u7c7b\u7684\u7279\u5f81\u6982\u7387 cls_prob = getattr ( image_info , \"cls_prob\" , None ) # 5D\u7684bbox\u5750\u6807 # \u7b2c5D\u662f\u6839\u636e\u5bf9\u89d2\u5750\u6807\u503c\u8ba1\u7b97\u5f97\u5230\u7684\u533a\u57df\u9762\u79ef # [x1, y1, x2, y2]\uff0c\u5219region = (x2 - x1) * (y2 - y1) image_location_variable = getattr ( image_info , \"bbox\" , None ) # \u56fe\u50cf\u7684\u5206\u7c7b\u7ed3\u679c\u8f6c\u5316\u4e3atensor image_target = np . array ( cls_prob , dtype = np . float32 ) image_target_variable = torch . tensor ( image_target , dtype = torch . float , device = bert_input_ids . device ) return { \"input_ids\" : bert_input_ids , \"attention_mask\" : bert_input_mask , \"token_type_ids\" : bert_input_type_ids , \"image_dim\" : image_dim_variable , \"image_feature\" : image_feature_variable , \"image_location\" : image_location_variable , \"image_target\" : image_target_variable , \"image_label\" : image_label_variable , } \u4ee5\u4e0a\u5c31\u662f\u6587\u672c\u548c\u56fe\u50cf\u8fdb\u884cViLBERT\u6a21\u578b\u524d\u7684\u6240\u6709\u539f\u59cb\u4fe1\u606f\uff0c\u4e4b\u540e\u5b83\u4eec\u5c06\u901a\u8fc7\u5404\u81ea\u7684Transformer encoder\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u518d\u4f7f\u7528\u4e4b\u524d\u6211\u4eec\u5b66\u4e60\u7684co-attention\u8fdb\u884c\u7279\u5f81\u878d\u5408\uff0c\u6700\u540e\u8f93\u51fa\u7ed9\u5206\u7c7b\u5c42\u3002 \u6709\u4e86ViLBERT\u6a21\u578b\uff0c\u5bf9\u5176\u8fdb\u884c\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e0e\u4e4b\u524d\u5b66\u7684\u6a21\u578b\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8fc7\u591a\u8bb2\u89e3\uff08\u6240\u6709\u7684\u6e90\u7801\u5c06\u4ee5\u4ee3\u7801\u5305\u7684\u5f62\u5f0f\u7ed9\u5230\u540c\u5b66\u4eec\uff09\uff0c\u4f46\u9664\u4e86\u57fa\u7840\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u5de5\u4e1a\u754c\u7684\u5927\u578b\u6a21\u578b\u8bad\u7ec3\u5f80\u5f80\u548c\u5206\u5e03\u5f0f\u6709\u5173\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u8fd9\u91cc\u4e3a\u5927\u5bb6\u4ecb\u7ecd\u5e38\u89c1\u7684 \u5206\u5e03\u5f0f\u5b9e\u8df5 \u3002 \u9664\u4e86\u80fd\u591f\u5229\u7528\u5206\u5e03\u5f0f\u6765\u52a0\u901f\u6a21\u578b\u7684\u8bad\u7ec3\u6548\u7387\uff0c\u5173\u4e8e\u7684\u6a21\u578b\u7684\u6548\u679c\u63d0\u5347\u8fd8\u6709\u4e00\u79cd\u66f4\u52a0\u901a\u7528\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\uff1a\u6570\u636e\u589e\u5f3a\u3002 \u4ec0\u4e48\u662f\u6570\u636e\u589e\u5f3a\u4ee5\u53ca\u4f5c\u7528\uff1a \u4ee5\u73b0\u6709\u6807\u6ce8\u6570\u636e\u4e3a\u57fa\u7840\uff0c\u901a\u8fc7\u5408\u7406\u7684\u65b9\u5f0f\uff08\u6a21\u62df\u66f4\u591a\u7684\u5b9e\u9645\u53ef\u80fd\u6027\uff09\u6765\u589e\u52a0\u6837\u672c\u7684\u6570\u91cf\uff0c\u4f7f\u5f97\u6a21\u578b\u83b7\u5f97\u66f4\u591a\u7684\u8bad\u7ec3\u548c\u9a8c\u8bc1\u96c6\uff0c\u5177\u5907\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b\u3002 \u5927\u5bb6\u53ef\u4ee5\u4e00\u8d77\u56de\u987e\u4e00\u4e0b\u6587\u672c\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff0cEDA\uff0c\u56de\u8bd1\u589e\u5f3a\u7b49\u3002\u90a3\u56fe\u50cf\u7684\u6570\u636e\u589e\u5f3a\u53c8\u6709\u54ea\u4e9b\u5462\uff1f\u79cd\u7c7b\u7684\u975e\u5e38\u4e4b\u591a\uff0c\u6211\u4eec\u4eca\u5929\u5c06\u7740\u91cd\u4ecb\u7ecd\u4e1a\u754c\u5e38\u4f7f\u7528\u7684 \u56fe\u50cf\u589e\u5f3a\u5de5\u5177Albumentations \uff0c\u5e76\u7740\u91cd\u5b9e\u73b0\u5728\u672c\u9879\u76ee\u4e2d\u9488\u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u3002 \u7b2c\u4e09\u6b65: \u4f7f\u7528flask\u90e8\u7f72\u6a21\u578b\u670d\u52a1 \u4f7f\u7528flask\u90e8\u7f72\u6a21\u578b\u670d\u52a1 \u66f4\u591a \u7b97\u6cd5\u5de5\u7a0b\u5316\u8be6\u89e3","title":"\u7b2c\u4e8c\u7ae0\uff1a\u591a\u6a21\u6001\u6574\u4f53\u89e3\u51b3\u65b9\u6848"},{"location":"2/#21","text":"","title":"2.1 \u80cc\u666f\u9700\u6c42\u4e0e\u5206\u6790"},{"location":"2/#_1","text":"\u4e86\u89e3\u8be5\u4efb\u52a1\u7684\u80cc\u666f\u9700\u6c42\u3002 \u901a\u8fc7\u5bf9\u9700\u6c42\u5206\u6790\u660e\u786e\u4ea4\u4ed8\u7cfb\u7edf\u8981\u6c42\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"2/#_2","text":"\u5728\u6574\u4e2a\u5927\u7684\u63a8\u8350\u7cfb\u7edf\u80cc\u666f\u4e0b\uff0c\u9700\u8981\u6784\u5efa\u89c6\u9891\u753b\u50cf\uff0c\u5176\u4e2d\u6700\u91cd\u8981\u7684\u5c31\u662f\u4e3a\u65e0\u6807\u7b7e\u89c6\u9891\u6253\u4e0a\u5408\u9002\u7684\u7cfb\u7edf\u6807\u7b7e\u3002 \u5728\u8fc7\u53bb\u5e74\u6708\u91cc\uff0c\u7531\u4e8e\u7b97\u529b\u7684\u9650\u5236\uff0c\u4e00\u822c\u516c\u53f8\u65e0\u529b\u652f\u6301\u56fe\u50cf\u7684\u5904\u7406\uff0c\u56e0\u6b64\u4e3b\u8981\u4ee5\u5904\u7406\u89c6\u9891\u5468\u8fb9\u7684\u6587\u672c\uff0c\u5982title\uff0c\u83b7\u8d5e\u6700\u591a\u7684\u8bc4\u8bba\u5185\u5bb9\uff0c\u4f5c\u4e3a\u6807\u7b7e\u5316\u7684\u8f93\u5165\uff0c\u800c\u4eca\u6211\u4eec\u5c06\u8fc8\u51fa\u4e00\u5c0f\u6b65\uff0c\u4ee5\u89c6\u9891\u4e2d\u7684\u5173\u952e\u5e27+\u6587\u672c\u4fe1\u606f\u4f5c\u4e3a\u8f93\u5165\u6784\u5efa\u591a\u6a21\u6001\u6a21\u578b\uff0c\u6765\u8fdb\u884c\u66f4\u7cbe\u51c6\u7684\u6807\u7b7e\u5316\u3002 \u6ce8\uff1a\u6240\u8c13\u65e0\u89c6\u9891\u6807\u7b7e\u662f\u6307\uff1a\u7528\u6237\u5728\u4e0a\u4f20\u89c6\u9891\u65f6\u6ca1\u6709\u901a\u8fc7 # \u6765\u81ea\u5b9a\u4e49\u6807\u7b7e\uff0c\u8fd9\u7c7b\u89c6\u9891\u662f\u89c6\u9891\u6807\u7b7e\u5316\u9700\u8981\u5904\u7406\u7684\u91cd\u70b9\u3002","title":"\u80cc\u666f\u9700\u6c42"},{"location":"2/#_3","text":"\u901a\u8fc7\u4e0a\u8ff0\u80cc\u666f\u9700\u6c42\uff0c\u6211\u4eec\u9996\u5148\u660e\u786e\u4ee5\u4e0b\u51e0\u70b9: \u7cfb\u7edf\u8f93\u5165: \u89c6\u9891\u7684\u5173\u952e\u5e27\u56fe\u7247\uff08\u4e00\u822c\u4e3a\u5c01\u9875\uff09+ \u89c6\u9891title\u7684\u6587\u672c\u5185\u5bb9\u3002 \u7cfb\u7edf\u8f93\u51fa: \u8f93\u51fa\u662f\u548c\u4e1a\u52a1\u4e00\u540c\u6307\u5b9a\u7684\u6807\u7b7e\u4f53\u7cfb\uff08\u7c7b\u4f3c\u4e8e\u6587\u672c\u6807\u7b7e\u5316\u7cfb\u7edf\uff09\u3002 \u5728\u7ebf\u670d\u52a1\u8981\u6c42: \u65e0\uff08\u79bb\u7ebf\u670d\u52a1\u5373\u53ef\uff09\u3002 \u591a\u6a21\u6001\u4e0b\u7684\u6807\u7b7e\u4f53\u7cfb\u8bbe\u8ba1\uff1a \u4e4b\u524d\u7684\u6587\u672c\u6807\u7b7e\u8bbe\u8ba1\uff0c\u4f9d\u8d56\u4e8e\u6587\u672c\u4e2d\u7684\u5185\u5bb9\u63cf\u8ff0\u6765\u6307\u5411\u6807\u7b7e\uff0c\u6bd4\u5982\u8c08\u8bba\u67d0\u4e2a\u6e38\u620f\u4eba\u7269\u5c31\u5224\u65ad\u548c\u6e38\u620f\u6709\u5173\u3002 \u4f46\u8fd9\u6837\u7684\u6587\u672c\u5185\u5bb9\u5176\u5b9e\u90fd\u662f\u201c\u76f4\u8ff0\u201d\u5185\u5bb9\uff0c\u6700\u5bb9\u6613\u8868\u8fbe\u201c\u76f4\u8ff0\u201d\u5185\u5bb9\u7684\u5e94\u8be5\u662f\u56fe\u50cf\uff08\u6e38\u620f\u753b\u9762\uff09,\u800c\u6587\u672c\uff08title\uff09\u5f80\u5f80\u5728\u8868\u8fbe\u60c5\u611f\uff0c\u60c5\u7eea\uff08\u8fd9\u4e2a\u4e5f\u548c\u5e94\u7528\u672c\u8eab\u7684\u5b9a\u4f4d\u6709\u5173\uff09\uff0c\u6309\u7167\u8fd9\u4e2a\u903b\u8f91\uff0c\u591a\u6a21\u6001\u4e0b\u7684\u6807\u7b7e\u4f53\u7cfb\u53ef\u4ee5\u66f4\u52a0\u7684\u4e30\u5bcc\u3002","title":"\u9700\u6c42\u5206\u6790"},{"location":"2/#_4","text":"\u5b66\u4e60\u4e86\u4efb\u52a1\u7684\u80cc\u666f\u9700\u6c42\u3002 \u5b66\u4e60\u4e86\u4ea4\u4ed8\u7cfb\u7edf\u8981\u6c42\u4ee5\u53ca\u591a\u6a21\u6001\u4e0b\u7684\u6807\u7b7e\u4f53\u7cfb\u8bbe\u8ba1\u3002","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"2/#22","text":"","title":"2.2 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u521d\u5b9a"},{"location":"2/#_5","text":"\u4e86\u89e3\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u4f5c\u7528\u3002 \u4e86\u89e3\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u6b65\u9aa4\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"2/#_6","text":"\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u4e00\u822c\u662f\u5728\u4e0e\u4ea7\u54c1\uff0c\u8fd0\u8425\u8ba8\u8bba\u9700\u6c42\u540e\u5236\u5b9a\u6280\u672f\u89e3\u51b3\u65b9\u6848\u3002\u5728\u8fd9\u4e2a\u65f6\u95f4\u70b9\u4e0a\uff0cAI\u5de5\u7a0b\u5e08\u5f80\u5f80\u8fd8\u6ca1\u6709\u62ff\u5230\u771f\u5b9e\u7ebf\u4e0a\u6570\u636e\uff0c\u53ea\u80fd\u901a\u8fc7\u9700\u6c42\u63cf\u8ff0\u6765\u5047\u8bbe\u6570\u636e\u60c5\u51b5\uff0c\u5e76\u6839\u636e\u8fd9\u79cd\u60c5\u51b5\u5236\u5b9a\u65b9\u6848\u3002 \u8be5\u65b9\u6848\u4e3b\u8981\u57fa\u4e8e\u6211\u4eec\u4e4b\u524d\u7684\u7c7b\u4f3c\u9879\u76ee\u7ecf\u9a8c\uff0c\u4e00\u65b9\u9762\u5e2e\u52a9\u6211\u4eec\u521d\u6b65\u68b3\u7406\u6574\u4e2a\u5904\u7406\u601d\u8def\u548c\u6d41\u7a0b\uff0c\u53e6\u4e00\u65b9\u9762\u7ed9\u5408\u4f5c\u90e8\u95e8\u4eba\u5458\u5f70\u663e\u6211\u4eec\u662f\u53ef\u4ee5\u80dc\u4efb\u8fd9\u9879\u5de5\u4f5c\u7684\uff08\u8fd9\u5bf9\u4e8e\u56e2\u961f\u4e4b\u95f4\u7684\u5408\u4f5c\u6765\u8bb2\u81f3\u5173\u91cd\u8981\uff0c\u6211\u4eec\u9700\u8981\u5148\u6709\u4e00\u5b9a\u7684\u8868\u793a\u624d\u80fd\u83b7\u5f97\u4fe1\u4efb\uff09\u3002 \u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u4e00\u822c\u662f\u4e00\u4e2a\u7ec6\u8282\u4e0d\u591f\u5b8c\u5584\u7684\u65b9\u6848\uff0c\u4f46\u662f\u5b83\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5927\u4f53\u7684\u89e3\u51b3\u6846\u67b6\uff0c\u5728\u4e4b\u540e\u7684\u771f\u5b9e\u6570\u636e\u4e0b\u548c\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4e0d\u65ad\u4f18\u5316\u3002","title":"\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u4f5c\u7528"},{"location":"2/#_7","text":"\u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e09\u6b65: \u6784\u5efaResnet\u548cGRU\u7ed3\u5408\u7684\u591a\u6a21\u6001\u6a21\u578b \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0 \u7b2c\u4e94\u6b65: \u603b\u7ed3\u4e0e\u6539\u8fdb","title":"\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u73af\u8282"},{"location":"2/#_8","text":"\u660e\u786e\u95ee\u9898: \u4ee5\u89c6\u9891\u5173\u952e\u5e27\u548c\u9644\u5e26\u7684\u6587\u672c\u4fe1\u606f\u4e3a\u8f93\u5165\uff0c\u4ee5\u6807\u7b7e\u4f53\u7cfb\u4e2d\u7684\u67d0\u4e9b\u6807\u7b7e\u4e3a\u8f93\u51fa\u3002 \u6570\u636e\u8981\u6c42: \u591a\u6a21\u6001\u9700\u8981\u6587\u672c-\u56fe\u50cf\u7684\u5bf9\u5e94\u6570\u636e\uff0c\u7531\u4e8e\u6a21\u578b\u6784\u9020\u4e00\u822c\u6bd4\u8f83\u590d\u6742\uff0c\u56e0\u6b64\u5bf9\u6570\u636e\u603b\u91cf\u7684\u8981\u6c42\u4e5f\u6bd4\u8f83\u9ad8\uff0c\u81f3\u5c11\u63d0\u4f9b10\u4e07\u5bf9\u591a\u6a21\u6001\u6570\u636e\u3002 \u57fa\u672c\u6570\u636e\u5f62\u5f0f: # id \u4e3a\u5e8f\u53f7\uff0c img \u4e3a\u56fe\u50cf\u7684\u6587\u4ef6\u4f4d\u7f6e\uff0c label \u4e3a\u6807\u7b7e\u503c\uff0c text \u4e3a\u6587\u672c\u5185\u5bb9 { \" id \" : 7 , \" img \" : \" img\\/7.png \" , \" label \" : 12 , \" text \" : \" \u82e6\u5c3d\u7518\u6765\u65f6\uff0c\u6211\u7ed9\u4f60\u8bb2\u8bb2\u6765\u65f6\u7684\u8def \" } { \" id \" : 10896 , \" img \" : \" img\\/10896.png \" , \" label \" : 0 , \" text \" : \" when you try acid for the first time \" }","title":"\u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42"},{"location":"2/#_9","text":"\u91cd\u8981\u7684\u6587\u672c\u6570\u636e\u5206\u6790\uff1a 1\uff0c\u7edf\u8ba1\u6587\u672c\u957f\u5ea6\u5206\u5e03 \u4f5c\u7528\uff1a \u901a\u8fc7\u5206\u5e03\u60c5\u51b5\u51b3\u5b9a\u957f\u5ea6\u5408\u6cd5\u6027\u68c0\u9a8c\u7684\u8303\u56f4\uff08\u4e3a\u4e86\u4fdd\u8bc1\u5b9e\u65f6\uff0c\u9700\u8981\u9650\u5b9a\u6bcf\u6b21\u89e3\u6790\u7684\u6587\u672c\u957f\u5ea6\uff09\u3002 2\uff0c\u7edf\u8ba1\u540c\u6807\u7b7e\u7684\u5173\u952e\u8bcd\u6982\u51b5 \u4f5c\u7528\uff1a \u7528\u4e8e\u786e\u5b9a\u8bed\u6599\u8d28\u91cf\u3002 \u91cd\u8981\u7684\u56fe\u50cf\u6570\u636e\u5206\u6790\uff1a 1\uff0c\u5bbd\u9ad8\u5206\u5e03 \u4f5c\u7528\uff1a\u7b5b\u67e5\u5f02\u5e38\u6570\u636e\uff0c\u786e\u4fdd\u5bbd\u9ad8\u5206\u5e03\u7b26\u5408\u6570\u636e\u8981\u6c42\u3002","title":"\u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790"},{"location":"2/#resnetgru","text":"\u5728Transformer\u6ca1\u6709\u51fa\u73b0\u4e4b\u524d\uff0c\u65e9\u524d\u7684\u591a\u6a21\u6001\u6784\u5efa\u66f4\u591a\u5c31\u662f\u6839\u636e\u5df2\u6709\u7684\u6a21\u578b\u81ea\u5b9a\u4e49\u7ed3\u6784\uff0c\u6bd4\u5982GRU\u5904\u7406\u6587\u672c\uff0cResnet\u5904\u7406\u56fe\u50cf\uff0c\u518d\u5c06\u4e24\u8005\u7684\u5f20\u91cf\u878d\u5408\uff0c\u6700\u540e\u901a\u8fc7\u4e00\u4e2a\u7f51\u7edc\u505a\u8f93\u51fa\u3002 \u6ce8\uff1a\u8fd9\u91cc\u56de\u987eGRU\u548cResnet\uff0c\u89e3\u91ca \u68af\u5ea6\u6d88\u5931 \u548c \u7f51\u7edc\u9000\u5316 \u3002 \u5c06\u5df2\u6709\u7684\u6a21\u578b\u878d\u5408\u6216\u8005\u8bf4\u81ea\u5b9a\u4e49\u4e1a\u52a1\u9700\u6c42\u7684\u6a21\u578b\u8f93\u5165\u5934\uff0c\u662f\u7b97\u6cd5\u5de5\u7a0b\u5e08\u5728\u4f01\u4e1a\u91cc\u6700\u5e38\u89c1\u4e5f\u662f\u6700\u91cd\u8981\u7684\u5de5\u4f5c\u3002\u56e0\u6b64\uff0c\u5728\u8fd9\u91cc\u5c06\u5e26\u7740\u5927\u5bb6\u6765\u4e00\u6b65\u6b65\u6784\u5efaResnet\u548cGRU\u7ed3\u5408\u7684\u591a\u6a21\u6001\u6a21\u578b\uff0c\u76f4\u5230\u5b8c\u6210\u6a21\u578b\u8bad\u7ec3\u3002 Step1\uff1a\u5148\u8bbe\u8ba1\u8fd9\u6837\u4e00\u4e2a\u6a21\u578b\uff0c\u5728\u6587\u672c\u4fa7\uff0c\u9996\u5148\u7ecf\u8fc7Embedding\u5c42\uff0c\u518d\u7ecf\u8fc7Bi-GRU\u5f97\u5230\u9ad8\u7ef4\u5f20\u91cf\u3002\u5728\u56fe\u50cf\u4fa7\uff0c\u4f7f\u7528\u5e26\u6709\u9884\u8bad\u7ec3\u53c2\u6570\u7684Resnet18\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u5168\u8fde\u63a5\u66ff\u6362\u5b83\u7684\u8f93\u51fa\u5c42\uff0c\u4ee5\u4fbf\u4fdd\u8bc1\u8f93\u51fa\u7ef4\u5ea6\u4e0eBi-GRU\u4e00\u81f4\uff0c\u6700\u540e\u5c06\u4e24\u4fa7\u8f93\u51fa\u5f20\u91cf\u52a0\u6027\u878d\u5408\u901a\u8fc7\u4e00\u4e2a\u5168\u8fde\u63a5\u505a\u4e8c\u5206\u7c7b\u3002 import torch import torch.nn as nn import numpy as np import torchvision from torchvision import datasets , models , transforms class ResnetGRUModel ( nn . Module ): def __init__ ( self , vocab_size , embed_dim , num_class , dropout , hidden_size , num_layers , ): super ( ResnetGRUModel , self ) . __init__ () self . resnet_model = models . resnet18 ( pretrained = True ) ... ... ... def init_weights ( self ): initrange = 0.5 self . token_embedding . weight . data . uniform_ ( - initrange , initrange ) self . resfc . weight . data . uniform_ ( - initrange , initrange ) self . fc . weight . data . uniform_ ( - initrange , initrange ) def forward ( self , text , img ): token_embedded = self . token_embedding ( text ) ... ... ... if __name__ == \"__main__\" : model = ResnetGRUModel ( vocab_size = vocab_size , embed_dim = 64 , num_class = 2 , dropout = 0.1 , hidden_size = 16 , num_layers = 2 , ) # \u968f\u673a\u5355\u6761\u6570\u636e img = torch . rand ( 1 , 3 , 700 , 500 ) text = torch . tensor ([[ 1 , 2 , 3 , 4 , 5 , 6 ]]) print ( model ( text , img )) Step2\uff1a\u5b8c\u6210\u4e86\u6a21\u578b\u540e\uff0c\u8fd8\u9700\u8981\u5c06\u539f\u59cb\u7684\u6587\u672c\u548c\u56fe\u50cf\u6570\u636e\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u5904\u7406\uff0c\u6210\u4e3a\u6a21\u578b\u7684\u8f93\u5165\uff0c\u73b0\u5728\u6211\u4eec\u7ed9\u5b9a\u5927\u5bb6\u4e00\u4efd\u539f\u59cb\u6570\u636e\uff08\u5305\u62ec\u6587\u672c\u6807\u7b7e\u7684jsonl\u4ee5\u53ca\u5bf9\u5e94\u56fe\u50cf\u96c6\uff09\u3002 # train_multimodal_data.jsonl # {\"id\":7,\"img\":\"./img/7.png\",\"label\":1,\"text\":\"\u82e6\u5c3d\u7518\u6765\u65f6\uff0c\u6211\u7ed9\u4f60\u8bb2\u8bb2\u6765\u65f6\u7684\u8def\"} # {\"id\":8,\"img\":\"./img/8.png\",\"label\":0,\"text\":\"\u82cf\u5dde\u8001\u5927\u51cc\u963f\u4e5d\uff01\"} # \u8bfb\u53d6\u6570\u636e\u5e76\u8f6c\u6210json with open ( \"./train_multimodal_data.jsonl\" , 'r' ) as fr : multimodal_data_list = fr . readlines () # \u5904\u7406\u6587\u672c\u8bfb\u53d6\u65f6\u9644\u5e26\u4e00\u4e9b\u7b26\u53f7\uff0c\u6bd4\u5982\u6362\u884c\u7b26 multimodal_data_list = list ( map ( lambda x : eval ( x [: - 1 ]), multimodal_data_list )) print ( multimodal_data_list ) ## \u6587\u672c\u5904\u7406\u6d41\u7a0b ### \u63d0\u53d6\u6587\u672c multimodal_data_text = list ( map ( lambda x : x [ \"text\" ], multimodal_data_list )) ### \u5bf9\u6587\u672c\u8fdb\u884ctokenizer\u6620\u5c04\u5e76\u8bb0\u5f55\u6620\u5c04\u5668 ... ### \u5bf9\u6587\u672c\u8fdb\u884c\u622a\u65ad\u8865\u9f50 ... ### \u6574\u5408\u5904\u7406\u51fd\u6570 def text_preprocess ( text , tokenizer , max_length ): text_token = _use_tokenizer ( tokenizer , text ) text_token = _pad_sequences ( text_token , max_length , value = 0 , ) return torch . tensor ( text_token ) train_txt_list = text_preprocess ( multimodal_data_text , tokenizer , 15 ) ## \u56fe\u50cf\u5904\u7406\u6d41\u7a0b # \u6839\u636e\u4e4b\u524d\u7684\u6570\u636e\u5206\u6790\u83b7\u5f97 gold_size = ( 700 , 500 ) # \u4f7f\u6a21\u578b\u8f93\u5165\u5f20\u91cf\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5747\u503c\u5217\u8868\uff0c\u4ee3\u8868\u5404\u4e2a\u901a\u9053\u7684\u5747\u503c\uff0c # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u6807\u51c6\u5dee\u5217\u8868\uff0c\u4ee3\u8868\u5404\u4e2a\u901a\u9053\u7684\u6807\u51c6\u5dee\u3002\u8fd9\u91cc\u7684\u56fe\u7247\u90fd\u662f\u6709\u4e09\u4e2a\u901a\u9053\u3002 # \u5176\u4e2d\u5747\u503c\u548c\u6807\u51c6\u5dee\u5217\u8868\u4e2d\u7684\u6570\u503c\u6765\u81ea\u5bf9ImageNet\u7684\u5168\u5c40\u91c7\u6837\u7ed3\u679c\u3002 gold_normalize = ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) # \u5b9a\u4e49\u4e00\u7cfb\u5217\u6807\u51c6\u5904\u7406\u6d41\u7a0b\uff0cResize\uff0c\u5f20\u91cf\u5316\uff0c\u89c4\u8303\u5316 # Resize\u548c\u5f20\u91cf\u5316\u7528\u4e8e\u7edf\u4e00\u56fe\u7247\u5c3a\u5bf8\u548c\u6ee1\u8db3\u6846\u67b6\u8981\u6c42 # \u89c4\u8303\u5316\u4fbf\u4e8e\u6a21\u578b\u5feb\u901f\u6536\u655b data_transforms = { 'train' : transforms . Compose ([ transforms . RandomResizedCrop ( gold_size ), transforms . ToTensor (), transforms . Normalize ( gold_normalize [ 0 ], gold_normalize [ 1 ]) ]), 'val' : transforms . Compose ([ transforms . Resize ( gold_size ), transforms . ToTensor (), transforms . Normalize ( gold_normalize [ 0 ], gold_normalize [ 1 ]) ]), } train_data_dir_list = list ( map ( lambda x : x [ \"img\" ], multimodal_data_list )) from PIL import Image def img_loader ( path ): \"\"\"\u56fe\u7247\u8bfb\u53d6\"\"\" with open ( path , 'rb' ) as f : img = Image . open ( f ) return img . convert ( 'RGB' ) # \u8fdb\u884c\u6307\u5b9a\u7684\u8f6c\u5316 train_img_list = list ( map ( lambda x : data_transforms [ \"train\" ]( img_loader ( x )), train_data_dir_list )) ## \u83b7\u53d6\u6807\u7b7e train_label_list = list ( map ( lambda x : x [ \"label\" ], multimodal_data_list )) ## \u6574\u5408\u6570\u636e\u6210\u4e3aDataLoader from torch.utils.data import DataLoader train_iter = list ( zip ( train_img_list , train_txt_list , train_label_list )) BATCH_SIZE = 8 train_dataloader = DataLoader ( train_iter , batch_size = BATCH_SIZE , shuffle = True ) print ( train_dataloader ) Step3\uff1a\u5b9a\u4e49\u635f\u5931\u51fd\u6570\uff0c\u4f18\u5316\u5668\u4ee5\u53ca\u91cd\u8981\u7684\u8d85\u53c2\u6570\uff0c\u8bad\u7ec3\u548c\u8bc4\u4f30\u4f60\u7684\u6a21\u578b\uff08\u5047\u8bbe\u9a8c\u8bc1\u96c6\uff0c\u6d4b\u8bd5\u96c6\u4e0e\u8bad\u7ec3\u96c6\u76f8\u540c\uff09\u3002 import time # Hyperparameters EPOCHS = 20 # epoch LR = 0.05 # learning rate criterion = torch . nn . CrossEntropyLoss () optimizer = torch . optim . SGD ( model . parameters (), lr = LR ) scheduler = torch . optim . lr_scheduler . StepLR ( optimizer , 0.99 , gamma = 0.1 ) total_accu = None # \u6682\u4e14\u8ba4\u4e3a\u4e09\u4e2a\u6570\u636e\u96c6\u662f\u76f8\u540c\u7684 test_dataloader = valid_dataloader = train_dataloader def train ( dataloader ): model . train () total_acc , total_count = 0 , 0 log_interval = 500 start_time = time . time () for idx , ( img , txt , label ) in enumerate ( dataloader ): optimizer . zero_grad () predited_label = model ( txt , img ) loss = criterion ( predited_label , label ) loss . backward () # torch.nn.utils.clip_grad_norm_(model.parameters(), 0.1) optimizer . step () total_acc += ( predited_label . argmax ( 1 ) == label ) . sum () . item () total_count += label . size ( 0 ) if idx % log_interval == 0 and idx > 0 : elapsed = time . time () - start_time print ( \"| epoch {:3d} | {:5d}/{:5d} batches \" \"| accuracy {:8.3f}\" . format ( epoch , idx , len ( dataloader ), total_acc / total_count ) ) total_acc , total_count = 0 , 0 start_time = time . time () def evaluate ( dataloader ): model . eval () total_acc , total_count = 0 , 0 with torch . no_grad (): for idx , ( img , txt , label ) in enumerate ( dataloader ): predited_label = model ( txt , img ) loss = criterion ( predited_label , label ) total_acc += ( predited_label . argmax ( 1 ) == label ) . sum () . item () total_count += label . size ( 0 ) return total_acc / total_count for epoch in range ( 1 , EPOCHS + 1 ): epoch_start_time = time . time () train ( train_dataloader ) accu_val = evaluate ( valid_dataloader ) if total_accu is not None and total_accu > accu_val : scheduler . step () else : total_accu = accu_val print ( \"-\" * 59 ) print ( \"| end of epoch {:3d} | time: {:5.2f}s | \" \"valid accuracy {:8.3f} \" . format ( epoch , time . time () - epoch_start_time , accu_val ) ) print ( \"-\" * 59 ) print ( \"Checking the results of test dataset.\" ) accu_test = evaluate ( test_dataloader ) print ( \"test accuracy {:8.3f}\" . format ( accu_test )) torch . save ( model . state_dict (), './model_weights.pth' )","title":"\u7b2c\u4e09\u6b65\uff1a\u6784\u5efaResnet\u548cGRU\u7ed3\u5408\u7684\u591a\u6a21\u6001\u6a21\u578b"},{"location":"2/#_10","text":"\u603b\u4f53\u670d\u52a1\u67b6\u6784\u8bbe\u8ba1 \u4f7f\u7528\u57fa\u4e8eDjango\u7684\u670d\u52a1\u6846\u67b6\u3002 \u4f7f\u7528nginx\u4f5c\u4e3a\u53cd\u5411\u4ee3\u7406\u548c\u8d1f\u8f7d\u5747\u8861\u3002 \u4f7f\u7528supervisor\u4f5c\u4e3a\u5355\u670d\u52a1\u5b88\u62a4\u4e0e\u76d1\u63a7\u3002 \u4f7f\u7528uwsgi\u4f5c\u4e3a\u9ad8\u6027\u80fdweb server\u3002 \u6a21\u578b\u670d\u52a1\u5c01\u88c5 \u57fa\u4e8etensorflow/keras\u6846\u67b6\u5f00\u53d1\u7684\u6a21\u578b\u4f7f\u7528tf-serving\u8fdb\u884c\u5c01\u88c5\uff0c\u4ee5\u4fdd\u8bc1\u670d\u52a1\u5065\u58ee\u6027\u4ee5\u53ca\u6a21\u578b\u70ed\u66f4\u65b0\u3002 \u57fa\u4e8epytorch\u6846\u67b6\u5f00\u53d1\u7684\u6a21\u578b\u4f7f\u7528flask\u6846\u67b6\u8fdb\u884c\u5c01\u88c5\uff0c\u4f7f\u7528\u4ea4\u66ff\u53cc\u670d\u52a1\u4fdd\u8bc1\u6a21\u578b\u70ed\u66f4\u65b0\u3002 \u7cfb\u7edf\u8054\u8c03\u4e0e\u6d4b\u8bd5 \u4e0e\u5916\u754c\u670d\u52a1\u4f7f\u7528REST API\uff08http\uff09\u8fdb\u884c\u4ea4\u4e92\u3002 \u8f93\u5165\u4e0e\u8f93\u51fa\u4e3a\u89c4\u8303json\u683c\u5f0f\u3002 \u6839\u636e\u5b9e\u9645\u63a5\u53e3\u8c03\u7528\u60c5\u51b5\uff0c\u8fdb\u884c\u5e76\u53d1\u538b\u529b\u6d4b\u8bd5\u3002 \u7070\u5ea6\u53d1\u5e03\uff0c\u8fdb\u884c\u53ef\u7528\u6027\u6d4b\u8bd5\u3002 \u670d\u52a1\u5668\u8d44\u6e90 \u6a21\u578b\u8bad\u7ec3\u670d\u52a1\u5668\uff1a CPU: 64C\uff0c128G\u5185\u5b58\uff0c1T\u786c\u76d8 > * GPU: 4*Tesla T4 \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u5668: CPU: 64C\uff0c128G\u5185\u5b58\uff0c1T\u786c\u76d8\uff0c10M\u5e26\u5bbd","title":"\u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0"},{"location":"2/#_11","text":"\u4e0a\u8ff0\u65b9\u6848\u7684\u6a21\u578b\u662f\u8f83\u65e9\u671f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06GRU\u548cResnet\u66ff\u6362\u6210\u66f4\u5177\u6709\u63d0\u53d6\u80fd\u529b\u7684\u6a21\u578b\uff0c\u5982\uff1aBERT\uff0cInceptionV3\u7b49\u3002\u540c\u65f6\u7279\u5f81\u878d\u5408\u7684\u70b9\u4e5f\u662f\u503c\u5f97\u8003\u8651\u7684\uff0c\u7b80\u5355\u7684\u52a0\u6027\u8fd0\u7b97\u6216\u5219\u62fc\u63a5\u7edd\u4e0d\u662f\u6700\u4f73\u7684\u9009\u62e9\u3002 \u6240\u4ee5\u5728\u4e4b\u540e\u771f\u6b63\u7684\u65b9\u6848\u5b9e\u65bd\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5c06\u5c1d\u8bd5\u66f4\u591a\u7684\u65b9\u6cd5\u3002","title":"\u7b2c\u4e94\u6b65: \u603b\u7ed3\u4e0e\u6539\u8fdb"},{"location":"2/#_12","text":"\u5b66\u4e60\u4e86\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u4f5c\u7528: \u4e00\u65b9\u9762\u5e2e\u52a9\u6211\u4eec\u521d\u6b65\u68b3\u7406\u6574\u4e2a\u5904\u7406\u601d\u8def\u548c\u6d41\u7a0b\uff0c\u53e6\u4e00\u65b9\u9762\u7ed9\u5408\u4f5c\u90e8\u95e8\u4eba\u5458\u5f70\u663e\u6211\u4eec\u662f\u53ef\u4ee5\u80dc\u4efb\u8fd9\u9879\u5de5\u4f5c\u7684\u3002 \u5b66\u4e60\u4e86\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e09\u6b65: \u6784\u5efaResnet\u548cGRU\u7ed3\u5408\u7684\u591a\u6a21\u6001\u6a21\u578b \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0 \u7b2c\u4e94\u6b65: \u603b\u7ed3\u4e0e\u6539\u8fdb","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"2/#23","text":"","title":"2.3 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u5b9e\u65bd\u4e0e\u8c03\u6574"},{"location":"2/#_13","text":"\u638c\u63e1ViLBERT\u4e2d\u6700\u6838\u5fc3\u7684\u4f18\u5316\u65b9\u6848\u4ee5\u53ca\u4ee3\u7801\u5b9e\u73b0\u3002 \u638c\u63e1\u771f\u5b9e\u6a21\u578b\u90e8\u7f72\u8fc7\u7a0b\u4e2d\u9700\u8981\u6ce8\u610f\u7684\u91cd\u70b9\u5de5\u7a0b\u95ee\u9898\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"2/#_14","text":"\u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e8c\u6b65: \u8fdb\u884c\u6a21\u578b\u8bc6\u522b\u90e8\u5206\u5206\u6790 \u7b2c\u4e09\u6b65: \u5bf9\u6a21\u578b\u8fdb\u884c\u5de5\u7a0b\u5316\u90e8\u7f72","title":"\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5b9e\u65bd\u6b65\u9aa4"},{"location":"2/#_15","text":"\u6839\u636e\u4e4b\u524d\u7684\u6570\u636e\u8981\u6c42\uff0c\u6211\u4eec\u5c06\u5f97\u5230\u5355\u7c7b\u522b\u81f3\u5c1110\u4e07\u7684\u6587\u672c\u4e0e\u56fe\u50cf\u6570\u636e\uff0c\u5047\u8bbe\u6211\u4eec\u7684\u7c7b\u522b\u603b\u6570\u662f50\uff0c\u90a3\u4e48\u6570\u636e\u603b\u91cf\u5c31\u662f500\u4e07+\uff1b\u8fd9\u4e9b\u6570\u636e\u600e\u4e48\u6765\u7684\u5462\uff0c\u5e76\u4e0d\u662f\u4eba\u5de5\u6807\u6ce8\u5f97\u5230\u7684\uff0c\u800c\u662f\u901a\u8fc7\u7528\u6237\u81ea\u5b9a\u4e49\u6807\u7b7e\u83b7\u5f97\u7684\uff0c\u6bd4\u5982\u7528\u6237\u5728\u7ed9\u89c6\u9891\u6253\u4e86#\u5468\u6770\u4f26\uff0c\u90a3\u8fd9\u4e2a\u89c6\u9891\u53bb\u9664\u6807\u7b7e\u540e\u5c31\u6210\u4e3a\u4e86\u201c\u97f3\u4e50\u201d\u6807\u7b7e\u7684\u6b63\u6837\u672c\u3002 \u5bf9\u6587\u672c\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790\uff1a \u6ce8\uff1a\u6570\u636e\u662f\u4e25\u683c\u7684\u516c\u53f8\u8d44\u4ea7\uff0c\u56e0\u6b64\u6211\u4eec\u5728\u5b66\u4e60\u8fc7\u7a0b\u4e2d\u4e00\u822c\u65e0\u6cd5\u62ff\u5230\u771f\u5b9e\u91cf\u7ea7\u7684\u6570\u636e\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u5f71\u54cd\u6211\u4eec\u5728\u9762\u8bd5\u8fc7\u7a0b\u4e2d\u9610\u8ff0\u6570\u636e\u5f62\u5f0f\uff0c\u548c\u5b66\u4e60\u6709\u5173\u6570\u636e\u7684\u6280\u672f\uff0c\u4e0b\u9762\u7684\u6570\u636e\u5206\u6790\u5c06\u4ee5\u201c\u4f20\u667a\u5927\u8111\u201d\u9879\u76ee\u4e2d\u7684\u6570\u636e\u8fdb\u884c\u8fc1\u79fb\u8bb2\u89e3\u3002 \u4ece\u7279\u5b9asql\u6570\u636e\u5e93\u4e2d\u83b7\u5f97\u6307\u5b9a\u6570\u636e: # \u8bf7\u5b89\u88c5mysql\u5de5\u5177\uff1apip install pymysql import pandas as pd import pymysql # \u5185\u90e8\u6570\u636e\u5e93\u914d\u7f6e, \u8fd9\u662f\u7531\u6570\u4ed3\u5de5\u7a0b\u5e08\u63d0\u4f9b\u7684 sql_config = { \"host\" : \"47.241.24.21\" , \"user\" : \"ai_test\" , \"password\" : \"*****************\" , \"database\" : \"ai\" , } # \u6253\u5f00\u6570\u636e\u5e93\u8fde\u63a5 db = pymysql . connect ( ** sql_config ) # \u4f7f\u7528 cursor() \u65b9\u6cd5\u521b\u5efa\u4e00\u4e2a\u6e38\u6807\u5bf9\u8c61 cursor cursor = db . cursor () # \u4f7f\u7528 execute() \u65b9\u6cd5\u6267\u884c SQL \u67e5\u8be2 # \u7f16\u5199sql\u8bed\u53e5\uff0c\u6839\u636eid\u53d6\u51fa\u6307\u5b9a\u8303\u56f4\u7684\u5185\u5bb9\u67e5\u770b, \u8fd9\u91cc\u53d6\u524d1000\u6761 cursor . execute ( \"SELECT * from `ai_test` WHERE 0 < id < 1000\" ) # \u4f7f\u7528 fetchall() \u65b9\u6cd5\u83b7\u53d6\u5168\u90e8\u6570\u636e. data = cursor . fetchall () # \u8f93\u51fa\u6210csv\u6216excel\u6587\u4ef6\uff0c\u8fd9\u91cc\u662f\u8f93\u51facsv # \u8f93\u51faexcel\u4f7f\u7528df.to_excel API\u5373\u53ef df = pd . DataFrame ( data ) df . to_csv ( \"./corpus.csv\" ) # \u5173\u95ed\u6570\u636e\u5e93\u8fde\u63a5 db . close () \u4ee3\u7801\u4f4d\u7f6e: \u5185\u7f51\u670d\u52a1\u5668\u7684/data/coItcastBrain/fetch_data.py \u8f93\u51fa\u6548\u679c: \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210corpus.csv\u6216corpus.xlsx\u6587\u4ef6 \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\u56fe\u6240\u793a\uff08\u8fd9\u91cc\u4e3a\u4e86\u6e05\u6670\u663e\u793a\u548c\u8bf4\u660e\u4f7f\u7528excel\u6253\u5f00\uff09 \u5185\u7f51\u673a\u5668IP\uff1a172.17.0.228 \u6570\u636e\u8bf4\u660e: \u7531\u4e8e\u6570\u636e\u6d89\u53ca\u7528\u6237\u9690\u79c1\uff0c\u5b66\u751f\u65e0\u6cd5\u8bf7\u6c42\u5185\u7f51\u6570\u636e\u5e93\uff0c\u4f46\u662f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7ed9\u5b9a\u7684\u90e8\u5206\u8131\u654f\u6570\u636e\uff08\u5982\u4e0a\u56feexcel\u5f62\u5f0f\uff09\u3002 \u901a\u8fc7\u4e0a\u56fe\u8868\u683c\uff0c\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u5171\u670913\u5217\uff0813\u4e2a\u5b57\u6bb5\uff09\uff0c\u5206\u522b\u662f\"\u4f1a\u8bddID\"\uff0c\"\u65f6\u95f4\"\uff0c\"\u65f6\u95f4\u6233\"\uff0c\"\u5185\u5bb9\"\uff0c\"\u6d88\u606f\u53d1\u9001\u4eba\"\uff0c\"\u59d3\u540d\"\uff0c\"\u624b\u673a\u53f7\"\uff0c\"QQ\"\uff0c\"\u5fae\u4fe1\"\uff0c\"\u610f\u5411\u6821\u533a\"\uff0c\"\u610f\u5411\u5b66\u79d1\"\uff0c\"\u4e13\u9898\u9875\u6807\u9898\"\uff0c\"\u5730\u533a\"\u3002\u4e0b\u9762\u5bf9\u6bcf\u4e2a\u5b57\u6bb5\u5206\u522b\u89e3\u91ca\u3002 \u4f1a\u8bddID\uff1a\u6574\u4e2a\u5bf9\u8bdd\u5757\u7684\u552f\u4e00\u6807\u8bc6\uff0c\u7528\u4e8e\u533a\u5206\u6d88\u606f\u5185\u5bb9\u662f\u5426\u4e3a\u540c\u4e00\u6b21\u5bf9\u8bdd\u3002 \u65f6\u95f4\uff1a\u8be5\u6761\u6d88\u606f\u53d1\u9001\u51fa\u53bb\u7684\u5177\u4f53\u7ed3\u6784\u5316\u65f6\u95f4\u3002 \u65f6\u95f4\u6233\uff1a\u8be5\u6761\u6d88\u606f\u53d1\u9001\u51fa\u53bb\u7684\u65f6\u95f4\u6233\u3002 \u5185\u5bb9\uff1a\u8be5\u6761\u6d88\u606f\u7684\u5177\u4f53\u5185\u5bb9\u3002 \u6d88\u606f\u53d1\u9001\u4eba\uff1a\u8be5\u6761\u6d88\u606f\u662f\u7531\u8c01\u53d1\u9001\u7684\uff0c\u8fd9\u91cc\u53ea\u6709\"\u5ba2\u6237\"\u548c\"\u54a8\u8be2\u5e08\"\u4e24\u79cd\u3002 \u59d3\u540d\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u59d3\u540d\u3002\u4ece\"\u59d3\u540d\"\u5b57\u6bb5\u5f00\u59cb\u4e3a\u975e\u5bf9\u8bdd\u5757\u672c\u8eab\u7684\u5b57\u6bb5\uff0c\u800c\u662f\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u5757\u586b\u5199\u7684\u5b66\u5458\u4fe1\u606f\u6216\u5176\u4ed6\u8f85\u52a9\u4fe1\u606f\u3002 \u624b\u673a\u53f7\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u624b\u673a\u53f7\u3002 QQ\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458QQ\u53f7\u3002 \u5fae\u4fe1\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u5fae\u4fe1\u53f7\u3002 \u610f\u5411\u6821\u533a\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u610f\u5411\u6821\u533a\u3002 \u610f\u5411\u5b66\u79d1\uff1a\u54a8\u8be2\u5e08\u901a\u8fc7\u5bf9\u8bdd\u83b7\u5f97\u7684\u5b66\u5458\u610f\u5411\u5b66\u79d1\u3002 \u4e13\u9898\u9875\u6807\u9898\uff1a\u8fd9\u662f\u4e00\u4e2a\u54a8\u8be2\u5e08\u8f85\u52a9\u4fe1\u606f\uff0c\u4ee3\u8868\u5b66\u5458\u901a\u8fc7\u5b98\u7f51\u4e2d\u54ea\u4e2a\u9875\u9762\u8fdb\u884c\u54a8\u8be2\u7684\u3002\u8fd9\u4e2a\u4fe1\u606f\u54a8\u8be2\u5e08\u4f7f\u7528\u7684\u7cfb\u7edf\u662f\u53ef\u4ee5\u83b7\u5f97\u7684\u3002 \u5730\u533a\uff1a\u8fd9\u4e5f\u662f\u4e00\u4e2a\u8f85\u52a9\u4fe1\u606f\uff0c\u4ee3\u8868\u5b66\u5458\u4f7f\u7528\u7684\u7ec8\u7aef\u6240\u5728IP\u5730\u533a\u3002\u8fd9\u4e2a\u4fe1\u606f\u54a8\u8be2\u5e08\u4f7f\u7528\u7684\u7cfb\u7edf\u4e5f\u662f\u53ef\u4ee5\u83b7\u5f97\u7684\u3002 \u7edf\u8ba1\u6587\u672c\u957f\u5ea6\u5206\u5e03\u7684\u5b9e\u73b0: # \u5bfc\u5165\u5fc5\u5907\u5de5\u5177\u5305 import pandas as pd import seaborn as sns import matplotlib.pyplot as plt # \u8bbe\u7f6e\u663e\u793a\u98ce\u683c plt . style . use ( \"fivethirtyeight\" ) # \u8fd9\u91cc\u4ee5\u7ed9\u5b9a\u7684excel\u8868\u683c\u4e3a\u8f93\u5165 # \u8be5\u6570\u636e\u53ef\u4ee5\u5728\u7ed9\u5b9a\u7684\u539f\u59cb\u4ee3\u7801\u4e2d\u627e\u5230 # \u53ef\u4ee5\u5c06\u8be5\u6bb5\u4ee3\u7801\u548c\u6570\u636e\u62f7\u8d1d\u5230\u672c\u5730\u8fd0\u884c\uff0c\u67e5\u770b\u53ef\u89c6\u5316\u6548\u679c path = \"/data/coItcastBrain/\u539f\u59cb\u6570\u636e\u5df2\u8131\u654f.xlsx\" # \u8bfb\u53d6excel\u8868\u683c original_data = pd . read_excel ( path , \"Sheet4\" ) # \u6211\u4eec\u4f1a\u5c06\"\u5ba2\u6237\"\u7684\u6d88\u606f\u5185\u5bb9\u548c\"\u54a8\u8be2\u5e08\"\u7684\u6d88\u606f\u5185\u5bb9\u5206\u5f00\u7edf\u8ba1 # \u5206\u522b\u83b7\u5f97\u5bf9\u5e94\u7684\u5185\u5bb9 user_original_data = original_data [ original_data [ \"\u6d88\u606f\u53d1\u9001\u4eba\" ] == \"\u5ba2\u6237\" ] employee_original_data = original_data [ original_data [ \"\u6d88\u606f\u53d1\u9001\u4eba\" ] == \"\u54a8\u8be2\u5e08\" ] # \u5206\u522b\u5728\u6570\u636e\u4e2d\u6dfb\u52a0\u65b0\u7684\u53e5\u5b50\u957f\u5ea6\u5217 user_original_data [ \"sentence_length\" ] = list ( map ( lambda x : len ( str ( x )), user_original_data [ \"\u5185\u5bb9\" ]) ) employee_original_data [ \"sentence_length\" ] = list ( map ( lambda x : len ( str ( x )), employee_original_data [ \"\u5185\u5bb9\" ]) ) print ( \"\u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u5206\u5e03\u56fe:\" ) # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u7684\u6570\u91cf\u5206\u5e03\u56fe sns . countplot ( \"sentence_length\" , data = user_original_data ) # \u4e3b\u8981\u5173\u6ce8count\u957f\u5ea6\u5206\u5e03\u7684\u7eb5\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u6a2a\u5750\u6807, \u6a2a\u5750\u6807\u8303\u56f4\u901a\u8fc7dist\u56fe\u8fdb\u884c\u67e5\u770b plt . xticks ([]) plt . show () # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( user_original_data [ \"sentence_length\" ]) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . show () print ( \"\u7ed8\u5236\u54a8\u8be2\u5e08\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u5206\u5e03\u56fe:\" ) # \u7ed8\u5236\u54a8\u8be2\u5e08\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u7684\u6570\u91cf\u5206\u5e03\u56fe sns . countplot ( \"sentence_length\" , data = employee_original_data ) # \u4e3b\u8981\u5173\u6ce8count\u957f\u5ea6\u5206\u5e03\u7684\u7eb5\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u6a2a\u5750\u6807, \u6a2a\u5750\u6807\u8303\u56f4\u901a\u8fc7dist\u56fe\u8fdb\u884c\u67e5\u770b plt . xticks ([]) plt . show () # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( employee_original_data [ \"sentence_length\" ]) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . show () \u4ee3\u7801\u4f4d\u7f6e: /data/coItcastBrain/data_analysis.py \u8f93\u51fa\u6548\u679c: \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u6570\u91cf-\u957f\u5ea6\u5206\u5e03\u56fe: \u7ed8\u5236\u54a8\u8be2\u5e08\u5bf9\u8bdd\u53e5\u5b50\u6570\u91cf-\u957f\u5ea6\u5206\u5e03\u56fe: \u5206\u6790: \u6839\u636e\u5bf9\u8bdd\u53e5\u5b50\u957f\u5ea6\u5206\u5e03\u56fe\u5206\u6790\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u5b66\u5458\u5355\u6b21\u5bf9\u8bdd\u957f\u5ea6\u9650\u5b9a\u5728\u5c0f\u4e8e50\u7684\u4f4d\u7f6e\u5373\u53ef\u8986\u76d690%\u5de6\u53f3\u7684\u60c5\u51b5\uff1b\u54a8\u8be2\u5e08\u5355\u6b21\u5bf9\u8bdd\u957f\u5ea6\u9650\u5b9a\u5728\u5c0f\u4e8e100\u7684\u4f4d\u7f6e\u5373\u53ef\u8986\u76d690%\u5de6\u53f3\u7684\u60c5\u51b5\u3002\u610f\u5473\u7740\u5728\u4e4b\u540e\u8d85\u8fc7\u9650\u5b9a\u957f\u5ea6\u7684\u53e5\u5b50\u5c06\u4e0d\u518d\u88ab\u5904\u7406\uff0c\u7528\u4ee5\u51cf\u5c11\u8ba1\u7b97\u538b\u529b\u3002 \u4e3a\u4e86\u9a8c\u8bc1\u88ab\u5ffd\u7565\u7684\u53e5\u5b50\u786e\u5b9e\u4f5c\u7528\u4e0d\u5927\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u627e\u5230\u9650\u5b9a\u957f\u5ea6\u540e\u8fdb\u884c\u8d85\u9650\u53e5\u5b50\u62bd\u6837\u67e5\u770b\u3002\u901a\u8fc7\u4ee5\u4e0b\u4ee3\u7801\u8fdb\u884c\u6253\u5370\u67e5\u770b\uff1a # \u5bf9\u5b66\u5458\u548c\u54a8\u8be2\u5e08\u7684\u8d85\u9650\u53e5\u5b50\u8fdb\u884c\u62bd\u6837\u67e5\u770b, \u8fd9\u91cc\u62bd\u683710\u6761\u6570\u636e print ( \"\u5b66\u5458\u8d85\u9650\u53e5\u5b50\u67e5\u770b:\" ) print ( user_original_data [ user_original_data [ \"sentence_length\" ] > 50 ][ \"\u5185\u5bb9\" ][: 10 ]) print ( \"\u54a8\u8be2\u5e08\u8d85\u9650\u53e5\u5b50\u67e5\u770b:\" ) print ( employee_original_data [ employee_original_data [ \"sentence_length\" ] > 100 ][ \"\u5185\u5bb9\" ][: 10 ]) \u8f93\u51fa\u6548\u679c: \u5b66\u5458\u8d85\u9650\u53e5\u5b50\u67e5\u770b: 17 \u6765\u6e90\uff1a<a target='_blank' href='http://www.itheima... 50 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://m.itheima... 70 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://m.itheima... 104 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://m.itheima... 274 https://fs-im-kefu.0moor.com/im/b1f02202-210e-... 376 \u6765\u6e90\uff1a<a target='_blank' href='http://www.itheima... 724 \u6765\u6e90\uff1a<a target='_blank' href='http://www.itcast.... 725 \u6765\u6e90\uff1a<a target='_blank' href='http://m.itheima.c... 863 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://www.ithei... 1083 \u4f1a\u8bdd\u6765\u6e90\u4e8e<a target='_blank' href='http://m.itheima... Name: \u5185\u5bb9, dtype: object \u54a8\u8be2\u5e08\u8d85\u9650\u53e5\u5b50\u67e5\u770b: 0 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 19 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 29 https://fs-im-kefu.0moor.com/im/d01d1cf2-1e00-... 39 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 56 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 91 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 113 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 125 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 141 \u60a8\u597d\uff0c\u6211\u4eec\u662f\u4f20\u667a\u64ad\u5ba2.\u9ed1\u9a6c\u7a0b\u5e8f\u5458\uff01\u4e1a\u5185\u6700\u9ad8\u53e3\u7891\u63a8\u8350\u7387\uff0c02%\u6765\u81ea\u4e8e\u8001\u5b66\u5458\u63a8\u8350\u3002\u6bcf\u5e74\u53d1\u884c\u6559\u6750\u8d85... 158 https://fs-im-kefu.0moor.com/im/b1f02202-210e-... Name: \u5185\u5bb9, dtype: object \u5206\u6790: \u6211\u4eec\u53d1\u73b0\u51e0\u4e4e\u6240\u6709\u7684\u8d85\u9650\u53e5\u5b50\u90fd\u662f\u7cfb\u7edf\u81ea\u52a8\u53d1\u9001\u7684\u4e00\u4e9b\u6d88\u606f\uff0c\u5e76\u4e0d\u6765\u81ea\u4e8e\u771f\u5b9e\u7684\u5bf9\u8bdd\u4e3b\u4f53\uff0c\u5bf9\u6211\u4eec\u7684\u6587\u672c\u5206\u6790\u6ca1\u6709\u4efb\u4f55\u4f5c\u7528\u3002 \u6839\u636e \u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u73af\u8282: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u6211\u4eec\u8fd8\u9700\u8981\u7edf\u8ba1\u6587\u672c\u4e2d\u5404\u4e2a\u4e3b\u8981\u5b9e\u4f53\u771f\u5b9e\u51fa\u73b0\u9891\u7387\uff0c\u6765\u786e\u5b9a\u5404\u4e2a\u5b9e\u4f53\u8bc6\u522b\u7684\u4f18\u5148\u7b49\u7ea7\u3002\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u5728\u771f\u5b9e\u7684\u6570\u636e\u4e2d\uff0c\u54a8\u8be2\u5e08\u5e76\u4e0d\u80fd\u51c6\u786e\u586b\u5199\u5b9e\u4f53\u4fe1\u606f\uff0c\u800c\u4e14\u7c7b\u4f3c\u4e8e\"\u610f\u5411\u6821\u533a\"\u548c\"\u610f\u5411\u5b66\u79d1\"\u57fa\u672c\u4e0a\u662f\u901a\u8fc7\"\u5730\u533a\"\u548c\"\u4e13\u9898\u9875\u6807\u9898\"\u8fd9\u6837\u7684\u8f85\u52a9\u4fe1\u606f\u6765\u786e\u5b9a\u7684\uff0c\u4e0e\u5bf9\u8bdd\u5185\u5bb9\u672c\u8eab\u5e76\u65e0\u5173\u8054\u3002\u56e0\u6b64\u6211\u4eec\u6ca1\u6709\u505a\u8be5\u79cd\u6570\u636e\u5206\u6790\u3002 \u4e5f\u53ef\u4ee5\u6253\u5370\u6bcf\u4e2a\u5bf9\u8bdd\u5757\u4e2d\u7684\u5b66\u5458\u5bf9\u8bdd\u5185\u5bb9\u8fdb\u884c\u67e5\u770b: \u4e3b\u8981\u5173\u6ce8\u5bf9\u8bdd\u8d28\u91cf ## \u6253\u5370\u5b66\u5458\u5bf9\u8bdd\u5185\u5bb9 # \u5148\u5bf9\u957f\u5ea6\u8d85\u8fc750\u7684\u53e5\u5b50\u8fdb\u884c\u8fc7\u6ee4 user_original_data = user_original_data [ user_original_data [ \"sentence_length\" ] <= 50 ] # \u518d\u53bb\u9664\u591a\u4f59\u7684\u5217\uff0c\u53ea\u7559\u4e0b\u201c\u4f1a\u8bddID\u201d\u548c\u201c\u5185\u5bb9\u201d df = user_original_data . drop ( [ \"\u65f6\u95f4\" , \"\u65f6\u95f4\u6233\" , \"sentence_length\" , \"\u59d3\u540d\" , \"\u624b\u673a\u53f7\" , \"QQ\" , \"\u5fae\u4fe1\" , \"\u610f\u5411\u5b66\u79d1\" , \"\u610f\u5411\u6821\u533a\" , \"\u6d88\u606f\u53d1\u9001\u4eba\" , \"\u4e13\u9898\u9875\u6807\u9898\" , \"\u5730\u533a\" , ], axis = 1 , ) # \u5c06DataFrame\u8f6c\u6210\u5217\u8868 # \u5f62\u5982[[\u4f1a\u8bddID1, \u5bf9\u5e94\u7684\u5185\u5bb91], [\u4f1a\u8bddID1, \u5bf9\u5e94\u7684\u5185\u5bb92], # [\u4f1a\u8bddID2, \u5bf9\u5e94\u7684\u5185\u5bb91], [\u4f1a\u8bddID2, \u5bf9\u5e94\u7684\u5185\u5bb92]] temp = df . values . tolist () # \u4f7f\u7528\u4ee5\u4e0b\u8fc7\u7a0b\u5c06temp\u8f6c\u6362\u4e3a[[\u4f1a\u8bddID1, \u5bf9\u5e94\u7684\u5185\u5bb91, \u5bf9\u5e94\u7684\u5185\u5bb92], # [\u4f1a\u8bddID2, \u5bf9\u5e94\u7684\u5185\u5bb91, \u5bf9\u5e94\u7684\u5185\u5bb92]] # \u521b\u5efa\u5b58\u50a8\u7ed3\u679c\u7684\u7a7a\u5217\u8868 result = [] # \u5bf9temp\u8fdb\u884c\u5faa\u73af\u904d\u5386 for index , item in enumerate ( temp ): # \u4f7f\u5bf9\u8bdd\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5b57\u7b26\u4e32\u7c7b\u578b item [ 1 ] = str ( item [ 1 ]) # \u904d\u5386\u7684\u7b2c\u4e00\u4e2a\u5217\u8868\u76f4\u63a5\u88c5\u8fdb\u7ed3\u679c\u5217\u8868 if index == 0 : result . append ( item ) else : # \u63a5\u4e0b\u6765\u904d\u5386\u7684\u6bcf\u4e2a\u5217\u8868\u4e2d\u7684\u4f1a\u8bddID\u8981\u4e0e\u5df2\u8fdb\u5165\u7ed3\u679c\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5217\u8868\u4f1a\u8bddID\u505a\u6bd4\u8f83 # \u5982\u679c\u76f8\u540c\uff0c\u8bf4\u660e\u662f\u540c\u4e00\u4e2a\u5bf9\u8bdd\u5757\u4e2d\u7684\u5185\u5bb9 if item [ 0 ] == result [ - 1 ][ 0 ]: # \u5219\u5c06\u5185\u5bb9\u5b58\u5230\u7ed3\u679c\u5217\u8868\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u5217\u8868\u4e2d result [ - 1 ] . append ( item [ 1 ]) else : # \u5426\u5219\u8bf4\u660e\u662f\u4e0d\u540c\u7684\u5bf9\u8bdd\u5757\uff0c\u5219\u5e26\u7740\u4f1a\u8bddID\u76f4\u63a5\u5b58\u8fdb\u7ed3\u679c\u5217\u8868 result . append ( item ) # \u6253\u5370\u8f6c\u5316\u540e\u7684\u7ed3\u679c print ( result ) \u4ee3\u7801\u4f4d\u7f6e: /data/coItcastBrain/data_analysis.py \u8f93\u51fa\u6548\u679c: [[2324393, '\u4ef7\u683c\uff1f', 'C++', '\u597d', 'wangtong_chn@022.com', '02101021202'], [2324405, '022221221', '\u7528\u6237\u5df2\u79bb\u5f00'], [2324430, '\u8f6f\u4ef6\u6d4b\u8bd5', '\u6ca1\u6709', '02202122220'], [2324667, '\u4f60\u597d', '\u65b0\u5a92\u4f53\u77ed\u89c6\u9891\uff0c\u8fd0\u8425', '01202021012', '\u5fae\u4fe1\u53f7', '\u55ef\u55ef\u5bf9\u7684'], [2325404, 'ui\u8bbe\u8ba1', '\u662f\u7684', '\u5fae\u4fe1\u5427', 'JP0222121', '01102010022', '\u597d\u7684', '\uff1f\uff1f\uff1f', '\u597d\u7684\u597d\u7684'], [2325542, '\u52a0\u4e2a\u5fae\u4fe1\u804a', '02202112112', '\u662f\u7684', '\u4e0d\u8981\u6253\u7535\u8bdd'], [2325615, '\u6211\u5df2\u7ecf\u62a5\u540d\u4e86\uff0c\u8fc7\u6765\u770b\u4e00\u4e0b', '\u6211\u4eec\u6cb3\u6c60\u5e02\u7edf\u4e00\u7684', '00000222220', '\u55ef', '\u7528\u6237\u5df2\u79bb\u5f00'], [2325712, '\u96f6\u57fa\u7840', '\u5bf9\u81ea\u5a92\u4f53\u7684\u6982\u5ff5\u5f88\u542b\u7cca\uff0c\u4e0d\u77e5\u600e\u4e48\u5165\u624b', '11120012QQ\u53f7', '\u662f\u7684', '00001002002', '\u5c31\u662f\u8fd9\u4e2a\u53ef\u4ee5\u73b0\u573a\u57f9\u8bad\u5417'], [2325852, '2', '\u8fd9\u4e2a\u662f\u4ee3\u7801\u754c\u9762\u4e48\uff1f', '\u662f\u7684', '\u5de5\u4f5c\u9700\u8981', '\u5fae\u4fe1', '01212121121', '\u540c\u6b65', '\u597d\u7684'], [2325977, '\u6211\u60f3\u5b66\u5e73\u9762\u8bbe\u8ba1', '\u6ca1\u6709', '\u8c22\u8c22', '1121021000QQ\u53f7', '\u6211\u8fd9\u8fb9\u767b\u5f55QQ\u6536\u4e00\u4e0b', '\u597d\u7684', '02022100221', '\u8fd9\u4e2a\u5b66\u4e60\u9700\u8981\u591a\u4e45 \u51e0\u5e74 \u6587\u5316\u7a0b\u5ea6\u8981\u6c42'], [2326111, '120212020', '01212021201'], [2326250, '\u5728', '\u5b66\u4e60\u57fa\u7840', '\u600e\u6837\u6536\u8d39\uff1f', '\u662f\u7684', '02210111222', '\u662f\u7684'], [2326497, 'java', '\u6ca1\u6709', 'scl01220220111', '\u597d\u7684', '\u55ef', '\u7528\u6237\u5df2\u79bb\u5f00', '\u65b0\u7528\u6237\u63a5\u5165', '\u4f60\u77e5\u9053\u8fd9\u4e2a\u8bfe\u662f\u4e0d\u662f\u4f60\u4eec\u7684\u54ea\u4f4d\u8001\u5e08\u8bb2\u7684\uff1f', '\u6211\u662f\u522b\u7684\u4e0a\u9762\u770b\u5230\u7684', '\u6c34\u5370\u662f\u6c5f\u82cf\u4f20\u667a\u535a\u5ba2\u79d1\u6280\u6709\u9650\u516c\u53f8', '\u6069'], [2326538, '\u8bed\u6587', 'scrapy\u6846\u67b6', '\u6846\u67b62\u57fa\u7840\uff0cpython\u770b\u4e86\u4e00\u70b9', 'QQ', '002112212', '01102222201', '\u6069\uff0c\u8c22\u8c22'], ...] \u7edf\u8ba1\u56fe\u7247\u5bbd-\u9ad8\u5206\u5e03 \u4f46\u67e5\u770b\u5bbd-\u9ad8\u5206\u5e03\u662f\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u4e4b\u540e\u5728\u8f93\u5165\u6a21\u578b\u524d\u9700\u8981\u89c4\u8303\u56fe\u7247\u5c3a\u5bf8\uff0c\u901a\u8fc7\u8be5\u5206\u5e03\uff0c\u53ef\u4ee5\u83b7\u5f97\u6bd4\u8f83\u5408\u9002\u7684\u4e2d\u95f4\u503c\u3002 import seaborn as sns # \u51c6\u5907online\u548coffline\u8def\u5f84\u4e0b\u7684\u56fe\u7247\u540d\u5b57 online_image_path = \"./online/\" online_image_names = os . listdir ( online_image_path ) offline_image_path = \"./offline/\" offline_image_names = os . listdir ( offline_image_path ) # \u521d\u59cb\u5316\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5217\u8868 w_list = [] h_list = [] # \u5bf9\u6240\u6709\u7684\u56fe\u7247\uff08\u5305\u62econline\u548coffline\uff09\u540d\u5b57\u8fdb\u884c\u904d\u5386 for image_name in online_image_names + offline_image_names : # \u8fd9\u91cc\u4f7f\u7528try\u6765\u533a\u5206\u6253\u5f00\u56fe\u7247\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u56fe\u7247\u540d\u5b57\u65e2\u6709online\u53c8\u6709offline # \u5728online\u8def\u5f84\u4e0b\u6253\u5f00\u51fa\u9519\uff0c\u5219\u5728offline\u8def\u5f84\u4e0b\u6253\u5f00 try : im = Image . open ( os . path . join ( online_image_path , image_name )) except : im = Image . open ( os . path . join ( offline_image_path , image_name )) # \u5c06\u6bcf\u5f20\u56fe\u7247\u7684\u5bbd\u9ad8\u5b58\u5165\u5217\u8868 w_list . append ( im . size [ 0 ]) # \u63a5\u4e0b\u6765\u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( w_list ) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . savefig ( \"./w_distribu.png\" ) plt . close () # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( h_list ) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . savefig ( \"./h_distribu.png\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: \u5728/data/ItcastBrain_CV/\u8def\u5f84\u4e0b\u751f\u6210w_distribu.png\u548ch_distribu.png\u4e24\u5f20\u56fe\u7247\u3002 \u5206\u6790: \u4ece\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6240\u6709\u56fe\u7247\u7684\u5bbd\u5ea6\u8303\u56f4\u5927\u6982\u4e3a\uff1a500-2000\uff0c\u5bc6\u5ea6\u8f83\u9ad8\u5728500-1000\u4e4b\u95f4\uff1b\u9ad8\u5ea6\u8303\u56f4\u5927\u6982\u4e3a\uff1a250-2000\uff0c\u5bc6\u5ea6\u8f83\u9ad8\u5728250-750\u4e4b\u95f4\uff0c\u56e0\u6b64\u8f83\u5408\u7406\u7684\u89c4\u8303\u88c1\u526a\u5bbd\u5ea6\u4e3a(500 + 1000)/2 = 750, \u526a\u88c1\u9ad8\u5ea6\u4e3a(250 + 750)/2 = 500\u3002\u8fd9\u5728\u8bad\u7ec3\u524d\u5904\u7406\u65f6\u5c06\u4f1a\u4f7f\u7528\u3002","title":"\u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790"},{"location":"2/#_16","text":"\u968f\u7740\u8fc1\u79fb\u5b66\u4e60\u6280\u672f\u8d8a\u6765\u8d8a\u6210\u719f\uff0c\u6570\u636e\u79ef\u7d2f\u8d8a\u6765\u8d8a\u591a\uff0c\u5927\u578b\u6a21\u578b\u5728\u591a\u6a21\u6001\u9886\u57df\u7684\u8868\u73b0\u8d8a\u6765\u8d8a\u62a2\u773c\u3002\u4ee5VisualBERT\u548cViLBERT\u4e3a\u4ee3\u8868\u7684\u5355\u53cc\u6d41\u6a21\u578b\u662f\u65f6\u4ee3\u4e4b\u661f\uff0c\u5c24\u5176\u5728\u62e5\u6709\u6d77\u91cf\u6570\u636e\u7684\u5de5\u4e1a\u754c\uff0cViLBERT\u5e94\u7528\u66f4\u662f\u5e7f\u6cdb\u3002\u4e0b\u9762\u6211\u4eec\u5c06\u7b80\u5355\u4ecb\u7ecd\u8be5\u6a21\u578b\uff0c\u5e76\u5b9e\u73b0\u5176\u4e2d\u6838\u5fc3\u7684\u5f20\u91cf\u878d\u5408\u65b9\u5f0fCo-Attention\u3002 \u6ce8\uff1a\u56de\u987e Transformer \u4ee5\u53ca faster-RCNN \u5728\u4ecb\u7ecdViLBERT\u4e4b\u524d\u8fd8\u662f\u9700\u8981\u5148\u8bf4\u660eVisualBERT\uff1a \u6a21\u578b\u7684\u4e3b\u8981\u7ed3\u6784\u4e3a\u501f\u52a9\u4e00\u7ec4\u5806\u53e0\u7684transformer encoder\u5c42\uff0c\u901a\u8fc7\u81ea\u6ce8\u610f\u529b\u673a\u5236\u628a\u628a\u8f93\u5165\u4e00\u6bb5\u6587\u672c\u4e2d\u7684\u5143\u7d20\u548c\u4e00\u5f20\u76f8\u5173\u7684\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u533a\u57df\u9690\u5f0f\u5730\u5bf9\u2eec\u8d77\u6765\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5176\u4e2d\u56fe\u50cf\u901a\u8fc7\u68c0\u6d4b\u7684\u65b9\u6cd5\u63d0\u53d6\u76ee\u6807 region\u4f5c\u4e3a\u57fa\u7840\u7684\u89c6\u89c9\u5355\u5143\uff0c\u4e0e\u6587\u672c\u533a\u57df\u8fdb\u884c\u62fc\u63a5\u540e\u4f5c\u4e3atransformer\u7684\u8f93\u5165\u3002 \u4e0e\u4e4b\u76f8\u6bd4\u7684ViLBERT \u53cc\u6d41\u6a21\u578b\u91c7\u7528\u53cc\u6d41\u5904\u7406\u673a\u5236\uff0c\u5bf9\u6587\u672c\u6a21\u6001\u548c\u89c6\u89c9\u6a21\u6001\u5206\u522b\u8fdb\u884c\u5904\u7406\uff0c\u7136\u540e\u91c7\u7528\u4e92\u6ce8\u610f\u529b\u673a\u5236\u5bf9\u89c6\u89c9 \u548c\u6587\u672c\u7684\u67e5\u8be2\u5411\u91cf\u5206\u522b\u8fdb\u884c\u4ea4\u53c9\uff0c\u4e4b\u540e\u5206\u522b\u901a\u8fc7TRM\u5c42\u5f97\u5230\u89c6\u89c9\u6a21\u6001\u548c\u6587\u672c\u6a21\u6001\u7684\u5404\u81ea\u8f93\u51fa\u3002 finetuning\u9636\u6bb5\u5bf9\u4e24\u4e2a\u6a21\u6001\u5206\u522b\u8f93\u51fa\u7684\u5411\u91cf\u91c7\u7528mul\u6216\u8005sum\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba1\u7b97\u3002 \u76f8\u6bd4\u5355\u6d41VisualBERT\u6a21\u578b\uff0c\u53cc\u6d41ViLBERT\u6a21\u578b\u4e3b\u8981\u6709\u4e24\u70b9\u6539\u8fdb: \u5f15\u5165\u4e92\u6ce8\u610f\u529b\u673a\u5236(\u6765\u81ea\u8bba\u6587 Hierarchical Question-Image Co-Attention for Visual Question Answering )\uff0c\u5176\u4e3a\u6a21\u578b\u7684\u6838\u5fc3\u90e8\u5206\uff0c\u76f8\u6bd4\u5355\u7eaf\u7684\u81ea\u6ce8\u610f\u529b\u673a\u5236\uff0c\u4e92\u6ce8\u610f\u529b\u5728\u8fdb\u884c\u8fd0\u7b97\u65f6\u4ea4\u6362\u4e86\u4e24\u79cd\u6a21\u6001self-attention\u8fd0\u7b97\u65f6\u7684K/V\u67e5 \u8be2\u5bf9\uff0c\u8ba9\u4e24\u79cd\u6a21\u6001\u7684\u8fdb\u884c\u5145\u5206\u7684\u5b66\u4e60\uff0c\u662f\u6a21\u6001\u878d\u5408\u7684\u91cd\u8981\u65b9\u6cd5\u3002 \u589e\u52a0\u4e86\u89c6\u89c9\u4f4d\u7f6e\u4fe1\u606f\u8868\u793a\uff0c\u901a\u8fc7\u6784\u5efa\u4e00\u4e2a5\u7ef4\u7684\u6570\u7ec4(\u4ece\u5de6\u4e0a\u2ec6\u5230\u53f3\u4e0b\u2ec6\u7684\u4e24\u7ec4\u5750\u6807+\u6574\u4e2a\u533a\u57df\u7684\u9762\u79ef)\u4f5c\u4e3a\u89c6\u89c9\u4fe1\u606f\u7684\u4f4d\u7f6e\u8868\u793a\u3002 ViLBERT\u4e2dco-attention\u662f\u5c06\u6765\u9762\u8bd5\u548c\u5de5\u4f5c\u5e94\u7528\u7684\u91cd\u70b9 import torch import torch.nn as nn import math class Config : def __init__ ( self ): super () . __init__ () self . bi_num_attention_heads = 12 self . bi_hidden_size = 516 self . v_hidden_size = 516 self . hidden_size = 516 self . v_attention_probs_dropout_prob = 0.2 self . attention_probs_dropout_prob = 0.2 # \u4ea4\u53c9\u81ea\u6ce8\u610f\u529b\u5b50\u5c42 class BertBiAttention ( nn . Module ): def __init__ ( self , config ): super () . __init__ () # \u591a\u5934\u6ce8\u610f\u529b\u673a\u5236\u4e2d\u591a\u5934\u7684\u6570\u91cf self . num_attention_heads = config . bi_num_attention_heads # \u6bcf\u4e2aattention\u5934\u8f93\u51fa\u7684\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u5c3a\u5bf8 # \u5176\u4e2dconfig.bi_hidden_size\u662f\u6307\u5e0c\u671b\u901a\u8fc7bi-attention\u4e4b\u540e\u8f93\u51fa\u7684\u5f20\u91cf\u6700\u540e\u4e00\u7ef4\u7684\u5c3a\u5bf8 # \u56e0\u4e3a\u6700\u540e\u8981\u505a\u201c\u62fc\u63a5\u201d\u64cd\u4f5c\uff0c\u56e0\u6b64\u6bcf\u4e2aattention\u5934\u8f93\u51fa\u7684\u5f20\u91cf\u5c3a\u5bf8\u4e3a\u4e8c\u8005\u7684\u5546 self . attention_head_size = int ( config . bi_hidden_size / config . bi_num_attention_heads ) # \u975e\u7279\u6b8a\u60c5\u51b5\u4e0bself.all_head_size\u4e0econfig.bi_hidden_size\u662f\u76f8\u540c\u7684 # \u4e0d\u8fc7\u4e8c\u8005\u5e94\u7528\u7684\u542b\u4e49\u4e0d\u540c\uff0cself.all_head_size\u662f\u6307QKV\u5168\u8fde\u63a5\u5c42\u7684\u8f93\u51fa\u7ef4\u5ea6 self . all_head_size = self . num_attention_heads * self . attention_head_size # \u89c6\u89c9Q/K/V\u53c2\u6570\u77e9\u9635 # \u6ce8\uff1a\u6309\u7167\u81ea\u6ce8\u610f\u529b\u673a\u5236\u7684\u539f\u7406\uff0c\u4e00\u822cQKV\u53c2\u6570\u77e9\u9635\u90fd\u662f\u65b9\u9635\uff0c # \u5373config.v_hidden_size = self.all_head_size self . query1 = nn . Linear ( config . v_hidden_size , self . all_head_size ) self . key1 = nn . Linear ( config . v_hidden_size , self . all_head_size ) self . value1 = nn . Linear ( config . v_hidden_size , self . all_head_size ) self . dropout1 = nn . Dropout ( config . v_attention_probs_dropout_prob ) # \u6587\u672cQ/K/V\u53c2\u6570\u77e9\u9635 self . query2 = nn . Linear ( config . hidden_size , self . all_head_size ) self . key2 = nn . Linear ( config . hidden_size , self . all_head_size ) self . value2 = nn . Linear ( config . hidden_size , self . all_head_size ) self . dropout2 = nn . Dropout ( config . attention_probs_dropout_prob ) def transpose_for_scores ( self , x ): \"\"\"\u5728\u8fdb\u5165attention\u8ba1\u7b97\u516c\u5f0f\u524d\u9700\u8981\u505a\u4e00\u4e9b\u51c6\u5907 \u9996\u5148\u9700\u8981view\uff0c\u5c06QKV\u5168\u8fde\u63a5\u8f93\u51fa\u7684Q\uff0fK\uff0fV\u6309\u5934\u5206\u5272 \u7136\u540e\u5bf9\u7b2c\u4e8c\u7ef4\u548c\u7b2c\u4e09\u7ef4\u8fdb\u884c\u8f6c\u7f6e\u64cd\u4f5c\uff0c \u4e3a\u4e86\u8ba9\u4ee3\u8868\u53e5\u5b50\u957f\u5ea6\u7ef4\u5ea6\u548c\u8bcd\u5411\u91cf\u7ef4\u5ea6\u80fd\u591f\u76f8\u90bb\uff0c\u8fd9\u6837\u6ce8\u610f\u529b\u673a\u5236\u624d\u80fd\u627e\u5230\u8bcd\u4e49\u4e0e\u53e5\u5b50\u4f4d\u7f6e\u7684\u5173\u7cfb\uff0c \u4eceattention\u51fd\u6570\u4e2d\u53ef\u4ee5\u770b\u5230\uff0c\u5229\u7528\u7684\u662f\u539f\u59cb\u8f93\u5165\u7684\u5012\u6570\u7b2c\u4e00\u548c\u7b2c\u4e8c\u7ef4.\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u6bcf\u4e2a\u5934\u7684\u8f93\u5165. \"\"\" # x\u7684\u6700\u540e\u4e00\u7ef4\u53d8\u6210\u4e24\u7ef4\uff0c\u9700\u4fdd\u8bc1\u6700\u540e\u4e00\u7ef4\u7684size = self.num_attention_heads * self.attention_head_size new_x_shape = x . size ()[: - 1 ] + ( self . num_attention_heads , self . attention_head_size , ) # \u8fd9\u6837\u8f93\u5165\u7684\u4e09\u7ef4\u5f20\u91cf\u53d8\u6210\u4e86\u56db\u7ef4\uff0c\u4ece\u6587\u672c\u89d2\u5ea6\uff0c\u7b2c\u4e8c\u4e3a\u4ee3\u8868\u957f\u5ea6\u5e94\u8be5\u4e0e\u6700\u540e\u4e00\u7ef4\u7684\u8bcd\u5411\u91cf\u76f8\u90bb x = x . view ( new_x_shape ) # \u56e0\u6b64\u5728\u8fd9\u91cc\u5c06\u6587\u672c\u957f\u5ea6\u7ef4\u5ea6\u4e0eattention\u5934\u6570\u7ef4\u5ea6\u8c03\u6362 return x . permute ( 0 , 2 , 1 , 3 ) def forward ( self , input_tensor1 , input_tensor2 ): # \u5bf9\u89c6\u89c9\u8f93\u5165\u8ba1\u7b97\u5411\u91cf mixed_query_layer1 = self . query1 ( input_tensor1 ) mixed_key_layer1 = self . key1 ( input_tensor1 ) mixed_value_layer1 = self . value1 ( input_tensor1 ) query_layer1 = self . transpose_for_scores ( mixed_query_layer1 ) key_layer1 = self . transpose_for_scores ( mixed_key_layer1 ) value_layer1 = self . transpose_for_scores ( mixed_value_layer1 ) # \u5bf9\u6587\u672c\u8f93\u5165\u8ba1\u7b97\u5411\u91cf mixed_query_layer2 = self . query2 ( input_tensor2 ) mixed_key_layer2 = self . key2 ( input_tensor2 ) mixed_value_layer2 = self . value2 ( input_tensor2 ) query_layer2 = self . transpose_for_scores ( mixed_query_layer2 ) key_layer2 = self . transpose_for_scores ( mixed_key_layer2 ) value_layer2 = self . transpose_for_scores ( mixed_value_layer2 ) # attention scores for value 1. \u8fd9\u662f\u5173\u952e\u90e8\u5206\uff0c\u4e3b\u8981\u4e3a\u8ba1\u7b97text query \u548c image \u7684 key\u7684\u7ed3\u679c # \u89c6\u89c9\u7684query \u4e0e\u6587\u672c\u7684Key\u7684\u8f6c\u7f6e\u8fdb\u884c\u4ea4\u53c9 attention_scores1 = torch . matmul ( query_layer2 , key_layer1 . transpose ( - 1 , - 2 )) attention_scores1 = attention_scores1 / math . sqrt ( self . attention_head_size ) # \u901a\u8fc7softmax \u5f52\u4e00\u5316\u5f97\u5206\u6982\u7387 attention_probs1 = nn . functional . softmax ( attention_scores1 , dim =- 1 ) attention_probs1 = self . dropout1 ( attention_probs1 ) # \u5f97\u5230\u7684\u5f52\u4e00\u5316\u6982\u7387\u4e0e\u6587\u672cvalue\u8fdb\u884c\u8fd0\u7b97\u5f97\u5230context_layer context_layer1 = torch . matmul ( attention_probs1 , value_layer1 ) # \u53d8\u6362\u6210\u539f\u6765\u7684\u7ef4\u5ea6\u4ee5\u53ca\u5bf9\u5e94\u7684\u542b\u4e49 context_layer1 = context_layer1 . permute ( 0 , 2 , 1 , 3 ) . contiguous () new_context_layer_shape1 = context_layer1 . size ()[: - 2 ] + ( self . all_head_size ,) context_layer1 = context_layer1 . view ( new_context_layer_shape1 ) # \u6587\u672c\u7684query\u4e0e\u89c6\u89c9\u7684key \u8fdb\u884c\u8fd0\u7b97\uff0c\u8fd0\u7b97\u65b9\u5f0f\u4e0e\u4e0a\u9762\u76f8\u540c attention_scores2 = torch . matmul ( query_layer1 , key_layer2 . transpose ( - 1 , - 2 )) attention_scores2 = attention_scores2 / math . sqrt ( self . attention_head_size ) # Normalize attention_probs2 = nn . functional . softmax ( attention_scores2 , dim =- 1 ) attention_probs2 = self . dropout2 ( attention_probs2 ) context_layer2 = torch . matmul ( attention_probs2 , value_layer2 ) # \u53d8\u6362\u6210\u539f\u6765\u7684\u7ef4\u5ea6\u4ee5\u53ca\u5bf9\u5e94\u7684\u542b\u4e49 context_layer2 = context_layer2 . permute ( 0 , 2 , 1 , 3 ) . contiguous () new_context_layer_shape2 = context_layer2 . size ()[: - 2 ] + ( self . all_head_size ,) context_layer2 = context_layer2 . view ( new_context_layer_shape2 ) attn_data = { \"attn1\" : attention_probs1 , \"queries1\" : query_layer2 , \"keys1\" : key_layer1 , \"attn2\" : attention_probs2 , \"querues2\" : query_layer1 , \"keys2\" : key_layer2 , } # context_layer1, context_layer2 is for text and vision return context_layer1 , context_layer2 , attn_data if __name__ == \"__main__\" : config = Config () biattention = BertBiAttention ( config ) input_tensor1 = torch . rand ( 1 , 10 , 516 ) input_tensor2 = torch . rand ( 1 , 10 , 516 ) context_layer1 , context_layer2 , attn_data = biattention ( input_tensor1 , input_tensor2 ) print ( context_layer1 , context_layer1 . shape ) print ( context_layer2 , context_layer2 . shape ) \u8f93\u51fa\u6548\u679c: tensor ([[[ - 9.6074e-02 , - 8.1292e-02 , - 1.7113e-01 , ... , 1.8071e-01 , 3.1835e-01 , 7.8117e-02 ], [ - 9.4354e-02 , - 8.3363e-02 , - 1.5782e-01 , ... , 2.0677e-01 , 3.5806e-01 , 1.2813e-01 ], [ - 6.2287e-02 , 2.4098e-04 , - 1.2370e-01 , ... , 1.9457e-01 , 3.7959e-01 , 1.0256e-01 ], ... , [ - 1.1077e-01 , - 3.9221e-02 , - 1.8073e-01 , ... , 2.3376e-01 , 3.9866e-01 , 1.1799e-01 ], [ - 1.1786e-01 , - 2.9357e-02 , - 1.9034e-01 , ... , 2.3433e-01 , 3.9668e-01 , 1.1613e-01 ], [ - 1.1233e-01 , 1.0437e-03 , - 9.6470e-02 , ... , 2.3463e-01 , 3.9997e-01 , 1.1814e-01 ]]], grad_fn =< ViewBackward > ) torch . Size ([ 1 , 10 , 516 ]) tensor ([[[ - 0.2471 , 0.0176 , 0.0424 , ... , 0.3034 , - 0.2601 , - 0.2893 ], [ - 0.2232 , 0.0199 , 0.0218 , ... , 0.1760 , - 0.1642 , - 0.1626 ], [ - 0.2953 , 0.0326 , 0.0608 , ... , 0.2543 , - 0.2102 , - 0.2610 ], ... , [ - 0.2469 , 0.0377 , 0.0494 , ... , 0.3083 , - 0.2558 , - 0.2803 ], [ - 0.2957 , 0.0297 , 0.0630 , ... , 0.3144 , - 0.2671 , - 0.3090 ], [ - 0.2354 , 0.0436 , 0.0457 , ... , 0.1931 , - 0.2148 , - 0.2196 ]]], grad_fn =< ViewBackward > ) torch . Size ([ 1 , 10 , 516 ]) \u8bf4\u660e: co-attention(bi-attention)\u662f\u975e\u5e38\u91cd\u8981\u7684\u7279\u5f81\u878d\u5408\u65b9\u5f0f\uff0c\u5b83\u4e0d\u4ec5\u53ef\u4ee5\u5e94\u7528\u5728\u591a\u6a21\u6001\u9886\u57df\uff0c\u5373\u4f7f\u662f\u540c\u6a21\u6001\u7684\u4e0d\u540c\u7c7b\u578b\u8f93\u5165\u4ecd\u7136\u6709\u4e0d\u9519\u7684\u8868\u73b0\u3002 \u5173\u4e8eattention\u7684\u4f18\u5316\uff1a \u65e0\u8bba\u662fco-attention\u8fd8\u662fself-attention\u90fd\u662fN\u65b9\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff08\u77e9\u9635\u4e58\u6cd5\uff09\uff0c\u56e0\u6b64\u5f53\u6211\u4eec\u7684\u8f93\u5165\u5f20\u91cf\u8f83\u5927\u65f6\uff0c\u663e\u5b58\u7684\u5360\u7528\u548c\u8ba1\u7b97\u6027\u80fd\u90fd\u662f\u6307\u6570\u589e\u957f\u7684\uff1b \u56e0\u6b64\u5bf9\u4e8eattention\u7684\u64cd\u4f5c\u4ea7\u751f\u4e86\u4e00\u4e9b\u5217\u7684\u4f18\u5316\u624b\u6bb5\uff0c\u4ece\u601d\u60f3\u4e0a\u53ef\u4ee5\u5212\u5206\u4e3a\u56db\u4e2a\u7c7b\u522b\uff1a \u5206\u5757\u601d\u60f3\uff08chunk\uff09: \u5c06\u539f\u6709\u7684token\u8fdb\u884c\u5206\u5757\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u6c60\u5316\uff0c\u539f\u6765NxN\u53d8\u6210\u4e86BxB\uff0cB\u8fdc\u5c0f\u4e8eN\uff1b \u7a00\u91ca\u5316\u601d\u60f3\uff1a\u4ee5\u4e00\u5b9a\u7684\u89c4\u5f8b\u5bf9N\u8fdb\u884c\u4e0b\u91c7\u6837\uff0c\u53ea\u7559\u4e0bK\u4e2a\uff0cK\u8fdc\u5c0f\u4e8eN\uff1b \u6570\u5b66\u538b\u7f29\u601d\u60f3\uff1a\u4f7f\u7528\u77e9\u9635\u5206\u89e3\u6216\u6838\u51fd\u6570\u6620\u5c04\u5c06N\u51cf\u5c0f\u518d\u505aattention\uff1b \u53ef\u5b66\u4e60\u601d\u60f3\uff1a\u5728\u4e4b\u524d\u7684\u601d\u60f3\u65b9\u6cd5\u4e0a\u5f15\u5165\u8bad\u7ec3\u53c2\u6570\uff0c\u5728\u5b66\u4e60\u4e2d\u8c03\u8282\u63a7\u5236N\u7684\u7f29\u5c0f\u8303\u56f4\u3002 \u5206\u5757\u601d\u60f3\uff08chunk\uff09\u8be6\u89e3\uff1a \u4ee5NLP\u4e3a\u4f8b\uff0c\u5c06\u539f\u6765\u5355\u5b57\u5bf9\u5355\u5b57\u7684\u4e00\u4e00\u5bf9\u5e94\uff0c\u53d8\u6210\u7684\u591a\u4e2a\u5b57\u5bf9\u591a\u4e2a\u5b57\u7684\u4e00\u4e00\u5bf9\u5e94\uff0c\u5757\u4e2d\u7684\u6240\u6709\u5b57\u7684\u5bf9\u5e94\u5206\u503c\u4e00\u81f4\u5171\u4eab\u3002 \u5173\u4e8e\u5982\u4f55\u53bb\u5206\u5757\uff0c\u6bcf\u4e2a\u5757\u7684\u8868\u793a\u5f20\u91cf\u662f\u5426\u53ea\u80fd\u4e3a\u5747\u503c\uff0c\u8fd9\u90fd\u662f\u53ef\u4ee5\u8fdb\u884c\u6539\u8fdb\u7684\u70b9\u3002 \u4f7f\u7528\u6c60\u5316\u5b9e\u73b0\u5206\u5757\uff1a ... # \u5bf9\u6587\u672c\u8f93\u5165\u8ba1\u7b97\u5411\u91cf mixed_query_layer2 = self . query2 ( input_tensor2 ) mixed_key_layer2 = self . key2 ( input_tensor2 ) mixed_value_layer2 = self . value2 ( input_tensor2 ) query_layer2 = self . transpose_for_scores ( mixed_query_layer2 ) key_layer2 = self . transpose_for_scores ( mixed_key_layer2 ) value_layer2 = self . transpose_for_scores ( mixed_value_layer2 ) # attention scores for value 1. \u8fd9\u662f\u5173\u952e\u90e8\u5206\uff0c\u4e3b\u8981\u4e3a\u8ba1\u7b97text query \u548c image \u7684 key\u7684\u7ed3\u679c # \u89c6\u89c9\u7684query \u4e0e\u6587\u672c\u7684Key\u7684\u8f6c\u7f6e\u8fdb\u884c\u4ea4\u53c9 # \u5bf9query_layer2\u548ckey_layer1\u8fdb\u884cchunk\u6216\u8005\u7a00\u758f\u5316\u83b7\u5f97\u5c0f\u77e9\u9635\uff0c\u4ee5\u964d\u4f4e\u8ba1\u7b97\u590d\u6742\u5ea6 # AvgPool2d\u4ee3\u8868\u5bf9\u6700\u540e\u4e24\u7ef4\u8fdb\u884c\u6c60\u5316\u64cd\u4f5c\uff0c\u5b83\u7684\u5b9e\u4f8b\u5316\u8f93\u5165\u662f\u56db\u7ef4\u5f20\u91cf # \u5176\u4e2d\u7684\u53c2\u6570\u4ee3\u8868\u6c60\u5316\u64cd\u4f5c\u7684chunk\u5927\u5c0f\uff0c\u5b83\u662f\u4e00\u4e2a\u5143\u7ec4\uff0c # \u7b2c\u4e00\u4e2a2\u4ee3\u8868\u4e24\u201c\u5217\u201d\u76f8\u52a0\u6c42\u5e73\u5747\uff0c\u7b2c\u4e8c\u4e2a1\u4ee3\u88681\u201c\u884c\u201d\u64cd\u4f5c\u5373\u884c\u4e0a\u6570\u503c\u4e0d\u53d8 m = nn . AvgPool2d (( 2 , 1 )) query_layer2 = m ( query_layer2 ) key_layer1 = m ( key_layer1 ) query_layer1 = m ( query_layer1 ) key_layer2 = m ( key_layer2 ) ############# attention_scores1 = torch . matmul ( query_layer2 , key_layer1 . transpose ( - 1 , - 2 )) attention_scores1 = attention_scores1 / math . sqrt ( self . attention_head_size ) # \u901a\u8fc7softmax \u5f52\u4e00\u5316\u5f97\u5206\u6982\u7387\u5373\u6ce8\u610f\u529b\u77e9\u9635 attention_probs1 = nn . functional . softmax ( attention_scores1 , dim =- 1 ) attention_probs1 = self . dropout1 ( attention_probs1 ) # \u8fd9\u91cc\u5bf9\u6ce8\u610f\u529b\u77e9\u9635\u7684\u7ef4\u5ea6\u8fdb\u884c\u8fd8\u539f\uff0c\u4f7f\u5176\u80fd\u591f\u6ee1\u8db3\u4e0b\u9762\u7684\u8ba1\u7b97\u8981\u6c42 temp = torch . cat ([ attention_probs1 , attention_probs1 ], dim =- 1 ) attention_probs1 = torch . cat ([ temp , temp ], dim =- 2 ) ############# # \u5f97\u5230\u7684\u5f52\u4e00\u5316\u6982\u7387\u4e0e\u6587\u672cvalue\u8fdb\u884c\u8fd0\u7b97\u5f97\u5230context_layer context_layer1 = torch . matmul ( attention_probs1 , value_layer1 ) # \u53d8\u6362\u6210\u539f\u6765\u7684\u7ef4\u5ea6\u4ee5\u53ca\u5bf9\u5e94\u7684\u542b\u4e49 context_layer1 = context_layer1 . permute ( 0 , 2 , 1 , 3 ) . contiguous () new_context_layer_shape1 = context_layer1 . size ()[: - 2 ] + ( self . all_head_size ,) context_layer1 = context_layer1 . view ( new_context_layer_shape1 ) # \u6587\u672c\u7684query\u4e0e\u89c6\u89c9\u7684key \u8fdb\u884c\u8fd0\u7b97\uff0c\u8fd0\u7b97\u65b9\u5f0f\u4e0e\u4e0a\u9762\u76f8\u540c attention_scores2 = torch . matmul ( query_layer1 , key_layer2 . transpose ( - 1 , - 2 )) attention_scores2 = attention_scores2 / math . sqrt ( self . attention_head_size ) attention_probs2 = nn . functional . softmax ( attention_scores2 , dim =- 1 ) attention_probs2 = self . dropout2 ( attention_probs2 ) # \u8fd9\u91cc\u5bf9\u6ce8\u610f\u529b\u77e9\u9635\u7684\u7ef4\u5ea6\u8fdb\u884c\u8fd8\u539f\uff0c\u4f7f\u5176\u80fd\u591f\u6ee1\u8db3\u4e0b\u9762\u7684\u8ba1\u7b97\u8981\u6c42 temp = torch . cat ([ attention_probs2 , attention_probs2 ], dim =- 1 ) attention_probs2 = torch . cat ([ temp , temp ], dim =- 2 ) context_layer2 = torch . matmul ( attention_probs2 , value_layer2 ) ... \u5927\u5bb6\u53ef\u4ee5\u52a8\u624b\u5728\u81ea\u5df1\u7684co-attention.py\u6587\u4ef6\u4e2d\u8bd5\u4e00\u8bd5\u3002 \u7a00\u758f\u5316\u601d\u60f3\u8be6\u89e3\uff1a \u7a00\u758f\u5316\u662f\u66f4\u52a0\u7075\u6d3b\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u4ee5\u4e00\u5b9a\u7684\u65b9\u5f0f\u5c06\u8f93\u5165\u7684Q/K\u8fdb\u884c\u7a00\u758f\u5316\uff0c\u6765\u5ffd\u7565\u90e8\u5206\u4fe1\u606f\u4ee5\u7b80\u5316\u8ba1\u7b97\u3002 \u6211\u4eec\u53ef\u4ee5\u5728chunk\u7684\u57fa\u7840\u4e0a\u6765\u5b9e\u73b0\u7a00\u758f\u5316\uff0c\u5728\u5206\u5272\u5b8cchunk\u4e4b\u540e\uff0c\u968f\u673a\u5728\u6bcf\u4e2achunk\u4e2d\u9009\u62e9\u4e00\u4e2a\u5f20\u91cf\u4ee3\u8868chunk\u5f20\u91cf\uff0c\u800c\u5176\u4ed6\u5f20\u91cf\u90fd\u7a00\u758f\u6389\u3002 \u4e0b\u9762\u5927\u5bb6\u6309\u7167\u4e0a\u8ff0\u63cf\u8ff0\uff0c\u6211\u4eec\u5047\u5b9a\u76f4\u63a5\u9009\u62e9\u7b2c\u4e00\u4e2a\u5f20\u91cf\u4f5c\u4e3achunk\u5f20\u91cf\uff08\u800c\u4e0d\u662f\u968f\u673a\uff09\u6765\u81ea\u5df1\u5b9e\u73b0attention\u7684\u7a00\u758f\u5316\u3002 \u6539\u8fdb\u4f18\u5316\u8fc7\u7a0b\u662fAI\u5de5\u7a0b\u5e08\u5728\u5de5\u4f5c\u4e2d\u9700\u8981\u638c\u63e1\u7684\u6280\u80fd\uff0c\u4e5f\u662f\u4e3a\u6570\u4e0d\u591a\u7684\u4ee3\u7801\u8fc7\u7a0b\u3002 def sparsification ( input_ , chunks = 2 ): ... return output \u4e00\u822c\u60c5\u51b5\u4e0bchunk\u6216\u7a00\u758f\u5316\u5bf9attention\u7684\u4f18\u5316\u6548\u679c\uff1a \u5728ViLBERT\u4e2d\u53e6\u4e00\u4e2a\u5177\u6709\u521b\u65b0\u601d\u60f3\u7684\u5730\u65b9\u5c31\u662f\u5728\u56fe\u50cf\u7279\u5f81\u7684\u5904\u7406\u4e0a\uff1a \u4e0e\u6700\u539f\u59cb\u7684GRU-Resnet\u6a21\u578b\u76f8\u6bd4\uff0c\u6ca1\u6709\u4f7f\u7528Resnet\u4e3b\u5e72\u7f51\u7edc\u4ee5\u5206\u7c7b\u7684\u89c6\u89d2\u63d0\u53d6\u7279\u5f81\uff0c\u800c\u662f\u4f7f\u7528faster-RCNN\u4ee5\u76ee\u6807\u68c0\u6d4b\u7684\u89c6\u89d2\u63d0\u53d6\u7279\u5f81\u3002 \u7406\u8bba\u4e0a\uff0c\u76ee\u6807\u68c0\u6d4b\u662f\u5206\u7c7b\u7684\u9ad8\u9636\u4efb\u52a1\uff08\u76ee\u6807\u68c0\u6d4b\u8fc7\u7a0b\u4e00\u5b9a\u5b58\u5728\u5206\u7c7b\u8fc7\u7a0b\uff09\uff0c\u56e0\u6b64\u8fd9\u662f\u5229\u7528\u4e86\u66f4\u591a\u4e14\u66f4\u9ad8\u7ef4\u5ea6\u7684\u56fe\u50cf\u4fe1\u606f\uff0c\u6548\u679c\u4e5f\u81ea\u7136\u6bd4\u5355\u7eaf\u4f7f\u7528\u5206\u7c7b\u7279\u5f81\u66f4\u597d\u3002 ViLBERT\u4e2d\u56fe\u50cf\u4fa7\uff08\u4f7f\u7528\u76ee\u6807\u68c0\u6d4b\uff09\u7684\u6570\u636e\u5f62\u5f0f\uff1a \u540c\u6837\u9700\u8981\u548cGRU-Resnet\u6a21\u578b\u4e00\u6837\u7684jsonl\u6570\u636e\u4ee5\u53ca\u56fe\u7247\u96c6 { \"id\" : 76432 , \"img\" : \"img/76432.png\" , \"label\" : 0 , \"text\" : \"you thinking what i'm thinking?\" } \u8fd8\u9700\u8981\u901a\u8fc7\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u83b7\u5f97\u7684\u4e00\u7cfb\u5217\u7279\u5f81\uff0c\u5b83\u4eec\u4e00\u822c\u88ab\u5b58\u50a8\u5728npy\u6587\u4ef6\u4e2d\uff0c\u6211\u4eec\u6709\u4e24\u79cd\u7c7b\u578b\u7684npy\u6587\u4ef6 # \u7b2c\u4e00\u79cd\u7c7b\u578b\u7684npy\u662fimage_info.npy\uff0c\u4ee3\u8868\u56fe\u7247\u7684\u76ee\u6807\u68c0\u6d4b\u4fe1\u606f # \u89e3\u6790npy\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528\uff1a # info_ = np.load('76432_info.npy',allow_pickle=True) # image_info.npy\u91cc\u9762\u5b58\u653e\u7684\u662f # bbox\u5750\u6807\uff1a\u6bcf\u4e2a\u5750\u6807\u662f\u4e00\u4e2a\u56db\u5143\u7d20\u5411\u91cf # num_box \uff1a\u5750\u6807\u6846\u4e2a\u6570 # objects \uff1a\u6240\u5c5e\u7c7b\u522b # cls_prob: \u6bcf\u4e2a\u7c7b\u522b\u7684\u6982\u7387 # image_width/image_height\uff1a\u56fe\u7247\u539f\u59cb\u5bbd\u9ad8 array ({ 'bbox' : array ([[ 365.44653 , 35.541267 , 468.72 , 217.1971 ], [ 194.42055 , 35.909794 , 351.08777 , 314.9061 ], [ 216.342 , 43.642258 , 311.2393 , 139.60973 ], ..... [ 0. , 313.16983 , 96.897736 , 340.57376 ]], dtype = float32 ), 'num_boxes' : 100 , 'objects' : array ([ 119 , 90 , 119 , 137 , 90 , 106 , 90 , 90 , 119 , 440 , 200 , 90 , 119 , 231 , 137 , 119 , 90 , 231 , 237 , 183 , 90 , 181 , 51 , 119 , 119 , 106 , 137 , 266 , 453 , 106 , 334 , 181 , 241 , 181 , 98 , 137 , 266 , 90 , 136 , 119 , 181 , 52 , 137 , 237 , 453 , 727 , 327 , 90 , 51 , 137 , 628 , 181 , 47 , 137 , 237 , 237 , 51 , 200 , 1496 , 440 , 914 , 320 , 200 , 191 , 90 , 90 , 241 , 106 , 303 , 106 , 914 , 183 , 440 , 334 , 181 , 200 , 440 , 128 , 119 , 51 , 440 , 727 , 440 , 182 , 177 , 453 , 303 , 372 , 224 , 453 , 727 , 51 , 52 , 1516 , 51 , 237 , 119 , 372 , 782 , 106 ]), 'cls_prob' : array ([[ 8.20921713e-08 , 5.90938498e-07 , 2.53067469e-07 , ... , 2.59500416e-06 , 4.59596180e-07 , 1.48048301e-07 ], [ 1.89194402e-08 , 2.39286322e-07 , 1.47415520e-07 , ... , 2.33098149e-07 , 1.78933334e-07 , 8.93831285e-08 ], [ 2.49065721e-07 , 5.19247521e-07 , 1.03184175e-06 , ... , 1.71378406e-06 , 1.22604717e-06 , 2.90146431e-07 ], ... , [ 1.64925495e-07 , 2.25859822e-07 , 2.40710079e-07 , ... , 2.73545038e-06 , 2.57280021e-06 , 1.69157474e-07 ], [ 6.30991678e-07 , 1.99194142e-06 , 1.54376630e-06 , ... , 1.69531131e-06 , 8.84776000e-06 , 6.95318533e-07 ], [ 2.81311344e-07 , 3.06193442e-07 , 3.47593368e-06 , ... , 1.25339099e-07 , 1.11896015e-05 , 6.61107947e-07 ]], dtype = float32 ), 'image_width' : 512 , 'image_height' : 341 }, dtype = object ) # \u7b2c\u4e8c\u79cd\u7c7b\u578b\u7684npy\u662fimage.npy\uff0c\u5b58\u653e\u7684\u662f\u6bcf\u4e2abbox\u4e2d\u56fe\u50cf\u7684\u9ad8\u9636\u5f20\u91cf\u8868\u793a\uff0c\u5373\u901a\u8fc7faster-RCNN\u4e3b\u5e72\u7f51\uff08Resnet\uff09\u4e4b\u540e\u7684embedding\uff0c\u4e00\u822c\u662f2048\u7ef4\u3002 info = np . load ( '76432.npy' , allow_pickle = True ) info . shape ( 100 , 2048 ) \u4ee5\u4e0a\u6570\u636e\u6765\u81eaCV\u56e2\u961f\u63d0\u4f9b\u7684\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u8f93\u51fa\u3002\u5173\u4e8e\u5982\u4f55\u4f7f\u7528faster-RCNN\u83b7\u53d6\u8fd9\u4e9b\u56fe\u50cf\u7279\u5f81\u5728\u8fd9\u91cc\u4e0d\u8be6\u7ec6\u4ecb\u7ecd\u3002 ViLBERT\u5982\u4f55\u5229\u7528\u8fd9\u4e9b\u4fe1\u606f\u8fdb\u884c\u56fe\u50cf\u4fa7\u7279\u5f81\u6784\u5efa\uff1a \u6211\u4eec\u5c06\u4ece\u6e90\u7801\u4e2d\u622a\u53d6ViLBERT\u7c7b\u4e2d\u7684\u91cd\u70b9\u5185\u5bb9\u8bb2\u89e3\u3002 class ViLBERT ( nn . Module ): def __init__ ( self , config ): super () . __init__ () self . config = config self . training_head_type = self . config . training_head_type self . build () @classmethod def config_path ( cls ): return \"configs/models/vilbert/pretrain.yaml\" # \u52a0\u8f7d\u6a21\u578b\u53c2\u6570 def load_state_dict ( self , state_dict , * args , ** kwargs ): copied_state_dict = deepcopy ( state_dict ) # \u5bf9\u4e8ecopied_state_dict\u4e2d\u7684\u6240\u6709keys\u52a0\u8f7d\u53c2\u6570\u8bcd\u5178 for key in list ( copied_state_dict . keys ()): formatted_key = self . format_state_key ( key ) copied_state_dict [ formatted_key ] = copied_state_dict . pop ( key ) return super () . load_state_dict ( copied_state_dict , * args , ** kwargs ) # \u9884\u8bad\u7ec3\u6a21\u578b\u52a0\u8f7d @classmethod def from_pretrained ( cls , checkpoint , config ): # \u7c7b\u8d4b\u503c cls = ViLBERT instance = cls ( config ) instance . is_pretrained = True # \u7c7b\u6784\u5efa instance . build () with PathManager . open ( checkpoint , \"rb\" ) as f : checkpoint = torch . load ( f , map_location = lambda storage , loc : # \u52a0\u8f7d\u72b6\u6001\u53c2\u6570 incompatible_keys = instance . load_state_dict ( checkpoint , strict = False ) # The model has loaded, reset the state # registry.register(\"config\", config_temp_holder) # \u5982\u679c\u53c2\u6570keys\u7f3a\u5931\u62a5\u9519 if len ( incompatible_keys . missing_keys ) != 0 : print ( f \"Missing keys {incompatible_keys.missing_keys} in the\" + \" checkpoint. \\n \" + \"If this is not your checkpoint, please open up an \" + f \"Unexpected keys if any:{incompatible_keys.unexpected_keys}\" ) # \u5982\u679c\u53c2\u6570keys\u5f02\u5e38 if len ( incompatible_keys . unexpected_keys ) != 0 : print ( \"Unexpected keys in state dict\" ) instance . eval () # \u8fd4\u56de\u7c7b\u5b9e\u4f8b return instance def build ( self ): if self . config . training_head_type == \"pretraining\" : # \u52a0\u8f7d\u9884\u8bad\u7ec3\u6a21\u578b self . model = ViLBERTForPretraining ( self . config ) else : # \u52a0\u8f7dfintune\u5206\u7c7b\u6a21\u578b self . model = ViLBERTForClassification ( self . config . model_config . vilbert ) if getattr ( self . config , \"freeze_base\" , False ): for p in self . model . bert . parameters (): p . requires_grad = False # \u6784\u5efa\u56fe\u6587\u8f93\u5165\u7279\u5f81 def get_image_and_text_features ( self , sample_list ): bert_input_ids = sample_list . input_ids bert_input_mask = sample_list . input_mask bert_input_type_ids = sample_list . segment_ids # \u56fe\u50cf\u7279\u5f81\u4fe1\u606f\u6784\u5efa # sample_list\u662f\u4e4b\u524d\u7684\u6784\u5efa\u7684\u6570\u636e\u7c7b\uff0c\u7c7b\u4e2d\u7684\u5c5e\u6027\u5305\u62ecimage_info\uff0cimage_labels\uff0cimage_feature\u7b49 # \u901a\u8fc7getattr\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u7c7b\u4e2d\u7684\u5c5e\u6027\u96c6\u5408 image_info = getattr ( sample_list , \"image_info_0\" , {}) # \u56fe\u50cf\u7279\u5f81\u6846\u7684\u6570\u76ee image_dim_variable = getattr ( image_info , \"max_features\" , None ) # \u6bcf\u4e00\u4e2a\u6846\u7684embedding\u7279\u5f81 image_feature_variable = getattr ( sample_list , \"image_feature_0\" , # \u68c0\u6d4b\u7684\u5206\u7c7b\u7ed3\u679c image_label_variable = getattr ( sample_list , \"image_labels\" , None ) # \u6bcf\u4e00\u4e2a\u5206\u7c7b\u7684\u7279\u5f81\u6982\u7387 cls_prob = getattr ( image_info , \"cls_prob\" , None ) # 5D\u7684bbox\u5750\u6807 # \u7b2c5D\u662f\u6839\u636e\u5bf9\u89d2\u5750\u6807\u503c\u8ba1\u7b97\u5f97\u5230\u7684\u533a\u57df\u9762\u79ef # [x1, y1, x2, y2]\uff0c\u5219region = (x2 - x1) * (y2 - y1) image_location_variable = getattr ( image_info , \"bbox\" , None ) # \u56fe\u50cf\u7684\u5206\u7c7b\u7ed3\u679c\u8f6c\u5316\u4e3atensor image_target = np . array ( cls_prob , dtype = np . float32 ) image_target_variable = torch . tensor ( image_target , dtype = torch . float , device = bert_input_ids . device ) return { \"input_ids\" : bert_input_ids , \"attention_mask\" : bert_input_mask , \"token_type_ids\" : bert_input_type_ids , \"image_dim\" : image_dim_variable , \"image_feature\" : image_feature_variable , \"image_location\" : image_location_variable , \"image_target\" : image_target_variable , \"image_label\" : image_label_variable , } \u4ee5\u4e0a\u5c31\u662f\u6587\u672c\u548c\u56fe\u50cf\u8fdb\u884cViLBERT\u6a21\u578b\u524d\u7684\u6240\u6709\u539f\u59cb\u4fe1\u606f\uff0c\u4e4b\u540e\u5b83\u4eec\u5c06\u901a\u8fc7\u5404\u81ea\u7684Transformer encoder\u8fdb\u884c\u7279\u5f81\u63d0\u53d6\uff0c\u518d\u4f7f\u7528\u4e4b\u524d\u6211\u4eec\u5b66\u4e60\u7684co-attention\u8fdb\u884c\u7279\u5f81\u878d\u5408\uff0c\u6700\u540e\u8f93\u51fa\u7ed9\u5206\u7c7b\u5c42\u3002 \u6709\u4e86ViLBERT\u6a21\u578b\uff0c\u5bf9\u5176\u8fdb\u884c\u8bad\u7ec3\u7684\u8fc7\u7a0b\u4e0e\u4e4b\u524d\u5b66\u7684\u6a21\u578b\u8fc7\u7a0b\u7c7b\u4f3c\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8fc7\u591a\u8bb2\u89e3\uff08\u6240\u6709\u7684\u6e90\u7801\u5c06\u4ee5\u4ee3\u7801\u5305\u7684\u5f62\u5f0f\u7ed9\u5230\u540c\u5b66\u4eec\uff09\uff0c\u4f46\u9664\u4e86\u57fa\u7840\u7684\u8bad\u7ec3\u8fc7\u7a0b\uff0c\u5de5\u4e1a\u754c\u7684\u5927\u578b\u6a21\u578b\u8bad\u7ec3\u5f80\u5f80\u548c\u5206\u5e03\u5f0f\u6709\u5173\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u8fd9\u91cc\u4e3a\u5927\u5bb6\u4ecb\u7ecd\u5e38\u89c1\u7684 \u5206\u5e03\u5f0f\u5b9e\u8df5 \u3002 \u9664\u4e86\u80fd\u591f\u5229\u7528\u5206\u5e03\u5f0f\u6765\u52a0\u901f\u6a21\u578b\u7684\u8bad\u7ec3\u6548\u7387\uff0c\u5173\u4e8e\u7684\u6a21\u578b\u7684\u6548\u679c\u63d0\u5347\u8fd8\u6709\u4e00\u79cd\u66f4\u52a0\u901a\u7528\u7684\u65b9\u6cd5\uff0c\u5c31\u662f\uff1a\u6570\u636e\u589e\u5f3a\u3002 \u4ec0\u4e48\u662f\u6570\u636e\u589e\u5f3a\u4ee5\u53ca\u4f5c\u7528\uff1a \u4ee5\u73b0\u6709\u6807\u6ce8\u6570\u636e\u4e3a\u57fa\u7840\uff0c\u901a\u8fc7\u5408\u7406\u7684\u65b9\u5f0f\uff08\u6a21\u62df\u66f4\u591a\u7684\u5b9e\u9645\u53ef\u80fd\u6027\uff09\u6765\u589e\u52a0\u6837\u672c\u7684\u6570\u91cf\uff0c\u4f7f\u5f97\u6a21\u578b\u83b7\u5f97\u66f4\u591a\u7684\u8bad\u7ec3\u548c\u9a8c\u8bc1\u96c6\uff0c\u5177\u5907\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b\u3002 \u5927\u5bb6\u53ef\u4ee5\u4e00\u8d77\u56de\u987e\u4e00\u4e0b\u6587\u672c\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff0cEDA\uff0c\u56de\u8bd1\u589e\u5f3a\u7b49\u3002\u90a3\u56fe\u50cf\u7684\u6570\u636e\u589e\u5f3a\u53c8\u6709\u54ea\u4e9b\u5462\uff1f\u79cd\u7c7b\u7684\u975e\u5e38\u4e4b\u591a\uff0c\u6211\u4eec\u4eca\u5929\u5c06\u7740\u91cd\u4ecb\u7ecd\u4e1a\u754c\u5e38\u4f7f\u7528\u7684 \u56fe\u50cf\u589e\u5f3a\u5de5\u5177Albumentations \uff0c\u5e76\u7740\u91cd\u5b9e\u73b0\u5728\u672c\u9879\u76ee\u4e2d\u9488\u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u3002","title":"\u7b2c\u4e8c\u6b65\uff1a\u8fdb\u884c\u6a21\u578b\u8bc6\u522b\u90e8\u5206\u5206\u6790"},{"location":"2/#flask","text":"\u4f7f\u7528flask\u90e8\u7f72\u6a21\u578b\u670d\u52a1 \u66f4\u591a \u7b97\u6cd5\u5de5\u7a0b\u5316\u8be6\u89e3","title":"\u7b2c\u4e09\u6b65: \u4f7f\u7528flask\u90e8\u7f72\u6a21\u578b\u670d\u52a1"},{"location":"3/","text":"\u5b66\u4e60\u76ee\u6807 \u638c\u63e1\u56fe\u50cf\u6570\u636e\u589e\u5f3a\u5de5\u5177Albumentations\u7684\u201c\u80fd\u529b\u201d\u3002 \u638c\u63e1\u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u6570\u636e\u589e\u5f3a\u7684\u5b9e\u73b0\u3002 Albumentations\u7b80\u4ecb \u6574\u5408\u4e8670+\u79cd\u56fe\u50cf\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff0c\u9488\u5bf9\u5404\u79cdCV\u5e38\u89c4\u4efb\u52a1\uff0c\u5982\u5206\u7c7b\uff0c\u76ee\u6807\u68c0\u6d4b\uff0c\u8bed\u4e49\u5206\u5272\u7b49\u7684\u6570\u636e\u589e\u5f3a\uff0c\u5728\u4e1a\u754c\uff0c\u79d1\u5b66\u7ade\u8d5b\uff0c\u79d1\u7814\u4e2d\u7684\u90fd\u6709\u5f88\u5927\u7a0b\u5ea6\u7684\u5e94\u7528\u3002 Albumentations\u7684\u589e\u5f3a\u80fd\u529b \u50cf\u7d20\u7ea7\u53d8\u6362 \u7a7a\u95f4\u7ea7\u53d8\u6362 \u50cf\u7d20\u7ea7\u53d8\u6362\uff1a Blur\uff08\u6a21\u7cca\u5316\uff09 CLAHE\uff08\u5bf9\u6bd4\u5ea6\u5747\u8861\u5316\uff09 ChannelDropout\uff08\u989c\u8272\u901a\u9053\u7f6e0\uff09 ChannelShuffle\uff08\u989c\u8272\u901a\u9053\u6253\u6563\uff09 ColorJitter\uff08\u968f\u673a\u6539\u53d8\u56fe\u50cf\u7684\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6\uff09 Downscale\uff08\u901a\u8fc7\u56de\u7f29\u964d\u4f4e\u56fe\u7247\u8d28\u91cf\uff09 Emboss\uff08\u5bf9\u8f93\u5165\u56fe\u50cf\u8fdb\u884c\u6d6e\u96d5\u5e76\u5c06\u7ed3\u679c\u4e0e\u539f\u59cb\u56fe\u50cf\u53e0\u52a0\uff09 Equalize\uff08\u906e\u63a9\u5747\u8861\uff09 FancyPCA\uff08\u8bba\u6587\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u7efc\u5408\u589e\u5f3a\u65b9\u6cd5\uff09 FromFloat\uff08\u5bf9\u6d6e\u70b9\u578b\u77e9\u9635\u7684\u8fd0\u7b97\u65b9\u6cd5\uff09 GaussNoise\uff08\u5bf9\u56fe\u7247\u6dfb\u52a0\u9ad8\u65af\u566a\u97f3\uff09 GaussianBlur\uff08\u9ad8\u65af\u6a21\u7cca\u5316\uff09 GlassBlur\uff08\u73bb\u7483\u6a21\u7cca\u5316\uff09 HueSaturationValue\uff08\u968f\u673a\u6539\u53d8\u8272\u8c03\u548c\u9971\u548c\u5ea6\uff09 ISONoise\uff08\u5bf9\u56fe\u7247\u6dfb\u52a0\u4f20\u611f\u5668\u566a\u97f3\uff0c\u9488\u5bf9\u79fb\u52a8\u8bbe\u5907\u4e2d\u7684\u589e\u5f3a\uff09 ImageCompression\uff08\u56fe\u7247\u538b\u7f29\uff09 InvertImg\uff08\u901a\u8fc7255\u51cf\u53bb\u5f53\u524d\u50cf\u7d20\u503c\u5b9e\u73b0\u53cd\u8f6c\uff09 MedianBlur\uff08\u4e2d\u503c\u6a21\u7cca\u5316\uff09 MotionBlur\uff08\u8fd0\u52a8\u6a21\u7cca\u5316\uff09 MultiplicativeNoise\uff08\u5bf9\u56fe\u7247\u6dfb\u52a0\u4e58\u6027\u566a\u97f3\uff09 Normalize\uff08\u5bf9\u50cf\u7d20\u8fdb\u884c\u89c4\u8303\u5316\uff09 Posterize\uff08\u6d77\u62a5\u5316\uff09 RGBShift\uff08\u989c\u8272\u901a\u9053\u53d8\u6362\uff09 RandomBrightnessContrast\uff08\u968f\u673a\u4eae\u5ea6\u548c\u5bf9\u6bd4\u5ea6\u8c03\u8282\uff09 RandomFog\uff08\u968f\u673a\u96fe\u5316\uff09 RandomGamma\uff08\u968f\u673a\u8c03\u6574\u56fe\u7247\u4e2d\u7684gamma\u503c\uff09 RandomRain\uff08\u968f\u673a\u6dfb\u52a0\u96e8\u5929\u6548\u679c\uff09 RandomShadow\uff08\u968f\u673a\u6dfb\u52a0\u9634\u5f71\uff09 RandomSnow\uff08\u968f\u673a\u6dfb\u52a0\u96ea\u5929\u6548\u679c\uff09 RandomSunFlare\uff08\u968f\u673a\u6dfb\u52a0\u592a\u9633\u8000\u6591\uff09 RandomToneCurve\uff08\u968f\u673a\u6539\u53d8\u8272\u8c03\u66f2\u7ebf\uff09 Sharpen\uff08\u9510\u5316\u7279\u6548\uff09 Solarize\uff08\u65e5\u6652\u7279\u6548\uff09 Superpixels\uff08\u8d85\u50cf\u7d20\u7279\u6548\uff09 ToFloat\uff08\u5411\u6d6e\u70b9\u578b\u8f6c\u5316\uff09 ToGray\uff08\u53d8\u6210\u7070\u5ea6\u56fe\u7247\uff09 ToSepia\uff08\u53d8\u6210\u68d5\u8910\u56fe\u7247\uff09 \u793a\u4f8b\uff1a pip install albumentations # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import albumentations as A import cv2 # \u4f7f\u7528cv2\u8bfb\u53d6\u56fe\u7247 image = cv2 . imread ( \"./input.png\" ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # \u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u589e\u5f3a\u64cd\u4f5c transform = A . Compose ([ # \u8fd0\u52a8\u6a21\u7cca A . MotionBlur (), # \u6d77\u62a5\u5316 A . Posterize (), # \u968f\u673a\u96fe\u5316 A . RandomFog () ]) # \u53d6\u51fa\u7ed3\u679c\u5e76\u4fdd\u5b58\u56fe\u7247 transformed = transform ( image = image )[ \"image\" ] filename = \"./output.png\" cv2 . imwrite ( filename , transformed ) \u6548\u679c\u5bf9\u6bd4\uff1a \u7a7a\u95f4\u7ea7\u53d8\u6362\uff1a Transform Image Masks BBoxes Keypoints Affine\uff08\u4eff\u5c04\u53d8\u6362\uff09 \u2713 \u2713 \u2713 \u2713 CenterCrop\uff08\u4e2d\u5fc3\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 CoarseDropout\uff08\u7ebf\u6761\u820d\u5f03\u4ee5\u589e\u52a0\u7c97\u7cd9\u5ea6\uff09 \u2713 \u2713 Crop\uff08\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 CropAndPad\uff08\u526a\u88c1\u5e76\u586b\u5145\uff09 \u2713 \u2713 \u2713 \u2713 CropNonEmptyMaskIfExists\uff08\u6839\u636emask\u8fdb\u884c\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 ElasticTransform\uff08\u5bf9\u56fe\u7247\u8fdb\u884c\u5f39\u6027\u53d8\u6362\uff09 \u2713 \u2713 Flip\uff08\u6c34\u5e73\uff0f\u5782\u76f4\u7ffb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 GridDistortion\uff08\u6307\u5b9a\u533a\u57df\u5931\u771f\uff09 \u2713 \u2713 GridDropout\uff08\u7f51\u683c\u533a\u57df\u820d\u5f03\uff09 \u2713 \u2713 HorizontalFlip\uff08\u6c34\u5e73\u7ffb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 Lambda\uff08\u7528\u6237\u81ea\u5b9a\u4e49\u65b9\u6cd5\uff09 \u2713 \u2713 \u2713 \u2713 LongestMaxSize\uff08\u56fe\u7247\u5c3a\u5bf8\u653e\u5927\uff09 \u2713 \u2713 \u2713 \u2713 MaskDropout\uff08mask\u533a\u57df\u820d\u5f03\uff09 \u2713 \u2713 NoOp\uff08\u7a7a\u64cd\u4f5c\uff09 \u2713 \u2713 \u2713 \u2713 OpticalDistortion\uff08\u5149\u5b66\u5931\u771f\uff09 \u2713 \u2713 PadIfNeeded\uff08\u6309\u9700\u586b\u5145\uff09 \u2713 \u2713 \u2713 \u2713 Perspective\uff08\u56db\u70b9\u900f\u89c6\u53d8\u6362\uff09 \u2713 \u2713 \u2713 \u2713 PiecewiseAffine\uff08\u5206\u6bb5\u4eff\u5c04\uff09 \u2713 \u2713 \u2713 \u2713 RandomCrop\uff08\u968f\u673a\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 RandomCropNearBBox\uff08\u56fe\u50cf\u4e2d\u88c1\u526abbox\uff0c\u968f\u673a\u79fb\u52a8\u5750\u6807\uff09 \u2713 \u2713 \u2713 \u2713 RandomGridShuffle\uff08\u968f\u673a\u7f51\u683c\u6253\u4e71\uff09 \u2713 \u2713 RandomResizedCrop\uff08\u968f\u673a\u5927\u5c0f\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 RandomRotate90\uff08\u968f\u673a\u7ffb\u8f6c90\u5ea6\uff09 \u2713 \u2713 \u2713 \u2713 RandomScale\uff08\u968f\u673a\u7f29\u653e\uff09 \u2713 \u2713 \u2713 \u2713 RandomSizedBBoxSafeCrop\uff08\u4e0d\u4e22\u5931bbox\u4e0b\u968f\u673a\u526a\u88c1\uff09 \u2713 \u2713 \u2713 RandomSizedCrop\uff08\u968f\u673a\u5c3a\u5bf8\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 Resize\uff08\u6539\u53d8\u56fe\u7247\u5c3a\u5bf8\uff09 \u2713 \u2713 \u2713 \u2713 Rotate\uff08\u65cb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 SafeRotate\uff08\u5b89\u5168\u65cb\u8f6c\uff0c\u65cb\u8f6c\u7b26\u5408\u5747\u5300\u5206\u5e03\uff09 \u2713 \u2713 \u2713 \u2713 ShiftScaleRotate\uff08\u5e73\u79fb\u7f29\u653e\u65cb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 SmallestMaxSize\uff08\u7f29\u5c0f\u56fe\u7247\uff09 \u2713 \u2713 \u2713 \u2713 Transpose\uff08\u8f6c\u7f6e\u64cd\u4f5c\uff09 \u2713 \u2713 \u2713 \u2713 VerticalFlip\uff08\u5782\u76f4\u7ffb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 \u8bd5\u4e00\u8bd5\uff1a \u6839\u636e\u50cf\u7d20\u7ea7\u53d8\u6362\u7684\u4ee3\u7801\uff0c\u8bf7\u540c\u5b66\u4eec\u81ea\u5df1\u7ed3\u5408\u6587\u6863 https://albumentations.ai/docs/ \u5c1d\u8bd5\u7a7a\u95f4\u7ea7\u7684\u53d8\u6362\u3002 \u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u6570\u636e\u589e\u5f3a\u7684\u5b9e\u73b0 \u8bf4\u660e\uff1a albumentations\u7684bbox\u5750\u6807\u5f62\u5f0f\u7c7b\u4f3c\u4e8epascal_voc\uff0c\u91c7\u7528\u6781\u5750\u6807\u8868\u793a\uff0c\u5f62\u5982\uff1a[x_min, y_min, x_max, y_max]\uff0c\u800c\u4e14albumentations\u8981\u6c42\u5750\u6807\u8868\u793a\u5fc5\u987b\u89c4\u8303\u5316\uff0c\u5373\u4f7f\u7528\u771f\u5b9e\u5750\u6807\u503c\u9664\u4ee5\u5bf9\u5e94\u7684\u5bbd\u9ad8\uff0c\u5f62\u5982\uff1a[98 / 640, 345 / 480, 420 / 640, 462 / 480]\u3002 \u4e4b\u524d\u7684coco\u662f\u4e2d\u5fc3\u5750\u6807\u8868\u793a\uff0c\u5f62\u5982\uff1a[x_min, y_min, width, height]\uff0c\u800cyolo\u662f\u89c4\u8303\u5316\u4e2d\u5fc3\u5750\u6807\u8868\u793a\uff0c\u5f62\u5982\uff1a[((420 + 98) / 2) / 640, ((462 + 345) / 2) / 480, 322 / 640, 117 / 480]\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ee5coco\u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u4e3a\u4f8b\u8fdb\u884c\u589e\u5f3a\uff0c\u9996\u5148\u4e0b\u8f7d coco\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6 \uff0c\u6216\u8005\u6211\u4eec\u4f7f\u7528\u7684\u5b9e\u4f8b\uff1a https://cocodataset.org/#explore?id=386298 # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import random import cv2 from matplotlib import pyplot as plt import albumentations as A # \u4f7f\u7528cv2\u8bfb\u53d6\u9009\u62e9\u7684\u4e00\u5f20\u56fe\u7247 image = cv2 . imread ( 'images/000000386298.jpg' ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # \u627e\u5230\u8be5\u56fe\u7247\u5bf9\u5e94\u7684\u6807\u6ce8\u4fe1\u606f\uff0ccoco\u683c\u5f0f\u7684bbox\u4ee5\u53ca\u5bf9\u5e94\u7684\u6807\u7b7e bboxes = [[ 5.66 , 138.95 , 147.09 , 164.88 ], [ 366.7 , 80.84 , 132.8 , 181.84 ]] category_ids = [ 17 , 18 ] # \u4ee5\u53ca\u6807\u7b7e\u6570\u503c\u5bf9\u5e94\u7684\u5b9e\u9645\u6587\u672c category_id_to_name = { 17 : 'cat' , 18 : 'dog' } # \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u53ef\u89c6\u5316\u4e00\u4e0b\u8fd9\u4e2a\u76ee\u6807\u68c0\u6d4b\u7684\u7528\u4f8b # \u6211\u4eec\u8981\u628a\u8fd9\u4e2abbox\u753b\u5728\u56fe\u7247\u4e0a\u5e76\u663e\u793a\u5177\u4f53\u7684\u6807\u7b7e\u6587\u672c # \u5148\u5b9a\u4e49\u6846\u7684\u989c\u8272\u548c\u6587\u672c\u989c\u8272 BOX_COLOR = ( 255 , 0 , 0 ) # Red TEXT_COLOR = ( 255 , 255 , 255 ) # White def visualize_bbox ( img , bbox , class_name , color = BOX_COLOR , thickness = 2 ): \"\"\"\u5355\u4e2a\u53ef\u89c6\u5316\u76ee\u6807\u6846\u51fd\u6570\uff0c\u53c2\u6570\u5305\u62ec\uff0c\u56fe\u7247\u672c\u8eab\uff0c\u76ee\u6807\u6846\u5750\u6807\uff0c\u7c7b\u522b\u540d\u5b57\uff0c\u6846\u989c\u8272\uff0c\u4ee5\u53ca\u6846\u7684\u6761\u7eb9\u5bbd\u5ea6\"\"\" # \u4f7f\u7528cv2.rectangle\u8981\u4f7f\u7528\u6781\u5750\u6807\uff0c\u6240\u4ee5\u9996\u5148\u505a\u5750\u6807\u8f6c\u6362 x_min , y_min , w , h = bbox x_min , x_max , y_min , y_max = int ( x_min ), int ( x_min + w ), int ( y_min ), int ( y_min + h ) # \u5148\u6839\u636e\u5750\u6807\u753b\u4e0a\u76ee\u6807\u6846 cv2 . rectangle ( img , ( x_min , y_min ), ( x_max , y_max ), color = color , thickness = thickness ) # \u8bbe\u5b9a\u53c2\u6570\u6765\u83b7\u5f97\u76ee\u6807\u6846\u5bf9\u5e94\u7684\u6807\u7b7e\u6587\u672c\u5927\u5c0f (( text_width , text_height ), _ ) = cv2 . getTextSize ( class_name , cv2 . FONT_HERSHEY_SIMPLEX , 0.35 , 1 ) # \u518d\u6839\u636e\u6587\u672c\u7684\u5bbd\u9ad8\u8c03\u6574\u76ee\u6807\u6846 cv2 . rectangle ( img , ( x_min , y_min - int ( 1.3 * text_height )), ( x_min + text_width , y_min ), BOX_COLOR , - 1 ) # \u6700\u540e\u628a\u6587\u672c\u653e\u5728\u76ee\u6807\u6846\u9644\u8fd1\uff0c\u5176\u4e2d\u8bbe\u5b9a\u4e00\u7cfb\u5217\u7684\u6587\u672c\u53c2\u6570\uff0c\u989c\u8272\uff0c\u7ebf\u6761\u7c7b\u578b\uff0c\u5b57\u4f53\u7c7b\u578b\u7b49\u7b49 cv2 . putText ( img , text = class_name , org = ( x_min , y_min - int ( 0.3 * text_height )), fontFace = cv2 . FONT_HERSHEY_SIMPLEX , fontScale = 0.35 , color = TEXT_COLOR , lineType = cv2 . LINE_AA , ) return img def visualize ( image , bboxes , category_ids , category_id_to_name ): \"\"\"\u5bf9\u6bcf\u4e00\u4e2a\u76ee\u6807\u6846\u8fdb\u884c\u7ed8\u5236\"\"\" img = image . copy () for bbox , category_id in zip ( bboxes , category_ids ): class_name = category_id_to_name [ category_id ] img = visualize_bbox ( img , bbox , class_name ) plt . figure ( figsize = ( 12 , 12 )) plt . axis ( 'off' ) plt . imshow ( img ) plt . savefig ( \"./ob_sample.png\" ) # \u8c03\u7528\u8be5\u51fd\u6570\u663e\u793acoco\u56fe\u7247 visualize ( image , bboxes , category_ids , category_id_to_name ) \u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u884c\u6570\u636e\u589e\u5f3a\uff1a # \u4f7f\u7528A\u6784\u5efa\u6570\u636e\u589e\u5f3a\u6d41\u6c34\u7ebf transform = A . Compose ( # \u5148\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6c34\u5e73\u7ffb\u8f6c [ A . HorizontalFlip ( p = 0.5 )], # \u56e0\u4e3a\u662f\u76ee\u6807\u68c0\u6d4b\u7684\u6570\u636e\u589e\u5f3a\uff0c\u8981\u7ed9\u51fabbox_params\uff0c\u5305\u62ec\u91cd\u8981\u7684format bbox_params = A . BboxParams ( format = 'coco' , label_fields = [ 'category_ids' ]), ) # \u5c06\u56fe\u7247\uff0cbbox\u4ee5\u53ca\u7c7b\u522bid\u4f20\u5165\u6570\u636e\u589e\u5f3a\u6d41\u6c34\u7ebf transformed = transform ( image = image , bboxes = bboxes , category_ids = category_ids ) # \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u8fdb\u884c\u53ef\u89c6\u5316 visualize ( transformed [ 'image' ], transformed [ 'bboxes' ], transformed [ 'category_ids' ], category_id_to_name , ) \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66f4\u52a0\u590d\u6742\u7684\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\uff1a # \u4f7f\u7528A\u6784\u5efa\u6570\u636e\u589e\u5f3a\u6d41\u6c34\u7ebf transform = A . Compose ([ A . HorizontalFlip ( p = 0.5 ), A . ShiftScaleRotate ( p = 0.5 ), A . RandomBrightnessContrast ( p = 0.3 ), A . RGBShift ( r_shift_limit = 30 , g_shift_limit = 30 , b_shift_limit = 30 , p = 0.3 )], # \u56e0\u4e3a\u662f\u76ee\u6807\u68c0\u6d4b\u7684\u6570\u636e\u589e\u5f3a\uff0c\u8981\u7ed9\u51fabbox_params\uff0c\u5305\u62ec\u91cd\u8981\u7684format bbox_params = A . BboxParams ( format = 'coco' , label_fields = [ 'category_ids' ]), ) # \u5c06\u56fe\u7247\uff0cbbox\u4ee5\u53ca\u7c7b\u522bid\u4f20\u5165\u6570\u636e\u589e\u5f3a\u6d41\u6c34\u7ebf transformed = transform ( image = image , bboxes = bboxes , category_ids = category_ids ) # \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u8fdb\u884c\u53ef\u89c6\u5316 visualize ( transformed [ 'image' ], transformed [ 'bboxes' ], transformed [ 'category_ids' ], category_id_to_name , ) \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u56fe\u50cf\u6570\u636e\u589e\u5f3a\u5de5\u5177Albumentations\u7684\u201c\u80fd\u529b\u201d\u3002 \u638c\u63e1\u4e86\u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u6570\u636e\u589e\u5f3a\u7684\u5b9e\u73b0\u3002","title":"\u56fe\u50cf\u6570\u636e\u589e\u5f3a\u5de5\u5177Albumentations"},{"location":"3/#_1","text":"\u638c\u63e1\u56fe\u50cf\u6570\u636e\u589e\u5f3a\u5de5\u5177Albumentations\u7684\u201c\u80fd\u529b\u201d\u3002 \u638c\u63e1\u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u6570\u636e\u589e\u5f3a\u7684\u5b9e\u73b0\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"3/#albumentations","text":"\u6574\u5408\u4e8670+\u79cd\u56fe\u50cf\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff0c\u9488\u5bf9\u5404\u79cdCV\u5e38\u89c4\u4efb\u52a1\uff0c\u5982\u5206\u7c7b\uff0c\u76ee\u6807\u68c0\u6d4b\uff0c\u8bed\u4e49\u5206\u5272\u7b49\u7684\u6570\u636e\u589e\u5f3a\uff0c\u5728\u4e1a\u754c\uff0c\u79d1\u5b66\u7ade\u8d5b\uff0c\u79d1\u7814\u4e2d\u7684\u90fd\u6709\u5f88\u5927\u7a0b\u5ea6\u7684\u5e94\u7528\u3002","title":"Albumentations\u7b80\u4ecb"},{"location":"3/#albumentations_1","text":"\u50cf\u7d20\u7ea7\u53d8\u6362 \u7a7a\u95f4\u7ea7\u53d8\u6362 \u50cf\u7d20\u7ea7\u53d8\u6362\uff1a Blur\uff08\u6a21\u7cca\u5316\uff09 CLAHE\uff08\u5bf9\u6bd4\u5ea6\u5747\u8861\u5316\uff09 ChannelDropout\uff08\u989c\u8272\u901a\u9053\u7f6e0\uff09 ChannelShuffle\uff08\u989c\u8272\u901a\u9053\u6253\u6563\uff09 ColorJitter\uff08\u968f\u673a\u6539\u53d8\u56fe\u50cf\u7684\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6\uff09 Downscale\uff08\u901a\u8fc7\u56de\u7f29\u964d\u4f4e\u56fe\u7247\u8d28\u91cf\uff09 Emboss\uff08\u5bf9\u8f93\u5165\u56fe\u50cf\u8fdb\u884c\u6d6e\u96d5\u5e76\u5c06\u7ed3\u679c\u4e0e\u539f\u59cb\u56fe\u50cf\u53e0\u52a0\uff09 Equalize\uff08\u906e\u63a9\u5747\u8861\uff09 FancyPCA\uff08\u8bba\u6587\u4e2d\u4f7f\u7528\u7684\u4e00\u79cd\u7efc\u5408\u589e\u5f3a\u65b9\u6cd5\uff09 FromFloat\uff08\u5bf9\u6d6e\u70b9\u578b\u77e9\u9635\u7684\u8fd0\u7b97\u65b9\u6cd5\uff09 GaussNoise\uff08\u5bf9\u56fe\u7247\u6dfb\u52a0\u9ad8\u65af\u566a\u97f3\uff09 GaussianBlur\uff08\u9ad8\u65af\u6a21\u7cca\u5316\uff09 GlassBlur\uff08\u73bb\u7483\u6a21\u7cca\u5316\uff09 HueSaturationValue\uff08\u968f\u673a\u6539\u53d8\u8272\u8c03\u548c\u9971\u548c\u5ea6\uff09 ISONoise\uff08\u5bf9\u56fe\u7247\u6dfb\u52a0\u4f20\u611f\u5668\u566a\u97f3\uff0c\u9488\u5bf9\u79fb\u52a8\u8bbe\u5907\u4e2d\u7684\u589e\u5f3a\uff09 ImageCompression\uff08\u56fe\u7247\u538b\u7f29\uff09 InvertImg\uff08\u901a\u8fc7255\u51cf\u53bb\u5f53\u524d\u50cf\u7d20\u503c\u5b9e\u73b0\u53cd\u8f6c\uff09 MedianBlur\uff08\u4e2d\u503c\u6a21\u7cca\u5316\uff09 MotionBlur\uff08\u8fd0\u52a8\u6a21\u7cca\u5316\uff09 MultiplicativeNoise\uff08\u5bf9\u56fe\u7247\u6dfb\u52a0\u4e58\u6027\u566a\u97f3\uff09 Normalize\uff08\u5bf9\u50cf\u7d20\u8fdb\u884c\u89c4\u8303\u5316\uff09 Posterize\uff08\u6d77\u62a5\u5316\uff09 RGBShift\uff08\u989c\u8272\u901a\u9053\u53d8\u6362\uff09 RandomBrightnessContrast\uff08\u968f\u673a\u4eae\u5ea6\u548c\u5bf9\u6bd4\u5ea6\u8c03\u8282\uff09 RandomFog\uff08\u968f\u673a\u96fe\u5316\uff09 RandomGamma\uff08\u968f\u673a\u8c03\u6574\u56fe\u7247\u4e2d\u7684gamma\u503c\uff09 RandomRain\uff08\u968f\u673a\u6dfb\u52a0\u96e8\u5929\u6548\u679c\uff09 RandomShadow\uff08\u968f\u673a\u6dfb\u52a0\u9634\u5f71\uff09 RandomSnow\uff08\u968f\u673a\u6dfb\u52a0\u96ea\u5929\u6548\u679c\uff09 RandomSunFlare\uff08\u968f\u673a\u6dfb\u52a0\u592a\u9633\u8000\u6591\uff09 RandomToneCurve\uff08\u968f\u673a\u6539\u53d8\u8272\u8c03\u66f2\u7ebf\uff09 Sharpen\uff08\u9510\u5316\u7279\u6548\uff09 Solarize\uff08\u65e5\u6652\u7279\u6548\uff09 Superpixels\uff08\u8d85\u50cf\u7d20\u7279\u6548\uff09 ToFloat\uff08\u5411\u6d6e\u70b9\u578b\u8f6c\u5316\uff09 ToGray\uff08\u53d8\u6210\u7070\u5ea6\u56fe\u7247\uff09 ToSepia\uff08\u53d8\u6210\u68d5\u8910\u56fe\u7247\uff09 \u793a\u4f8b\uff1a pip install albumentations # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import albumentations as A import cv2 # \u4f7f\u7528cv2\u8bfb\u53d6\u56fe\u7247 image = cv2 . imread ( \"./input.png\" ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # \u8fdb\u884c\u4e00\u7cfb\u5217\u7684\u589e\u5f3a\u64cd\u4f5c transform = A . Compose ([ # \u8fd0\u52a8\u6a21\u7cca A . MotionBlur (), # \u6d77\u62a5\u5316 A . Posterize (), # \u968f\u673a\u96fe\u5316 A . RandomFog () ]) # \u53d6\u51fa\u7ed3\u679c\u5e76\u4fdd\u5b58\u56fe\u7247 transformed = transform ( image = image )[ \"image\" ] filename = \"./output.png\" cv2 . imwrite ( filename , transformed ) \u6548\u679c\u5bf9\u6bd4\uff1a \u7a7a\u95f4\u7ea7\u53d8\u6362\uff1a Transform Image Masks BBoxes Keypoints Affine\uff08\u4eff\u5c04\u53d8\u6362\uff09 \u2713 \u2713 \u2713 \u2713 CenterCrop\uff08\u4e2d\u5fc3\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 CoarseDropout\uff08\u7ebf\u6761\u820d\u5f03\u4ee5\u589e\u52a0\u7c97\u7cd9\u5ea6\uff09 \u2713 \u2713 Crop\uff08\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 CropAndPad\uff08\u526a\u88c1\u5e76\u586b\u5145\uff09 \u2713 \u2713 \u2713 \u2713 CropNonEmptyMaskIfExists\uff08\u6839\u636emask\u8fdb\u884c\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 ElasticTransform\uff08\u5bf9\u56fe\u7247\u8fdb\u884c\u5f39\u6027\u53d8\u6362\uff09 \u2713 \u2713 Flip\uff08\u6c34\u5e73\uff0f\u5782\u76f4\u7ffb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 GridDistortion\uff08\u6307\u5b9a\u533a\u57df\u5931\u771f\uff09 \u2713 \u2713 GridDropout\uff08\u7f51\u683c\u533a\u57df\u820d\u5f03\uff09 \u2713 \u2713 HorizontalFlip\uff08\u6c34\u5e73\u7ffb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 Lambda\uff08\u7528\u6237\u81ea\u5b9a\u4e49\u65b9\u6cd5\uff09 \u2713 \u2713 \u2713 \u2713 LongestMaxSize\uff08\u56fe\u7247\u5c3a\u5bf8\u653e\u5927\uff09 \u2713 \u2713 \u2713 \u2713 MaskDropout\uff08mask\u533a\u57df\u820d\u5f03\uff09 \u2713 \u2713 NoOp\uff08\u7a7a\u64cd\u4f5c\uff09 \u2713 \u2713 \u2713 \u2713 OpticalDistortion\uff08\u5149\u5b66\u5931\u771f\uff09 \u2713 \u2713 PadIfNeeded\uff08\u6309\u9700\u586b\u5145\uff09 \u2713 \u2713 \u2713 \u2713 Perspective\uff08\u56db\u70b9\u900f\u89c6\u53d8\u6362\uff09 \u2713 \u2713 \u2713 \u2713 PiecewiseAffine\uff08\u5206\u6bb5\u4eff\u5c04\uff09 \u2713 \u2713 \u2713 \u2713 RandomCrop\uff08\u968f\u673a\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 RandomCropNearBBox\uff08\u56fe\u50cf\u4e2d\u88c1\u526abbox\uff0c\u968f\u673a\u79fb\u52a8\u5750\u6807\uff09 \u2713 \u2713 \u2713 \u2713 RandomGridShuffle\uff08\u968f\u673a\u7f51\u683c\u6253\u4e71\uff09 \u2713 \u2713 RandomResizedCrop\uff08\u968f\u673a\u5927\u5c0f\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 RandomRotate90\uff08\u968f\u673a\u7ffb\u8f6c90\u5ea6\uff09 \u2713 \u2713 \u2713 \u2713 RandomScale\uff08\u968f\u673a\u7f29\u653e\uff09 \u2713 \u2713 \u2713 \u2713 RandomSizedBBoxSafeCrop\uff08\u4e0d\u4e22\u5931bbox\u4e0b\u968f\u673a\u526a\u88c1\uff09 \u2713 \u2713 \u2713 RandomSizedCrop\uff08\u968f\u673a\u5c3a\u5bf8\u526a\u88c1\uff09 \u2713 \u2713 \u2713 \u2713 Resize\uff08\u6539\u53d8\u56fe\u7247\u5c3a\u5bf8\uff09 \u2713 \u2713 \u2713 \u2713 Rotate\uff08\u65cb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 SafeRotate\uff08\u5b89\u5168\u65cb\u8f6c\uff0c\u65cb\u8f6c\u7b26\u5408\u5747\u5300\u5206\u5e03\uff09 \u2713 \u2713 \u2713 \u2713 ShiftScaleRotate\uff08\u5e73\u79fb\u7f29\u653e\u65cb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 SmallestMaxSize\uff08\u7f29\u5c0f\u56fe\u7247\uff09 \u2713 \u2713 \u2713 \u2713 Transpose\uff08\u8f6c\u7f6e\u64cd\u4f5c\uff09 \u2713 \u2713 \u2713 \u2713 VerticalFlip\uff08\u5782\u76f4\u7ffb\u8f6c\uff09 \u2713 \u2713 \u2713 \u2713 \u8bd5\u4e00\u8bd5\uff1a \u6839\u636e\u50cf\u7d20\u7ea7\u53d8\u6362\u7684\u4ee3\u7801\uff0c\u8bf7\u540c\u5b66\u4eec\u81ea\u5df1\u7ed3\u5408\u6587\u6863 https://albumentations.ai/docs/ \u5c1d\u8bd5\u7a7a\u95f4\u7ea7\u7684\u53d8\u6362\u3002","title":"Albumentations\u7684\u589e\u5f3a\u80fd\u529b"},{"location":"3/#_2","text":"\u8bf4\u660e\uff1a albumentations\u7684bbox\u5750\u6807\u5f62\u5f0f\u7c7b\u4f3c\u4e8epascal_voc\uff0c\u91c7\u7528\u6781\u5750\u6807\u8868\u793a\uff0c\u5f62\u5982\uff1a[x_min, y_min, x_max, y_max]\uff0c\u800c\u4e14albumentations\u8981\u6c42\u5750\u6807\u8868\u793a\u5fc5\u987b\u89c4\u8303\u5316\uff0c\u5373\u4f7f\u7528\u771f\u5b9e\u5750\u6807\u503c\u9664\u4ee5\u5bf9\u5e94\u7684\u5bbd\u9ad8\uff0c\u5f62\u5982\uff1a[98 / 640, 345 / 480, 420 / 640, 462 / 480]\u3002 \u4e4b\u524d\u7684coco\u662f\u4e2d\u5fc3\u5750\u6807\u8868\u793a\uff0c\u5f62\u5982\uff1a[x_min, y_min, width, height]\uff0c\u800cyolo\u662f\u89c4\u8303\u5316\u4e2d\u5fc3\u5750\u6807\u8868\u793a\uff0c\u5f62\u5982\uff1a[((420 + 98) / 2) / 640, ((462 + 345) / 2) / 480, 322 / 640, 117 / 480]\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ee5coco\u6570\u636e\u96c6\u4e2d\u7684\u56fe\u7247\u4e3a\u4f8b\u8fdb\u884c\u589e\u5f3a\uff0c\u9996\u5148\u4e0b\u8f7d coco\u76ee\u6807\u68c0\u6d4b\u6570\u636e\u96c6 \uff0c\u6216\u8005\u6211\u4eec\u4f7f\u7528\u7684\u5b9e\u4f8b\uff1a https://cocodataset.org/#explore?id=386298 # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import random import cv2 from matplotlib import pyplot as plt import albumentations as A # \u4f7f\u7528cv2\u8bfb\u53d6\u9009\u62e9\u7684\u4e00\u5f20\u56fe\u7247 image = cv2 . imread ( 'images/000000386298.jpg' ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) # \u627e\u5230\u8be5\u56fe\u7247\u5bf9\u5e94\u7684\u6807\u6ce8\u4fe1\u606f\uff0ccoco\u683c\u5f0f\u7684bbox\u4ee5\u53ca\u5bf9\u5e94\u7684\u6807\u7b7e bboxes = [[ 5.66 , 138.95 , 147.09 , 164.88 ], [ 366.7 , 80.84 , 132.8 , 181.84 ]] category_ids = [ 17 , 18 ] # \u4ee5\u53ca\u6807\u7b7e\u6570\u503c\u5bf9\u5e94\u7684\u5b9e\u9645\u6587\u672c category_id_to_name = { 17 : 'cat' , 18 : 'dog' } # \u63a5\u4e0b\u6765\u6211\u4eec\u8981\u53ef\u89c6\u5316\u4e00\u4e0b\u8fd9\u4e2a\u76ee\u6807\u68c0\u6d4b\u7684\u7528\u4f8b # \u6211\u4eec\u8981\u628a\u8fd9\u4e2abbox\u753b\u5728\u56fe\u7247\u4e0a\u5e76\u663e\u793a\u5177\u4f53\u7684\u6807\u7b7e\u6587\u672c # \u5148\u5b9a\u4e49\u6846\u7684\u989c\u8272\u548c\u6587\u672c\u989c\u8272 BOX_COLOR = ( 255 , 0 , 0 ) # Red TEXT_COLOR = ( 255 , 255 , 255 ) # White def visualize_bbox ( img , bbox , class_name , color = BOX_COLOR , thickness = 2 ): \"\"\"\u5355\u4e2a\u53ef\u89c6\u5316\u76ee\u6807\u6846\u51fd\u6570\uff0c\u53c2\u6570\u5305\u62ec\uff0c\u56fe\u7247\u672c\u8eab\uff0c\u76ee\u6807\u6846\u5750\u6807\uff0c\u7c7b\u522b\u540d\u5b57\uff0c\u6846\u989c\u8272\uff0c\u4ee5\u53ca\u6846\u7684\u6761\u7eb9\u5bbd\u5ea6\"\"\" # \u4f7f\u7528cv2.rectangle\u8981\u4f7f\u7528\u6781\u5750\u6807\uff0c\u6240\u4ee5\u9996\u5148\u505a\u5750\u6807\u8f6c\u6362 x_min , y_min , w , h = bbox x_min , x_max , y_min , y_max = int ( x_min ), int ( x_min + w ), int ( y_min ), int ( y_min + h ) # \u5148\u6839\u636e\u5750\u6807\u753b\u4e0a\u76ee\u6807\u6846 cv2 . rectangle ( img , ( x_min , y_min ), ( x_max , y_max ), color = color , thickness = thickness ) # \u8bbe\u5b9a\u53c2\u6570\u6765\u83b7\u5f97\u76ee\u6807\u6846\u5bf9\u5e94\u7684\u6807\u7b7e\u6587\u672c\u5927\u5c0f (( text_width , text_height ), _ ) = cv2 . getTextSize ( class_name , cv2 . FONT_HERSHEY_SIMPLEX , 0.35 , 1 ) # \u518d\u6839\u636e\u6587\u672c\u7684\u5bbd\u9ad8\u8c03\u6574\u76ee\u6807\u6846 cv2 . rectangle ( img , ( x_min , y_min - int ( 1.3 * text_height )), ( x_min + text_width , y_min ), BOX_COLOR , - 1 ) # \u6700\u540e\u628a\u6587\u672c\u653e\u5728\u76ee\u6807\u6846\u9644\u8fd1\uff0c\u5176\u4e2d\u8bbe\u5b9a\u4e00\u7cfb\u5217\u7684\u6587\u672c\u53c2\u6570\uff0c\u989c\u8272\uff0c\u7ebf\u6761\u7c7b\u578b\uff0c\u5b57\u4f53\u7c7b\u578b\u7b49\u7b49 cv2 . putText ( img , text = class_name , org = ( x_min , y_min - int ( 0.3 * text_height )), fontFace = cv2 . FONT_HERSHEY_SIMPLEX , fontScale = 0.35 , color = TEXT_COLOR , lineType = cv2 . LINE_AA , ) return img def visualize ( image , bboxes , category_ids , category_id_to_name ): \"\"\"\u5bf9\u6bcf\u4e00\u4e2a\u76ee\u6807\u6846\u8fdb\u884c\u7ed8\u5236\"\"\" img = image . copy () for bbox , category_id in zip ( bboxes , category_ids ): class_name = category_id_to_name [ category_id ] img = visualize_bbox ( img , bbox , class_name ) plt . figure ( figsize = ( 12 , 12 )) plt . axis ( 'off' ) plt . imshow ( img ) plt . savefig ( \"./ob_sample.png\" ) # \u8c03\u7528\u8be5\u51fd\u6570\u663e\u793acoco\u56fe\u7247 visualize ( image , bboxes , category_ids , category_id_to_name ) \u63a5\u4e0b\u6765\u5c31\u662f\u8fdb\u884c\u6570\u636e\u589e\u5f3a\uff1a # \u4f7f\u7528A\u6784\u5efa\u6570\u636e\u589e\u5f3a\u6d41\u6c34\u7ebf transform = A . Compose ( # \u5148\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u6c34\u5e73\u7ffb\u8f6c [ A . HorizontalFlip ( p = 0.5 )], # \u56e0\u4e3a\u662f\u76ee\u6807\u68c0\u6d4b\u7684\u6570\u636e\u589e\u5f3a\uff0c\u8981\u7ed9\u51fabbox_params\uff0c\u5305\u62ec\u91cd\u8981\u7684format bbox_params = A . BboxParams ( format = 'coco' , label_fields = [ 'category_ids' ]), ) # \u5c06\u56fe\u7247\uff0cbbox\u4ee5\u53ca\u7c7b\u522bid\u4f20\u5165\u6570\u636e\u589e\u5f3a\u6d41\u6c34\u7ebf transformed = transform ( image = image , bboxes = bboxes , category_ids = category_ids ) # \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u8fdb\u884c\u53ef\u89c6\u5316 visualize ( transformed [ 'image' ], transformed [ 'bboxes' ], transformed [ 'category_ids' ], category_id_to_name , ) \u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66f4\u52a0\u590d\u6742\u7684\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\uff1a # \u4f7f\u7528A\u6784\u5efa\u6570\u636e\u589e\u5f3a\u6d41\u6c34\u7ebf transform = A . Compose ([ A . HorizontalFlip ( p = 0.5 ), A . ShiftScaleRotate ( p = 0.5 ), A . RandomBrightnessContrast ( p = 0.3 ), A . RGBShift ( r_shift_limit = 30 , g_shift_limit = 30 , b_shift_limit = 30 , p = 0.3 )], # \u56e0\u4e3a\u662f\u76ee\u6807\u68c0\u6d4b\u7684\u6570\u636e\u589e\u5f3a\uff0c\u8981\u7ed9\u51fabbox_params\uff0c\u5305\u62ec\u91cd\u8981\u7684format bbox_params = A . BboxParams ( format = 'coco' , label_fields = [ 'category_ids' ]), ) # \u5c06\u56fe\u7247\uff0cbbox\u4ee5\u53ca\u7c7b\u522bid\u4f20\u5165\u6570\u636e\u589e\u5f3a\u6d41\u6c34\u7ebf transformed = transform ( image = image , bboxes = bboxes , category_ids = category_ids ) # \u5c06\u5f97\u5230\u7684\u7ed3\u679c\u8fdb\u884c\u53ef\u89c6\u5316 visualize ( transformed [ 'image' ], transformed [ 'bboxes' ], transformed [ 'category_ids' ], category_id_to_name , )","title":"\u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u6570\u636e\u589e\u5f3a\u7684\u5b9e\u73b0"},{"location":"3/#_3","text":"\u5b66\u4e60\u4e86\u56fe\u50cf\u6570\u636e\u589e\u5f3a\u5de5\u5177Albumentations\u7684\u201c\u80fd\u529b\u201d\u3002 \u638c\u63e1\u4e86\u5bf9\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u8fdb\u884c\u6570\u636e\u589e\u5f3a\u7684\u5b9e\u73b0\u3002","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"4/","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u4ee5\u53ca\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0\u3002 \u4e86\u89e3Flask\u6846\u67b6\u53ca\u5176\u76f8\u5173\u7684\u670d\u52a1\u7ec4\u4ef6\u3002 \u638c\u63e1\u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u3002 \u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0 \u56e0\u4e3a\u8bad\u7ec3AI\u6a21\u578b\u5f80\u5f80\u662f\u8f83\u5927\u7684\u6587\u4ef6\uff0c\u5728\u6bcf\u6b21IO\u65f6\u5f80\u5f80\u6bd4\u8f83\u8017\u65f6\uff0c\u56e0\u6b64\u4f1a\u9009\u62e9\u5728\u670d\u52a1\u5f00\u542f\u65f6\u8bfb\u5165\u5185\u5b58\uff0c\u907f\u514dIO\u64cd\u4f5c\u3002\u800c\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u610f\u5473\u7740\u5f53\u6211\u4eec\u66f4\u65b0\u6a21\u578b\u65f6\u9700\u8981\u6682\u505c\u670d\u52a1\uff0c \u8fd9\u5bf9\u4e8e\u5728\u7ebf\u4efb\u52a1\u662f\u975e\u5e38\u4e0d\u53ef\u53d6\u7684\u884c\u4e3a\uff1b\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65e2\u80fd\u907f\u514dIO\u53c8\u80fd\u4f7f\u7528\u6237\u65e0\u611f\u77e5\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u7684\u8981\u6c42\u5c31\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u8981\u6c42\u3002 \u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0 \u6700\u5e38\u89c1\u7684\u6ee1\u8db3\u70ed\u66f4\u65b0\u8981\u6c42\u7684\u65b9\u6cd5\u5c31\u662f\u4e00\u540c\u5f00\u542f\u4e24\u4e2a\u6a21\u578b\u670d\u52a1\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u6b63\u5f0f\u4f7f\u7528\uff0c\u4e00\u4e2a\u4f5c\u4e3abackup(\u5907\u7528)\uff0c\u5f53\u6211\u4eec\u6709\u66f4\u65b0\u9700\u6c42\u65f6\uff0c\u5c06\u6b63\u5f0f\u670d\u52a1\u6682\u505c\u8fdb\u884c\u6a21\u578b\u66f4\u6362\uff0c\u800c\u6b64\u65f6\u5907\u7528\u670d\u52a1\u5c06\u7ee7\u7eed\u4e3a\u7528\u6237\u670d\u52a1\uff0c\u76f4\u5230\u6b63\u5f0f\u670d\u52a1\u91cd\u65b0\u4e0a\u7ebf\u3002\u5728\u6b63\u5f0f\u670d\u52a1\u8fd0\u8f6c\u6b63\u5e38\u540e\uff0c\u518d\u4e3a\u5907\u7528\u670d\u52a1\u66f4\u6362\u6a21\u578b\u3002 Flask\u670d\u52a1\u7ec4\u4ef6 web\u6846\u67b6FLask\uff1a Flask\u6846\u67b6\u662f\u5f53\u4e0b\u6700\u53d7\u6b22\u8fce\u7684python\u8f7b\u91cf\u7ea7\u6846\u67b6, \u4e5f\u662fpytorch\u5b98\u7f51\u6307\u5b9a\u7684\u90e8\u7f72\u6846\u67b6. Flask\u7684\u57fa\u672c\u6a21\u5f0f\u4e3a\u5728\u7a0b\u5e8f\u91cc\u5c06\u4e00\u4e2a\u89c6\u56fe\u51fd\u6570\u5206\u914d\u7ed9\u4e00\u4e2aURL\uff0c\u6bcf\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2aURL\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u7ed9\u8be5URL\u5206\u914d\u597d\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u83b7\u53d6\u51fd\u6570\u7684\u8fd4\u56de\u503c. \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Flask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5Flask pip install Flask == 1 .1.1 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u5bfc\u5165Flask\u7c7b from flask import Flask # \u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b9e\u4f8bapp, \u53c2\u6570\u4e3a__name__, \u8fd9\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\uff0c # \u8fd9\u6837Flask\u624d\u80fd\u77e5\u9053\u5728\u54ea\u91cc\u53ef\u627e\u5230\u6a21\u677f\u548c\u9759\u6001\u6587\u4ef6\u7b49\u4e1c\u897f. app = Flask ( __name__ ) # \u4f7f\u7528route()\u88c5\u9970\u5668\u6765\u544a\u8bc9Flask\u89e6\u53d1\u51fd\u6570\u7684URL @app.route ( '/' ) def hello_world (): \"\"\"\u8bf7\u6c42\u6307\u5b9a\u7684url\u540e\uff0c\u6267\u884c\u7684\u4e3b\u8981\u903b\u8f91\u51fd\u6570\"\"\" # \u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u4fe1\u606f:'Hello, World!' return 'Hello, World!' if __name__ == '__main__' : app . run ( host = \"0.0.0.0\" , port = 5001 ) \u542f\u52a8\u670d\u52a1: python app.py \u67e5\u770b\u6548\u679c: \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740http://0.0.0.0:5001\u53ef\u770b\u89c1\u6253\u5370\u4e86'Hello, World'. \u8fd9\u91cc\u9700\u8981\u5b66\u751f\u81ea\u5df1\u5c1d\u8bd5\u3002 web\u7ec4\u4ef6Gunicorn: Gunicorn\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u9ad8\u6027\u80fd\u7684Python WSGI UNIX HTTP\u670d\u52a1\u7ec4\u4ef6(WSGI: Web Server Gateway Interface)\uff0c\u79fb\u690d\u81eaRuby\u7684\u72ec\u89d2\u517d\uff08Unicorn \uff09\u9879\u76ee\uff0c\u5177\u6709\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8d44\u6e90\u6d88\u8017\uff0c\u4ee5\u53ca\u9ad8\u6027\u80fd\u7b49\u7279\u70b9\u3002 \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Gunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528, \u5904\u7406\u8bf7\u6c42, \u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5gunicorn pip install gunicorn == 20 .0.4 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u6ce8\u610f\uff1akill\u6389\u4e4b\u524d\u76845001\u7aef\u53e3\u670d\u52a1\uff0c\u4e0d\u518d\u4f7f\u7528\u539f\u751f\u7684\u542f\u52a8\u65b9\u5f0f # \u800c\u662f\u4f7f\u7528gunicorn\u542f\u52a8Flask\u670d\u52a1: gunicorn -w 1 -b 0 .0.0.0:5001 app:app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570, \u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # app:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e, \u5728app.py\u4e2d\u7684app\u5bf9\u8c61 \u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1 \u6211\u4eec\u53ef\u4ee5\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u5206\u4e3a\u4e09\u6b65: \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b: # Flask\u6846\u67b6\u56fa\u5b9a\u5de5\u5177 from flask import Flask from flask import request app = Flask ( __name__ ) from maskrcnn_benchmark.utils.model_serialization import load_state_dict # \u8fd9\u662f\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4fdd\u5b58\u7684\u67d0\u4e00epoch\u7684\u591a\u6a21\u6001\u6a21\u578b\u540d\u5b57 model_name = \"multimodal_model.ckpt\" # \u6700\u65b0\u6a21\u578b\u7684\u5168\u8def\u5f84 model_path = \"/data/model/\" + model_name config = { \"model_name\" : \"bert-base-uncased\" , \"mode\" : \"vilbert\" , \"do_lower_case\" : \"True\" , \"num_labels\" : \"2\" , \"save_mode\" : \"pretrained\" , \"max_length\" : \"228\" , \"gpu_id\" : \"0\" } # \u52a0\u8f7d\u5df2\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u6ce8\u610f: \u8fd9\u6bb5\u52a0\u8f7d\u8bed\u53e5\u4e0d\u80fd\u5199\u5165\u4e0b\u65b9\u7684\u51fd\u6570\u4e2d\uff0c # \u5426\u5219\u5c06\u4f1a\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u91cd\u65b0\u52a0\u8f7d def from_pretrained ( checkpoint , config ): # \u6062\u590d\u6a21\u578b\u7ed3\u6784 instance = VisualBERT ( config ) instance . is_pretrained = True instance . build () # \u52a0\u8f7d\u53c2\u6570 with PathManager . open ( checkpoint , \"rb\" ) as f : checkpoint = torch . load ( f , map_location = lambda storage , loc : storage ) incompatible_keys = instance . load_state_dict ( checkpoint , strict = False ) # \u4f7f\u7528\u8bc4\u4f30\u6a21\u5f0f instance . eval () return instance model = from_pretrained ( model_path , config ) # \u5b9e\u4f8b\u5316\u56fe\u50cf\u5904\u7406\u7684\u7c7b\uff0c\u8be5\u7c7b\u5728\u4e4b\u524d\u7684\u591a\u6a21\u6001\u5b66\u4e60\u4e2d\u4f7f\u7528 fe = FeatureExtractor () # \u5b9e\u4f8b\u5316\u6587\u672c\u7279\u5f81\u5904\u7406\u7684\u7c7b text_processor = BertTokenizer ( config ) # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f, \u8fd9\u91cc\u4f7f\u7528POST\u8bf7\u6c42 @app.route ( \"/v1/multimodal/\" , methods = [ \"POST\" ]) def recogniition (): # \u9996\u5148\u63a5\u53d7\u4f20\u8fc7\u6765\u7684\u6570\u636e\u4f53\uff0c\u5373\u54a8\u8be2\u5e08\u6240\u6709\u7684\u5bf9\u8bdd\u548c\u7d22\u5f15\u5217\u8868 text = request . get_json ()[ \"text\" ] img_uri = request . get_json ()[ \"img_uri\" ] image_feature = get_detectron_features ( img_uri ) text_feature = text_processor ( text ) prediction = model ( text_feature , image_feature ) prediction = prediction [ 'scores' ] . detach () . cpu () . numpy () index_predict = np . argmax ( prediction , axis = 1 ) return index_predict \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u6765\u542f\u52a8\u670d\u52a1 # \u5219\u53ef\u4ee5\u6dfb\u52a0--chdir\u53c2\u6570\u6765\u6307\u660eapp\u8def\u5f84 gunicorn -w 1 -b 0 .0.0.0:5001 --chdir /data/multimodal_server/ app:app \u8f93\u51fa\u6548\u679c: [2020-06-04 17:04:11 +0800] [28276] [INFO] Starting gunicorn 20.0.4 [2020-06-04 17:04:11 +0800] [28276] [INFO] Listening at: http://0.0.0.0:5001 (28276) [2020-06-04 17:04:11 +0800] [28276] [INFO] Using worker: sync [2020-06-04 17:04:11 +0800] [28279] [INFO] Booting worker with pid: 28279 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 import requests import time # \u6839\u636egunicorn\u5f00\u542f\u76845001\u7aef\u53e3\uff0capp.py\u4e2d\u7684url\u8def\u5f84 url = \"http://0.0.0.0:5001/v1/multimodal/\" # key\u4e3atext\uff0c\u5185\u5bb9\u4e3a\u54a8\u8be2\u5e08\u6240\u6709\u5bf9\u8bdd\u5185\u5bb9\u548c\u7d22\u5f15\u7684\u5217\u8868 data = { \"text\" : \"\u5c0fs\u56fa\u7136\u540d\u4e0d\u865a\u4f20\" , \"img_uri\" : \"http://127.12.321.12/img/123.png\" } # \u8d85\u65f6\u65f6\u95f4\u4e3a200 res = requests . post ( url , json = data , timeout = 200 ) print ( res . text ) \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u70ed\u66f4\u65b0\u4e0e\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0 \u5b66\u4e60\u4e86Flask\u670d\u52a1\u7ec4\u4ef6\u7684\u4f7f\u7528 \u5b66\u4e60\u4e86\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5","title":"\u4f7f\u7528flask\u90e8\u7f72\u6a21\u578b\u670d\u52a1"},{"location":"4/#_1","text":"\u4e86\u89e3\u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u4ee5\u53ca\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0\u3002 \u4e86\u89e3Flask\u6846\u67b6\u53ca\u5176\u76f8\u5173\u7684\u670d\u52a1\u7ec4\u4ef6\u3002 \u638c\u63e1\u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"4/#_2","text":"\u56e0\u4e3a\u8bad\u7ec3AI\u6a21\u578b\u5f80\u5f80\u662f\u8f83\u5927\u7684\u6587\u4ef6\uff0c\u5728\u6bcf\u6b21IO\u65f6\u5f80\u5f80\u6bd4\u8f83\u8017\u65f6\uff0c\u56e0\u6b64\u4f1a\u9009\u62e9\u5728\u670d\u52a1\u5f00\u542f\u65f6\u8bfb\u5165\u5185\u5b58\uff0c\u907f\u514dIO\u64cd\u4f5c\u3002\u800c\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u610f\u5473\u7740\u5f53\u6211\u4eec\u66f4\u65b0\u6a21\u578b\u65f6\u9700\u8981\u6682\u505c\u670d\u52a1\uff0c \u8fd9\u5bf9\u4e8e\u5728\u7ebf\u4efb\u52a1\u662f\u975e\u5e38\u4e0d\u53ef\u53d6\u7684\u884c\u4e3a\uff1b\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65e2\u80fd\u907f\u514dIO\u53c8\u80fd\u4f7f\u7528\u6237\u65e0\u611f\u77e5\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u7684\u8981\u6c42\u5c31\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u8981\u6c42\u3002","title":"\u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0"},{"location":"4/#_3","text":"\u6700\u5e38\u89c1\u7684\u6ee1\u8db3\u70ed\u66f4\u65b0\u8981\u6c42\u7684\u65b9\u6cd5\u5c31\u662f\u4e00\u540c\u5f00\u542f\u4e24\u4e2a\u6a21\u578b\u670d\u52a1\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u6b63\u5f0f\u4f7f\u7528\uff0c\u4e00\u4e2a\u4f5c\u4e3abackup(\u5907\u7528)\uff0c\u5f53\u6211\u4eec\u6709\u66f4\u65b0\u9700\u6c42\u65f6\uff0c\u5c06\u6b63\u5f0f\u670d\u52a1\u6682\u505c\u8fdb\u884c\u6a21\u578b\u66f4\u6362\uff0c\u800c\u6b64\u65f6\u5907\u7528\u670d\u52a1\u5c06\u7ee7\u7eed\u4e3a\u7528\u6237\u670d\u52a1\uff0c\u76f4\u5230\u6b63\u5f0f\u670d\u52a1\u91cd\u65b0\u4e0a\u7ebf\u3002\u5728\u6b63\u5f0f\u670d\u52a1\u8fd0\u8f6c\u6b63\u5e38\u540e\uff0c\u518d\u4e3a\u5907\u7528\u670d\u52a1\u66f4\u6362\u6a21\u578b\u3002","title":"\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0"},{"location":"4/#flask","text":"web\u6846\u67b6FLask\uff1a Flask\u6846\u67b6\u662f\u5f53\u4e0b\u6700\u53d7\u6b22\u8fce\u7684python\u8f7b\u91cf\u7ea7\u6846\u67b6, \u4e5f\u662fpytorch\u5b98\u7f51\u6307\u5b9a\u7684\u90e8\u7f72\u6846\u67b6. Flask\u7684\u57fa\u672c\u6a21\u5f0f\u4e3a\u5728\u7a0b\u5e8f\u91cc\u5c06\u4e00\u4e2a\u89c6\u56fe\u51fd\u6570\u5206\u914d\u7ed9\u4e00\u4e2aURL\uff0c\u6bcf\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2aURL\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u7ed9\u8be5URL\u5206\u914d\u597d\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u83b7\u53d6\u51fd\u6570\u7684\u8fd4\u56de\u503c. \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Flask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5Flask pip install Flask == 1 .1.1 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u5bfc\u5165Flask\u7c7b from flask import Flask # \u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b9e\u4f8bapp, \u53c2\u6570\u4e3a__name__, \u8fd9\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\uff0c # \u8fd9\u6837Flask\u624d\u80fd\u77e5\u9053\u5728\u54ea\u91cc\u53ef\u627e\u5230\u6a21\u677f\u548c\u9759\u6001\u6587\u4ef6\u7b49\u4e1c\u897f. app = Flask ( __name__ ) # \u4f7f\u7528route()\u88c5\u9970\u5668\u6765\u544a\u8bc9Flask\u89e6\u53d1\u51fd\u6570\u7684URL @app.route ( '/' ) def hello_world (): \"\"\"\u8bf7\u6c42\u6307\u5b9a\u7684url\u540e\uff0c\u6267\u884c\u7684\u4e3b\u8981\u903b\u8f91\u51fd\u6570\"\"\" # \u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u4fe1\u606f:'Hello, World!' return 'Hello, World!' if __name__ == '__main__' : app . run ( host = \"0.0.0.0\" , port = 5001 ) \u542f\u52a8\u670d\u52a1: python app.py \u67e5\u770b\u6548\u679c: \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740http://0.0.0.0:5001\u53ef\u770b\u89c1\u6253\u5370\u4e86'Hello, World'. \u8fd9\u91cc\u9700\u8981\u5b66\u751f\u81ea\u5df1\u5c1d\u8bd5\u3002 web\u7ec4\u4ef6Gunicorn: Gunicorn\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u9ad8\u6027\u80fd\u7684Python WSGI UNIX HTTP\u670d\u52a1\u7ec4\u4ef6(WSGI: Web Server Gateway Interface)\uff0c\u79fb\u690d\u81eaRuby\u7684\u72ec\u89d2\u517d\uff08Unicorn \uff09\u9879\u76ee\uff0c\u5177\u6709\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8d44\u6e90\u6d88\u8017\uff0c\u4ee5\u53ca\u9ad8\u6027\u80fd\u7b49\u7279\u70b9\u3002 \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Gunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528, \u5904\u7406\u8bf7\u6c42, \u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5gunicorn pip install gunicorn == 20 .0.4 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u6ce8\u610f\uff1akill\u6389\u4e4b\u524d\u76845001\u7aef\u53e3\u670d\u52a1\uff0c\u4e0d\u518d\u4f7f\u7528\u539f\u751f\u7684\u542f\u52a8\u65b9\u5f0f # \u800c\u662f\u4f7f\u7528gunicorn\u542f\u52a8Flask\u670d\u52a1: gunicorn -w 1 -b 0 .0.0.0:5001 app:app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570, \u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # app:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e, \u5728app.py\u4e2d\u7684app\u5bf9\u8c61","title":"Flask\u670d\u52a1\u7ec4\u4ef6"},{"location":"4/#flask_1","text":"\u6211\u4eec\u53ef\u4ee5\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u5206\u4e3a\u4e09\u6b65: \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5","title":"\u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1"},{"location":"4/#apppy","text":"# Flask\u6846\u67b6\u56fa\u5b9a\u5de5\u5177 from flask import Flask from flask import request app = Flask ( __name__ ) from maskrcnn_benchmark.utils.model_serialization import load_state_dict # \u8fd9\u662f\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4fdd\u5b58\u7684\u67d0\u4e00epoch\u7684\u591a\u6a21\u6001\u6a21\u578b\u540d\u5b57 model_name = \"multimodal_model.ckpt\" # \u6700\u65b0\u6a21\u578b\u7684\u5168\u8def\u5f84 model_path = \"/data/model/\" + model_name config = { \"model_name\" : \"bert-base-uncased\" , \"mode\" : \"vilbert\" , \"do_lower_case\" : \"True\" , \"num_labels\" : \"2\" , \"save_mode\" : \"pretrained\" , \"max_length\" : \"228\" , \"gpu_id\" : \"0\" } # \u52a0\u8f7d\u5df2\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u6ce8\u610f: \u8fd9\u6bb5\u52a0\u8f7d\u8bed\u53e5\u4e0d\u80fd\u5199\u5165\u4e0b\u65b9\u7684\u51fd\u6570\u4e2d\uff0c # \u5426\u5219\u5c06\u4f1a\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u91cd\u65b0\u52a0\u8f7d def from_pretrained ( checkpoint , config ): # \u6062\u590d\u6a21\u578b\u7ed3\u6784 instance = VisualBERT ( config ) instance . is_pretrained = True instance . build () # \u52a0\u8f7d\u53c2\u6570 with PathManager . open ( checkpoint , \"rb\" ) as f : checkpoint = torch . load ( f , map_location = lambda storage , loc : storage ) incompatible_keys = instance . load_state_dict ( checkpoint , strict = False ) # \u4f7f\u7528\u8bc4\u4f30\u6a21\u5f0f instance . eval () return instance model = from_pretrained ( model_path , config ) # \u5b9e\u4f8b\u5316\u56fe\u50cf\u5904\u7406\u7684\u7c7b\uff0c\u8be5\u7c7b\u5728\u4e4b\u524d\u7684\u591a\u6a21\u6001\u5b66\u4e60\u4e2d\u4f7f\u7528 fe = FeatureExtractor () # \u5b9e\u4f8b\u5316\u6587\u672c\u7279\u5f81\u5904\u7406\u7684\u7c7b text_processor = BertTokenizer ( config ) # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f, \u8fd9\u91cc\u4f7f\u7528POST\u8bf7\u6c42 @app.route ( \"/v1/multimodal/\" , methods = [ \"POST\" ]) def recogniition (): # \u9996\u5148\u63a5\u53d7\u4f20\u8fc7\u6765\u7684\u6570\u636e\u4f53\uff0c\u5373\u54a8\u8be2\u5e08\u6240\u6709\u7684\u5bf9\u8bdd\u548c\u7d22\u5f15\u5217\u8868 text = request . get_json ()[ \"text\" ] img_uri = request . get_json ()[ \"img_uri\" ] image_feature = get_detectron_features ( img_uri ) text_feature = text_processor ( text ) prediction = model ( text_feature , image_feature ) prediction = prediction [ 'scores' ] . detach () . cpu () . numpy () index_predict = np . argmax ( prediction , axis = 1 ) return index_predict","title":"\u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b:"},{"location":"4/#gunicorn","text":"# \u5219\u53ef\u4ee5\u6dfb\u52a0--chdir\u53c2\u6570\u6765\u6307\u660eapp\u8def\u5f84 gunicorn -w 1 -b 0 .0.0.0:5001 --chdir /data/multimodal_server/ app:app \u8f93\u51fa\u6548\u679c: [2020-06-04 17:04:11 +0800] [28276] [INFO] Starting gunicorn 20.0.4 [2020-06-04 17:04:11 +0800] [28276] [INFO] Listening at: http://0.0.0.0:5001 (28276) [2020-06-04 17:04:11 +0800] [28276] [INFO] Using worker: sync [2020-06-04 17:04:11 +0800] [28279] [INFO] Booting worker with pid: 28279","title":"\u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u6765\u542f\u52a8\u670d\u52a1"},{"location":"4/#testpy","text":"import requests import time # \u6839\u636egunicorn\u5f00\u542f\u76845001\u7aef\u53e3\uff0capp.py\u4e2d\u7684url\u8def\u5f84 url = \"http://0.0.0.0:5001/v1/multimodal/\" # key\u4e3atext\uff0c\u5185\u5bb9\u4e3a\u54a8\u8be2\u5e08\u6240\u6709\u5bf9\u8bdd\u5185\u5bb9\u548c\u7d22\u5f15\u7684\u5217\u8868 data = { \"text\" : \"\u5c0fs\u56fa\u7136\u540d\u4e0d\u865a\u4f20\" , \"img_uri\" : \"http://127.12.321.12/img/123.png\" } # \u8d85\u65f6\u65f6\u95f4\u4e3a200 res = requests . post ( url , json = data , timeout = 200 ) print ( res . text )","title":"\u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5"},{"location":"4/#_4","text":"\u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u70ed\u66f4\u65b0\u4e0e\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0 \u5b66\u4e60\u4e86Flask\u670d\u52a1\u7ec4\u4ef6\u7684\u4f7f\u7528 \u5b66\u4e60\u4e86\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"5/","text":"\u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u4ee5\u53ca\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0\u3002 \u4e86\u89e3Flask\u6846\u67b6\u53ca\u5176\u76f8\u5173\u7684\u670d\u52a1\u7ec4\u4ef6\u3002 \u638c\u63e1\u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u3002 \u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0 \u56e0\u4e3a\u8bad\u7ec3AI\u6a21\u578b\u5f80\u5f80\u662f\u8f83\u5927\u7684\u6587\u4ef6\uff0c\u5728\u6bcf\u6b21IO\u65f6\u5f80\u5f80\u6bd4\u8f83\u8017\u65f6\uff0c\u56e0\u6b64\u4f1a\u9009\u62e9\u5728\u670d\u52a1\u5f00\u542f\u65f6\u8bfb\u5165\u5185\u5b58\uff0c\u907f\u514dIO\u64cd\u4f5c\u3002\u800c\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u610f\u5473\u7740\u5f53\u6211\u4eec\u66f4\u65b0\u6a21\u578b\u65f6\u9700\u8981\u6682\u505c\u670d\u52a1\uff0c \u8fd9\u5bf9\u4e8e\u5728\u7ebf\u4efb\u52a1\u662f\u975e\u5e38\u4e0d\u53ef\u53d6\u7684\u884c\u4e3a\uff1b\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65e2\u80fd\u907f\u514dIO\u53c8\u80fd\u4f7f\u7528\u6237\u65e0\u611f\u77e5\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u7684\u8981\u6c42\u5c31\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u8981\u6c42\u3002 \u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0 \u6700\u5e38\u89c1\u7684\u6ee1\u8db3\u70ed\u66f4\u65b0\u8981\u6c42\u7684\u65b9\u6cd5\u5c31\u662f\u4e00\u540c\u5f00\u542f\u4e24\u4e2a\u6a21\u578b\u670d\u52a1\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u6b63\u5f0f\u4f7f\u7528\uff0c\u4e00\u4e2a\u4f5c\u4e3abackup(\u5907\u7528)\uff0c\u5f53\u6211\u4eec\u6709\u66f4\u65b0\u9700\u6c42\u65f6\uff0c\u5c06\u6b63\u5f0f\u670d\u52a1\u6682\u505c\u8fdb\u884c\u6a21\u578b\u66f4\u6362\uff0c\u800c\u6b64\u65f6\u5907\u7528\u670d\u52a1\u5c06\u7ee7\u7eed\u4e3a\u7528\u6237\u670d\u52a1\uff0c\u76f4\u5230\u6b63\u5f0f\u670d\u52a1\u91cd\u65b0\u4e0a\u7ebf\u3002\u5728\u6b63\u5f0f\u670d\u52a1\u8fd0\u8f6c\u6b63\u5e38\u540e\uff0c\u518d\u4e3a\u5907\u7528\u670d\u52a1\u66f4\u6362\u6a21\u578b\u3002 Flask\u670d\u52a1\u7ec4\u4ef6 web\u6846\u67b6FLask\uff1a Flask\u6846\u67b6\u662f\u5f53\u4e0b\u6700\u53d7\u6b22\u8fce\u7684python\u8f7b\u91cf\u7ea7\u6846\u67b6, \u4e5f\u662fpytorch\u5b98\u7f51\u6307\u5b9a\u7684\u90e8\u7f72\u6846\u67b6. Flask\u7684\u57fa\u672c\u6a21\u5f0f\u4e3a\u5728\u7a0b\u5e8f\u91cc\u5c06\u4e00\u4e2a\u89c6\u56fe\u51fd\u6570\u5206\u914d\u7ed9\u4e00\u4e2aURL\uff0c\u6bcf\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2aURL\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u7ed9\u8be5URL\u5206\u914d\u597d\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u83b7\u53d6\u51fd\u6570\u7684\u8fd4\u56de\u503c. \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Flask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5Flask pip install Flask == 1 .1.1 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u5bfc\u5165Flask\u7c7b from flask import Flask # \u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b9e\u4f8bapp, \u53c2\u6570\u4e3a__name__, \u8fd9\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\uff0c # \u8fd9\u6837Flask\u624d\u80fd\u77e5\u9053\u5728\u54ea\u91cc\u53ef\u627e\u5230\u6a21\u677f\u548c\u9759\u6001\u6587\u4ef6\u7b49\u4e1c\u897f. app = Flask ( __name__ ) # \u4f7f\u7528route()\u88c5\u9970\u5668\u6765\u544a\u8bc9Flask\u89e6\u53d1\u51fd\u6570\u7684URL @app.route ( '/' ) def hello_world (): \"\"\"\u8bf7\u6c42\u6307\u5b9a\u7684url\u540e\uff0c\u6267\u884c\u7684\u4e3b\u8981\u903b\u8f91\u51fd\u6570\"\"\" # \u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u4fe1\u606f:'Hello, World!' return 'Hello, World!' if __name__ == '__main__' : app . run ( host = \"0.0.0.0\" , port = 5001 ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Info/fasttext_server/app.py \u542f\u52a8\u670d\u52a1: python app.py \u67e5\u770b\u6548\u679c: \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740http://0.0.0.0:5001\u53ef\u770b\u89c1\u6253\u5370\u4e86'Hello, World'. web\u7ec4\u4ef6Gunicorn: Gunicorn\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u9ad8\u6027\u80fd\u7684Python WSGI UNIX HTTP\u670d\u52a1\u7ec4\u4ef6(WSGI: Web Server Gateway Interface)\uff0c\u79fb\u690d\u81eaRuby\u7684\u72ec\u89d2\u517d\uff08Unicorn \uff09\u9879\u76ee\uff0c\u5177\u6709\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8d44\u6e90\u6d88\u8017\uff0c\u4ee5\u53ca\u9ad8\u6027\u80fd\u7b49\u7279\u70b9\u3002 \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Gunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528, \u5904\u7406\u8bf7\u6c42, \u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5gunicorn pip install gunicorn == 20 .0.4 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u6ce8\u610f\uff1akill\u6389\u4e4b\u524d\u76845001\u7aef\u53e3\u670d\u52a1\uff0c\u4e0d\u518d\u4f7f\u7528\u539f\u751f\u7684\u542f\u52a8\u65b9\u5f0f # \u800c\u662f\u4f7f\u7528gunicorn\u542f\u52a8Flask\u670d\u52a1: gunicorn -w 1 -b 0 .0.0.0:5001 app:app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570, \u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # app:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e, \u5728app.py\u4e2d\u7684app\u5bf9\u8c61 \u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1 \u6211\u4eec\u53ef\u4ee5\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u5206\u4e3a\u4e09\u6b65: \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0 \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b: # Flask\u6846\u67b6\u56fa\u5b9a\u5de5\u5177 from flask import Flask from flask import request app = Flask ( __name__ ) # \u5bfc\u5165fasttext import fasttext import jieba # \u6700\u65b0\u7684\u6a21\u578b\uff0c\u5927\u5bb6\u6839\u636e\u81ea\u5df1\u4e4b\u524d\u8bad\u7ec3\u7684\u6a21\u578b\u540d\u5b57\u8fdb\u884c\u4fee\u6539 model_name = \"name_question_1591259822.bin\" # \u6700\u65b0\u6a21\u578b\u7684\u5168\u8def\u5f84 model_path = \"/data/ItcastBrain/Info/fasttext_model/\" + model_name # \u52a0\u8f7d\u5df2\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u6ce8\u610f: \u8fd9\u6bb5\u52a0\u8f7d\u8bed\u53e5\u4e0d\u80fd\u5199\u5165\u4e0b\u65b9\u7684\u51fd\u6570\u4e2d\uff0c # \u5426\u5219\u5c06\u4f1a\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u91cd\u65b0\u52a0\u8f7d model = fasttext . load_model ( model_path ) # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f, \u8fd9\u91cc\u4f7f\u7528POST\u8bf7\u6c42 @app.route ( \"/v1/is_name_question/\" , methods = [ \"POST\" ]) def recogniition (): \"\"\" \u59d3\u540d\u95ee\u9898\u8bc6\u522b\u51fd\u6570 \u5b83\u7684\u8f93\u5165\u54a8\u8be2\u5e08\u6240\u6709\u7684\u5bf9\u8bdd\u548c\u7d22\u5f15\u5217\u8868,[[content, index], [content, index], ...] \u5b83\u7684\u8f93\u51fa\u662f\u59d3\u540d\u95ee\u9898\u6587\u672c\u5bf9\u5e94\u7684index\uff0c\u5982\u679c\u6ca1\u6709\u5219\u4e3a-1 \"\"\" # \u9996\u5148\u63a5\u53d7\u4f20\u8fc7\u6765\u7684\u6570\u636e\u4f53\uff0c\u5373\u54a8\u8be2\u5e08\u6240\u6709\u7684\u5bf9\u8bdd\u548c\u7d22\u5f15\u5217\u8868 text = request . get_json ()[ \"text\" ] # \u8bbe\u7f6e\u9ed8\u8ba4result\u4e3a-1 result = - 1 # \u904d\u5386\u5bf9\u8bdd\u5185\u5bb9\u548c\u7d22\u5f15 for te , index in text : # \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b predicted = model . predict ( \" \" . join ( jieba . cut ( te ))) if predicted [ 0 ][ 0 ] == \"__label__name\" : # \u5982\u679c\u9884\u6d4b\u51fa\u7684\u6807\u7b7e\u4e3a\"__label__name\", \u5219\u8bc1\u660e\u51fa\u73b0\u59d3\u540d\u8be2\u95ee\u8bed\u53e5 # \u8bb0\u5f55\u7d22\u5f15 result = index # \u505c\u6b62\u5faa\u73af\uff0c\u56e0\u4e3a\u5728\u5bf9\u8bdd\u4e2d\u5ba2\u670d\u5f80\u5f80\u53ea\u8be2\u95ee\u4e00\u6b21\u5b66\u5458\u59d3\u540d break # \u8fd4\u56de\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u7ed3\u679c\uff08\u8fd4\u56dejson\u6216str\u5f62\u5f0f\u90fd\u662f\u53ef\u4ee5\u7684\uff09 return str ( result ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Info/fasttext_server/app.py \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u6765\u542f\u52a8\u670d\u52a1 # \u5047\u5982\u6211\u4eec\u4e0d\u518d/data/ItcastBrain/Info/fasttext_server/\u8def\u5f84\u4e0b\u542f\u52a8 # \u5219\u53ef\u4ee5\u6dfb\u52a0--chdir\u53c2\u6570\u6765\u6307\u660eapp\u8def\u5f84 gunicorn -w 1 -b 0 .0.0.0:5001 --chdir /data/ItcastBrain/Info/fasttext_server/ app:app \u8f93\u51fa\u6548\u679c: [2020-06-04 17:04:11 +0800] [28276] [INFO] Starting gunicorn 20.0.4 [2020-06-04 17:04:11 +0800] [28276] [INFO] Listening at: http://0.0.0.0:5001 (28276) [2020-06-04 17:04:11 +0800] [28276] [INFO] Using worker: sync [2020-06-04 17:04:11 +0800] [28279] [INFO] Booting worker with pid: 28279 Warning : `load_model` does not return WordVectorModel or SupervisedModel any more, but a `FastText` object which is very similar. \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 import requests import time # \u6839\u636egunicorn\u5f00\u542f\u76845001\u7aef\u53e3\uff0capp.py\u4e2d\u7684url\u8def\u5f84 url = \"http://0.0.0.0:5001/v1/is_name_question/\" # key\u4e3atext\uff0c\u5185\u5bb9\u4e3a\u54a8\u8be2\u5e08\u6240\u6709\u5bf9\u8bdd\u5185\u5bb9\u548c\u7d22\u5f15\u7684\u5217\u8868 data = { \"text\" : [ [ \"\u4f60\u597d\uff0c\u4f60\u662f\u60f3\u4e86\u89e3\u54ea\u4e2a\u8bfe\u7a0b\u5462\uff1f\" , 0 ], [ \"\u8fd8\u5728\u4e48\u540c\u5b66\uff1f\" , 0 ], [ \"\u4f60\u597d\" , 1 ], [ \"\u60a8\u60f3\u4e86\u89e3\u54ea\u4e2a\u4e13\u4e1a\u7684\u5b66\u8d39\u5462\" , 1 ], [ \"\u4e13\u4e1a\u4e0d\u540c\uff0c\u5b66\u65f6\u5b66\u8d39\u4e5f\u4e0d\u4e00\u6837\" , 1 ], [ \"\u597d\u7684\uff0c\u65b9\u4fbfQQ\u6216\u8005\u5fae\u4fe1\uff0c\u90ae\u7bb1\u63a5\u6536\u5417\uff1f\u6211\u8fd9\u8fb9\u53d1\u60a8\" , 3 ], [ \"\u60a8\u8d35\u59d3\" , 5 ], ] } # \u591a\u5c42\u5d4c\u5957\u5fc5\u987b\u4f7f\u7528json=data # \u8d85\u65f6\u65f6\u95f4\u4e3a200 start = time . time () res = requests . post ( url , json = data , timeout = 200 ) end = time . time () print ( end - start ) print ( res . text ) \u4ee3\u7801\u4f4d\u7f6e: data/ItcastBrain/Info/fasttext_server/test.py \u8f93\u51fa\u6548\u679c: # \u5e73\u5747\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u53ea\u9700\u89813.5ms 0.003493785858154297 # \u8fd4\u56de\u5bf9\u5e94\u7684\u7d22\u5f15 5 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0 \u5230\u8fd9\u91cc\u8bf4\u660e\u6211\u4eec\u6a21\u578b\u670d\u52a1\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e4b\u540e\u6211\u4eec\u5c06\u542f\u52a8\u4e24\u4e2a\u540c\u6837\u7684\u670d\u52a1\uff0c\u5206\u522b\u4f7f\u75285001\u548c5002\u7aef\u53e3, \u5e76\u5c06\u4e24\u4e2a\u670d\u52a1\u4f7f\u7528Nginx\u4ee3\u7406\u5b9c\u6ee1\u8db3\u70ed\u66f4\u65b0\u3002\u4e0b\u9762\u5bf9nginx\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u4ecb\u7ecd\uff0c\u5e76\u5bf9\u5176\u4e2d\u7684\u914d\u7f6e\u8fdb\u884c\u8bf4\u660e\u3002 Nginx: Nginx\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684HTTP\u548c\u53cd\u5411\u4ee3\u7406web\u670d\u52a1\u5668\uff0c\u4e5f\u662f\u5de5\u4e1a\u754cweb\u670d\u52a1\u6700\u5e38\u4f7f\u7528\u7684\u5916\u5c42\u4ee3\u7406\u3002 \u5b89\u88c5\uff1a yum install nginx Nginx\u70ed\u66f4\u65b0\u90e8\u5206\u914d\u7f6e\u8bf4\u660e: \u8fd9\u4e9b\u914d\u7f6e\u5df2\u7ecf\u4e3a\u5927\u5bb6\u5199\u597d\uff0c\u53ef\u4ee5\u5728/data/ItcastBrain/conf/nginx/nginx.conf\u4e2d\u8fdb\u884c\u67e5\u770b\u3002 ... # \u4ee5\u4e0b\u662f\u4e0e\u70ed\u66f4\u65b0\u6709\u5173\u7684\u914d\u7f6e # \u8fd9\u91cc\u4ee3\u7406\u4e24\u4e2a\u7aef\u53e3\u7684\u670d\u52a1 # \u5176\u4e2d 5002 \u4e3a backup \uff0c\u5373\u5f53 5001 \u670d\u52a1\u505c\u6b62\u65f6\u88ab\u542f\u7528 # \u8fd9\u91cc\u7684 prod \u8981\u4e0e\u4e0b\u9762 proxy_pass \u4e2d http : // \u540e\u7684\u540d\u79f0\u76f8\u540c upstream prod { server 0 . 0 . 0 . 0 : 5001 ; server 0 . 0 . 0 . 0 : 5002 backup ; } # nginx \u7684\u5916\u5c42\u670d\u52a1\u4f7f\u7528 8086 \u7aef\u53e3 server { listen 8086 ; server_name 0 . 0 . 0 . 0 ; location / static / { alias / data / ItcastBrain / static / ; } # \u8fd9\u91cc\u6ce8\u610f prod \u8981\u4e0e\u4e0a\u9762 upstream \u540e\u7684\u540d\u79f0\u76f8\u540c location / { proxy_pass http : // prod ; include / data / ItcastBrain / conf / nginx / uwsgi_params ; proxy_set_header X - Real - IP $ remote_addr ; } } ... Nginx\u7684\u542f\u52a8: # \u5b9e\u9645\u4e2d\u6211\u4eec\u5e76\u4e0d\u4f1a\u76f4\u63a5\u542f\u52a8Nginx\uff0c\u800c\u662f\u5728\u6574\u4f53\u670d\u52a1\u90e8\u7f72\u65f6\u4f7f\u7528supervisor\u8fdb\u884c\u542f\u52a8\u548c\u5173\u95ed # \u56e0\u6b64\u8fd9\u91cc\u5927\u5bb6\u4e86\u89e3\u4ee5\u4e0b\u542f\u52a8\u547d\u4ee4\u5373\u53ef # -c\u662f\u6307\u5411\u914d\u7f6e\u6587\u4ef6 # -g \"daemon off;\"\u4ee3\u8868\u975e\u540e\u53f0\u8fd0\u884c nginx -c /data/ItcastBrain/conf/nginx/nginx.conf -g \"daemon off;\" \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u70ed\u66f4\u65b0\u4e0e\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0 \u5b66\u4e60\u4e86Flask\u670d\u52a1\u7ec4\u4ef6\u7684\u4f7f\u7528 \u5b66\u4e60\u4e86\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0","title":"5"},{"location":"5/#_1","text":"\u4e86\u89e3\u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u4ee5\u53ca\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0\u3002 \u4e86\u89e3Flask\u6846\u67b6\u53ca\u5176\u76f8\u5173\u7684\u670d\u52a1\u7ec4\u4ef6\u3002 \u638c\u63e1\u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"5/#_2","text":"\u56e0\u4e3a\u8bad\u7ec3AI\u6a21\u578b\u5f80\u5f80\u662f\u8f83\u5927\u7684\u6587\u4ef6\uff0c\u5728\u6bcf\u6b21IO\u65f6\u5f80\u5f80\u6bd4\u8f83\u8017\u65f6\uff0c\u56e0\u6b64\u4f1a\u9009\u62e9\u5728\u670d\u52a1\u5f00\u542f\u65f6\u8bfb\u5165\u5185\u5b58\uff0c\u907f\u514dIO\u64cd\u4f5c\u3002\u800c\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u610f\u5473\u7740\u5f53\u6211\u4eec\u66f4\u65b0\u6a21\u578b\u65f6\u9700\u8981\u6682\u505c\u670d\u52a1\uff0c \u8fd9\u5bf9\u4e8e\u5728\u7ebf\u4efb\u52a1\u662f\u975e\u5e38\u4e0d\u53ef\u53d6\u7684\u884c\u4e3a\uff1b\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65e2\u80fd\u907f\u514dIO\u53c8\u80fd\u4f7f\u7528\u6237\u65e0\u611f\u77e5\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u7684\u8981\u6c42\u5c31\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u8981\u6c42\u3002","title":"\u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0"},{"location":"5/#_3","text":"\u6700\u5e38\u89c1\u7684\u6ee1\u8db3\u70ed\u66f4\u65b0\u8981\u6c42\u7684\u65b9\u6cd5\u5c31\u662f\u4e00\u540c\u5f00\u542f\u4e24\u4e2a\u6a21\u578b\u670d\u52a1\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u6b63\u5f0f\u4f7f\u7528\uff0c\u4e00\u4e2a\u4f5c\u4e3abackup(\u5907\u7528)\uff0c\u5f53\u6211\u4eec\u6709\u66f4\u65b0\u9700\u6c42\u65f6\uff0c\u5c06\u6b63\u5f0f\u670d\u52a1\u6682\u505c\u8fdb\u884c\u6a21\u578b\u66f4\u6362\uff0c\u800c\u6b64\u65f6\u5907\u7528\u670d\u52a1\u5c06\u7ee7\u7eed\u4e3a\u7528\u6237\u670d\u52a1\uff0c\u76f4\u5230\u6b63\u5f0f\u670d\u52a1\u91cd\u65b0\u4e0a\u7ebf\u3002\u5728\u6b63\u5f0f\u670d\u52a1\u8fd0\u8f6c\u6b63\u5e38\u540e\uff0c\u518d\u4e3a\u5907\u7528\u670d\u52a1\u66f4\u6362\u6a21\u578b\u3002","title":"\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0"},{"location":"5/#flask","text":"web\u6846\u67b6FLask\uff1a Flask\u6846\u67b6\u662f\u5f53\u4e0b\u6700\u53d7\u6b22\u8fce\u7684python\u8f7b\u91cf\u7ea7\u6846\u67b6, \u4e5f\u662fpytorch\u5b98\u7f51\u6307\u5b9a\u7684\u90e8\u7f72\u6846\u67b6. Flask\u7684\u57fa\u672c\u6a21\u5f0f\u4e3a\u5728\u7a0b\u5e8f\u91cc\u5c06\u4e00\u4e2a\u89c6\u56fe\u51fd\u6570\u5206\u914d\u7ed9\u4e00\u4e2aURL\uff0c\u6bcf\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2aURL\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u7ed9\u8be5URL\u5206\u914d\u597d\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u83b7\u53d6\u51fd\u6570\u7684\u8fd4\u56de\u503c. \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Flask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5Flask pip install Flask == 1 .1.1 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u5bfc\u5165Flask\u7c7b from flask import Flask # \u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b9e\u4f8bapp, \u53c2\u6570\u4e3a__name__, \u8fd9\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\uff0c # \u8fd9\u6837Flask\u624d\u80fd\u77e5\u9053\u5728\u54ea\u91cc\u53ef\u627e\u5230\u6a21\u677f\u548c\u9759\u6001\u6587\u4ef6\u7b49\u4e1c\u897f. app = Flask ( __name__ ) # \u4f7f\u7528route()\u88c5\u9970\u5668\u6765\u544a\u8bc9Flask\u89e6\u53d1\u51fd\u6570\u7684URL @app.route ( '/' ) def hello_world (): \"\"\"\u8bf7\u6c42\u6307\u5b9a\u7684url\u540e\uff0c\u6267\u884c\u7684\u4e3b\u8981\u903b\u8f91\u51fd\u6570\"\"\" # \u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u4fe1\u606f:'Hello, World!' return 'Hello, World!' if __name__ == '__main__' : app . run ( host = \"0.0.0.0\" , port = 5001 ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Info/fasttext_server/app.py \u542f\u52a8\u670d\u52a1: python app.py \u67e5\u770b\u6548\u679c: \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740http://0.0.0.0:5001\u53ef\u770b\u89c1\u6253\u5370\u4e86'Hello, World'. web\u7ec4\u4ef6Gunicorn: Gunicorn\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u9ad8\u6027\u80fd\u7684Python WSGI UNIX HTTP\u670d\u52a1\u7ec4\u4ef6(WSGI: Web Server Gateway Interface)\uff0c\u79fb\u690d\u81eaRuby\u7684\u72ec\u89d2\u517d\uff08Unicorn \uff09\u9879\u76ee\uff0c\u5177\u6709\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8d44\u6e90\u6d88\u8017\uff0c\u4ee5\u53ca\u9ad8\u6027\u80fd\u7b49\u7279\u70b9\u3002 \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Gunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528, \u5904\u7406\u8bf7\u6c42, \u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5gunicorn pip install gunicorn == 20 .0.4 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u6ce8\u610f\uff1akill\u6389\u4e4b\u524d\u76845001\u7aef\u53e3\u670d\u52a1\uff0c\u4e0d\u518d\u4f7f\u7528\u539f\u751f\u7684\u542f\u52a8\u65b9\u5f0f # \u800c\u662f\u4f7f\u7528gunicorn\u542f\u52a8Flask\u670d\u52a1: gunicorn -w 1 -b 0 .0.0.0:5001 app:app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570, \u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # app:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e, \u5728app.py\u4e2d\u7684app\u5bf9\u8c61","title":"Flask\u670d\u52a1\u7ec4\u4ef6"},{"location":"5/#flask_1","text":"\u6211\u4eec\u53ef\u4ee5\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u5206\u4e3a\u4e09\u6b65: \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0","title":"\u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1"},{"location":"5/#apppy","text":"# Flask\u6846\u67b6\u56fa\u5b9a\u5de5\u5177 from flask import Flask from flask import request app = Flask ( __name__ ) # \u5bfc\u5165fasttext import fasttext import jieba # \u6700\u65b0\u7684\u6a21\u578b\uff0c\u5927\u5bb6\u6839\u636e\u81ea\u5df1\u4e4b\u524d\u8bad\u7ec3\u7684\u6a21\u578b\u540d\u5b57\u8fdb\u884c\u4fee\u6539 model_name = \"name_question_1591259822.bin\" # \u6700\u65b0\u6a21\u578b\u7684\u5168\u8def\u5f84 model_path = \"/data/ItcastBrain/Info/fasttext_model/\" + model_name # \u52a0\u8f7d\u5df2\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u6ce8\u610f: \u8fd9\u6bb5\u52a0\u8f7d\u8bed\u53e5\u4e0d\u80fd\u5199\u5165\u4e0b\u65b9\u7684\u51fd\u6570\u4e2d\uff0c # \u5426\u5219\u5c06\u4f1a\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u91cd\u65b0\u52a0\u8f7d model = fasttext . load_model ( model_path ) # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f, \u8fd9\u91cc\u4f7f\u7528POST\u8bf7\u6c42 @app.route ( \"/v1/is_name_question/\" , methods = [ \"POST\" ]) def recogniition (): \"\"\" \u59d3\u540d\u95ee\u9898\u8bc6\u522b\u51fd\u6570 \u5b83\u7684\u8f93\u5165\u54a8\u8be2\u5e08\u6240\u6709\u7684\u5bf9\u8bdd\u548c\u7d22\u5f15\u5217\u8868,[[content, index], [content, index], ...] \u5b83\u7684\u8f93\u51fa\u662f\u59d3\u540d\u95ee\u9898\u6587\u672c\u5bf9\u5e94\u7684index\uff0c\u5982\u679c\u6ca1\u6709\u5219\u4e3a-1 \"\"\" # \u9996\u5148\u63a5\u53d7\u4f20\u8fc7\u6765\u7684\u6570\u636e\u4f53\uff0c\u5373\u54a8\u8be2\u5e08\u6240\u6709\u7684\u5bf9\u8bdd\u548c\u7d22\u5f15\u5217\u8868 text = request . get_json ()[ \"text\" ] # \u8bbe\u7f6e\u9ed8\u8ba4result\u4e3a-1 result = - 1 # \u904d\u5386\u5bf9\u8bdd\u5185\u5bb9\u548c\u7d22\u5f15 for te , index in text : # \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b predicted = model . predict ( \" \" . join ( jieba . cut ( te ))) if predicted [ 0 ][ 0 ] == \"__label__name\" : # \u5982\u679c\u9884\u6d4b\u51fa\u7684\u6807\u7b7e\u4e3a\"__label__name\", \u5219\u8bc1\u660e\u51fa\u73b0\u59d3\u540d\u8be2\u95ee\u8bed\u53e5 # \u8bb0\u5f55\u7d22\u5f15 result = index # \u505c\u6b62\u5faa\u73af\uff0c\u56e0\u4e3a\u5728\u5bf9\u8bdd\u4e2d\u5ba2\u670d\u5f80\u5f80\u53ea\u8be2\u95ee\u4e00\u6b21\u5b66\u5458\u59d3\u540d break # \u8fd4\u56de\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u7ed3\u679c\uff08\u8fd4\u56dejson\u6216str\u5f62\u5f0f\u90fd\u662f\u53ef\u4ee5\u7684\uff09 return str ( result ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Info/fasttext_server/app.py","title":"\u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b:"},{"location":"5/#gunicorn","text":"# \u5047\u5982\u6211\u4eec\u4e0d\u518d/data/ItcastBrain/Info/fasttext_server/\u8def\u5f84\u4e0b\u542f\u52a8 # \u5219\u53ef\u4ee5\u6dfb\u52a0--chdir\u53c2\u6570\u6765\u6307\u660eapp\u8def\u5f84 gunicorn -w 1 -b 0 .0.0.0:5001 --chdir /data/ItcastBrain/Info/fasttext_server/ app:app \u8f93\u51fa\u6548\u679c: [2020-06-04 17:04:11 +0800] [28276] [INFO] Starting gunicorn 20.0.4 [2020-06-04 17:04:11 +0800] [28276] [INFO] Listening at: http://0.0.0.0:5001 (28276) [2020-06-04 17:04:11 +0800] [28276] [INFO] Using worker: sync [2020-06-04 17:04:11 +0800] [28279] [INFO] Booting worker with pid: 28279 Warning : `load_model` does not return WordVectorModel or SupervisedModel any more, but a `FastText` object which is very similar.","title":"\u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u6765\u542f\u52a8\u670d\u52a1"},{"location":"5/#testpy","text":"import requests import time # \u6839\u636egunicorn\u5f00\u542f\u76845001\u7aef\u53e3\uff0capp.py\u4e2d\u7684url\u8def\u5f84 url = \"http://0.0.0.0:5001/v1/is_name_question/\" # key\u4e3atext\uff0c\u5185\u5bb9\u4e3a\u54a8\u8be2\u5e08\u6240\u6709\u5bf9\u8bdd\u5185\u5bb9\u548c\u7d22\u5f15\u7684\u5217\u8868 data = { \"text\" : [ [ \"\u4f60\u597d\uff0c\u4f60\u662f\u60f3\u4e86\u89e3\u54ea\u4e2a\u8bfe\u7a0b\u5462\uff1f\" , 0 ], [ \"\u8fd8\u5728\u4e48\u540c\u5b66\uff1f\" , 0 ], [ \"\u4f60\u597d\" , 1 ], [ \"\u60a8\u60f3\u4e86\u89e3\u54ea\u4e2a\u4e13\u4e1a\u7684\u5b66\u8d39\u5462\" , 1 ], [ \"\u4e13\u4e1a\u4e0d\u540c\uff0c\u5b66\u65f6\u5b66\u8d39\u4e5f\u4e0d\u4e00\u6837\" , 1 ], [ \"\u597d\u7684\uff0c\u65b9\u4fbfQQ\u6216\u8005\u5fae\u4fe1\uff0c\u90ae\u7bb1\u63a5\u6536\u5417\uff1f\u6211\u8fd9\u8fb9\u53d1\u60a8\" , 3 ], [ \"\u60a8\u8d35\u59d3\" , 5 ], ] } # \u591a\u5c42\u5d4c\u5957\u5fc5\u987b\u4f7f\u7528json=data # \u8d85\u65f6\u65f6\u95f4\u4e3a200 start = time . time () res = requests . post ( url , json = data , timeout = 200 ) end = time . time () print ( end - start ) print ( res . text ) \u4ee3\u7801\u4f4d\u7f6e: data/ItcastBrain/Info/fasttext_server/test.py \u8f93\u51fa\u6548\u679c: # \u5e73\u5747\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\u53ea\u9700\u89813.5ms 0.003493785858154297 # \u8fd4\u56de\u5bf9\u5e94\u7684\u7d22\u5f15 5","title":"\u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5"},{"location":"5/#nginx","text":"\u5230\u8fd9\u91cc\u8bf4\u660e\u6211\u4eec\u6a21\u578b\u670d\u52a1\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e4b\u540e\u6211\u4eec\u5c06\u542f\u52a8\u4e24\u4e2a\u540c\u6837\u7684\u670d\u52a1\uff0c\u5206\u522b\u4f7f\u75285001\u548c5002\u7aef\u53e3, \u5e76\u5c06\u4e24\u4e2a\u670d\u52a1\u4f7f\u7528Nginx\u4ee3\u7406\u5b9c\u6ee1\u8db3\u70ed\u66f4\u65b0\u3002\u4e0b\u9762\u5bf9nginx\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u4ecb\u7ecd\uff0c\u5e76\u5bf9\u5176\u4e2d\u7684\u914d\u7f6e\u8fdb\u884c\u8bf4\u660e\u3002 Nginx: Nginx\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684HTTP\u548c\u53cd\u5411\u4ee3\u7406web\u670d\u52a1\u5668\uff0c\u4e5f\u662f\u5de5\u4e1a\u754cweb\u670d\u52a1\u6700\u5e38\u4f7f\u7528\u7684\u5916\u5c42\u4ee3\u7406\u3002 \u5b89\u88c5\uff1a yum install nginx Nginx\u70ed\u66f4\u65b0\u90e8\u5206\u914d\u7f6e\u8bf4\u660e: \u8fd9\u4e9b\u914d\u7f6e\u5df2\u7ecf\u4e3a\u5927\u5bb6\u5199\u597d\uff0c\u53ef\u4ee5\u5728/data/ItcastBrain/conf/nginx/nginx.conf\u4e2d\u8fdb\u884c\u67e5\u770b\u3002 ... # \u4ee5\u4e0b\u662f\u4e0e\u70ed\u66f4\u65b0\u6709\u5173\u7684\u914d\u7f6e # \u8fd9\u91cc\u4ee3\u7406\u4e24\u4e2a\u7aef\u53e3\u7684\u670d\u52a1 # \u5176\u4e2d 5002 \u4e3a backup \uff0c\u5373\u5f53 5001 \u670d\u52a1\u505c\u6b62\u65f6\u88ab\u542f\u7528 # \u8fd9\u91cc\u7684 prod \u8981\u4e0e\u4e0b\u9762 proxy_pass \u4e2d http : // \u540e\u7684\u540d\u79f0\u76f8\u540c upstream prod { server 0 . 0 . 0 . 0 : 5001 ; server 0 . 0 . 0 . 0 : 5002 backup ; } # nginx \u7684\u5916\u5c42\u670d\u52a1\u4f7f\u7528 8086 \u7aef\u53e3 server { listen 8086 ; server_name 0 . 0 . 0 . 0 ; location / static / { alias / data / ItcastBrain / static / ; } # \u8fd9\u91cc\u6ce8\u610f prod \u8981\u4e0e\u4e0a\u9762 upstream \u540e\u7684\u540d\u79f0\u76f8\u540c location / { proxy_pass http : // prod ; include / data / ItcastBrain / conf / nginx / uwsgi_params ; proxy_set_header X - Real - IP $ remote_addr ; } } ... Nginx\u7684\u542f\u52a8: # \u5b9e\u9645\u4e2d\u6211\u4eec\u5e76\u4e0d\u4f1a\u76f4\u63a5\u542f\u52a8Nginx\uff0c\u800c\u662f\u5728\u6574\u4f53\u670d\u52a1\u90e8\u7f72\u65f6\u4f7f\u7528supervisor\u8fdb\u884c\u542f\u52a8\u548c\u5173\u95ed # \u56e0\u6b64\u8fd9\u91cc\u5927\u5bb6\u4e86\u89e3\u4ee5\u4e0b\u542f\u52a8\u547d\u4ee4\u5373\u53ef # -c\u662f\u6307\u5411\u914d\u7f6e\u6587\u4ef6 # -g \"daemon off;\"\u4ee3\u8868\u975e\u540e\u53f0\u8fd0\u884c nginx -c /data/ItcastBrain/conf/nginx/nginx.conf -g \"daemon off;\"","title":"\u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0"},{"location":"5/#_4","text":"\u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u70ed\u66f4\u65b0\u4e0e\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0 \u5b66\u4e60\u4e86Flask\u670d\u52a1\u7ec4\u4ef6\u7684\u4f7f\u7528 \u5b66\u4e60\u4e86\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"6/","text":"6.1 \u80cc\u666f\u9700\u6c42\u4e0e\u5206\u6790 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u8be5\u7cfb\u7edf\u7684\u80cc\u666f\u9700\u6c42\u3002 \u901a\u8fc7\u5bf9\u9700\u6c42\u5206\u6790\u660e\u786e\u4ea4\u4ed8\u7cfb\u7edf\u8981\u6c42\u3002 \u80cc\u666f\u9700\u6c42 \u8be5\u9700\u6c42\u6765\u81ea\u516c\u53f8\u7684\u6570\u636e\u5206\u6790\u56e2\u961f\uff0c\u4ed6\u4eec\u8d1f\u8d23\u7740\u5168\u56fd\u6559\u80b2\u5e02\u573a\u73b0\u72b6\u7684\u7edf\u8ba1\u5206\u6790\u5de5\u4f5c\uff0c\u5c24\u5176\u5728\u75ab\u60c5\u671f\u95f4\uff0c\u591a\u5c11\u673a\u6784\u4ece\u7ebf\u4e0b\u8f6c\u5230\u7ebf\u4e0a\uff0c\u4e0d\u540c\u673a\u6784\u7ebf\u4e0b\u8f6c\u7ebf\u4e0a\u7684\u901f\u5ea6\u4ee5\u53ca\u4e0d\u540c\u533a\u57df\u53d7\u75ab\u60c5\u5f71\u54cd\u7684\u60c5\u51b5\u3002\u8fd9\u4e9b\u91cd\u8981\u4fe1\u606f\u5c06\u5e2e\u52a9\u51b3\u7b56\u5c42\u628a\u63a7\u5f53\u524d\u516c\u53f8\u53d1\u5c55\u548c\u8c03\u6574\u7684\u65b9\u5411\u3002 \u6570\u636e\u5206\u6790\u56e2\u961f\u7684\u6570\u636e\u6293\u53d6\u5de5\u7a0b\u5e08\u4f1a\u5bf9\u5404\u4e2a\u6559\u80b2\u673a\u6784\u53d1\u5e03\u7684\u5f00\u73ed\u60c5\u51b5\u8fdb\u884c\u6293\u53d6\uff0c\u5305\u62ec\u5f00\u73ed\u6587\u6848\uff08\u6807\u9898\u548c\u6b63\u6587\uff09\uff0c\u5f00\u73ed\u7167\u7247\u7b49\uff0c\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u8fd9\u4e2a\u6293\u53d6\u4fe1\u606f\u5224\u65ad\u8be5\u5730\u533a\u7684\u73ed\u7ea7\u662f\u5426\u4e3a\u7ebf\u4e0b\u5f00\u73ed\uff08\u5b9e\u9645\u4e0a\uff0c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u8981\u4e48\u7ebf\u4e0a\u8981\u4e48\u7ebf\u4e0b\uff09\uff0c\u5728\u8fd9\u91cc\uff0cAI\u56e2\u961f\u51b3\u5b9a\u4f7f\u7528\u56fe\u7247\u8bc6\u522b\u6765\u533a\u5206\u5f00\u73ed\u60c5\u51b5\u3002 \u9700\u6c42\u5206\u6790 \u901a\u8fc7\u4e0a\u8ff0\u80cc\u666f\u9700\u6c42\uff0c\u8be5\u95ee\u9898\u88ab\u8f6c\u6362\u6210\u56fe\u7247\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u9996\u5148\u660e\u786e\u4ee5\u4e0b\u51e0\u70b9: \u7cfb\u7edf\u8f93\u5165: \u4e00\u5f20\u73ed\u7ea7\u5f00\u73ed\u7167\u7247\u3002 \u7cfb\u7edf\u8f93\u51fa: \u662f\u5426\u4e3a\u7ebf\u4e0b\u5f00\u73ed\uff080/1\u7684\u51b3\u7b56\u503c\uff09\u3002 \u5728\u7ebf\u670d\u52a1: \u7ecf\u8fc7\u4e0e\u540e\u7aef\u5de5\u7a0b\u5e08\u7684\u6c9f\u901a\uff0c\u6211\u6700\u7ec8\u5c06\u9700\u8981\u4ea4\u4ed8\u56fe\u7247\u8bc6\u522bAPI\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u7f29\u77ed\u54cd\u5e94\u65f6\u95f4\u5230ms\u7ea7\u522b\u3002 \u4ee5\u4e0a\u8fd9\u4e9b\u4e5f\u662f\u6211\u4eec\u6700\u7ec8\u9700\u8981\u4ea4\u4ed8\u7cfb\u7edf\u7684\u8981\u6c42\u3002 \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u7cfb\u7edf\u80cc\u666f\u9700\u6c42: \u5229\u7528\u4eba\u5de5\u667a\u80fd\u7b49\u76f8\u5173\u6280\u672f\u8bc6\u522b\u56fe\u7247\u4e2d\u5c55\u73b0\u7684\u5f00\u73ed\u60c5\u51b5\uff0c\u7ebf\u4e0a\u5f00\u73ed\u8fd8\u662f\u7ebf\u4e0b\u5f00\u73ed\u3002 \u5b66\u4e60\u4e86\u4ea4\u4ed8\u7cfb\u7edf\u8981\u6c42: \u660e\u786e\u4e86\u8f93\u5165\uff0c\u8f93\u51fa\u548c\u5728\u7ebf\u9700\u6c42\u3002 6.2 \u4ea7\u54c1\u5f62\u6001\u4e0e\u6548\u679c\u5c55\u793a \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u7cfb\u7edf\u7684\u6700\u7ec8\u4ea7\u54c1\u5f62\u6001\u3002 \u4e86\u89e3\u7cfb\u7edf\u7684\u4ea7\u54c1\u8bbe\u8ba1\u903b\u8f91\u3002 \u4ea7\u54c1\u5f62\u6001 \u6574\u4e2a\u6570\u636e\u5206\u6790\u4ea7\u54c1\u6700\u7ec8\u4ea7\u51fa\u7684\u662f\u6570\u636e\u5206\u6790\u62a5\u8868\uff0c\u91cc\u9762\u5305\u542b\u5728\u75ab\u60c5\u5f71\u54cd\u4e0b\uff0c\u5404\u79cd\u5168\u56fd\u673a\u6784\u7684\u5f00\u73ed\u60c5\u51b5\u3002 \u4ea7\u54c1\u8bbe\u8ba1\u903b\u8f91 \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4ea7\u54c1\u7684\u6700\u7ec8\u5f62\u6001\u3002 \u5b66\u4e60\u4e86\u7cfb\u7edf\u7684\u8f93\u5165\u8f93\u51fa\u8fc7\u7a0b\uff0c\u8ba9\u6211\u4eec\u5bf9\u7cfb\u7edf\u6709\u4e86\u66f4\u52a0\u76f4\u89c2\u7684\u8ba4\u8bc6\u3002 6.3 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u521d\u5b9a \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u6b65\u9aa4\u3002 \u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u6b65\u9aa4 \u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e09\u6b65: \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0 \u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u660e\u786e\u95ee\u9898: \u4ece\u6839\u636e\u7ed9\u5b9a\u7684\u56fe\u7247\u5224\u65ad\u662f\u5426\u4e3a\u7ebf\u4e0b\u5f00\u73ed\u3002 \u6570\u636e\u8981\u6c42: \u6570\u636e\u6293\u53d6\u56e2\u961f\u63d0\u4f9b\u7684\u5168\u56fd\u673a\u6784\u5f00\u73ed\u7167\u7247\u4e0d\u5c11\u4e8e500\u5f20\uff0c\u5e76\u5e0c\u671b\u8fd9\u4e9b\u7167\u7247\u6709\u4e00\u5b9a\u7684\u6807\u6ce8\u4fe1\u606f\uff08\u662f\u5426\u4e3a\u7ebf\u4e0b\u5f00\u73ed\uff09\u3002 \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u6570\u636e\u5206\u6790\u6307\u6807\uff1a 1\uff0c\u56fe\u7247\u8d28\u91cf\u6216\u683c\u5f0f\u8fc7\u6ee4 \u4f5c\u7528\uff1a \u6ee4\u9664\u56fe\u7247\u4e2d\u7684\u975e\u6cd5\u683c\u5f0f\uff08gif\uff0cmp4\u7b49\u7b49\uff09 2\uff0c\u7edf\u8ba1\u56fe\u7247\u5c3a\u5bf8\u5206\u5e03 \u4f5c\u7528\uff1a \u4e86\u89e3\u5f53\u524d\u56fe\u7247\u96c6\u7684\u56fe\u7247\u5c3a\u5bf8\u6982\u51b5\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u526a\u88c1\u5c3a\u5bf8\u9009\u62e9\u3002 \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b \u6839\u636e\u5f53\u524d\u7684\u786c\u4ef6\u8bbe\u5907\u548c\u5728\u7ebf\u9700\u6c42\uff0c\u6211\u4eec\u5c06\u5747\u8861\u51c6\u786e\u7387\u548c\u63a8\u65ad\u65f6\u95f4\u6765\u9009\u62e9\u6a21\u578b\uff0c\u7b80\u5355\u8fc7\u7a0b\u5982\u4e0b\uff1a 1\uff0c\u91c7\u96c6\u5e76\u6807\u6ce8\u4e0d\u540c\u7c7b\u578b\u95ee\u9898\u7684\u6837\u672c\u6570\u636e 2\uff0c\u8bad\u7ec3\u5e76\u9a8c\u8bc1Resnet\u7cfb\u5217\u8fdb\u884c\u5206\u7c7b \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0 \u603b\u4f53\u670d\u52a1\u67b6\u6784\u8bbe\u8ba1 \u4f7f\u7528\u57fa\u4e8eDjango\u7684\u670d\u52a1\u6846\u67b6\u3002 \u4f7f\u7528nginx\u4f5c\u4e3a\u53cd\u5411\u4ee3\u7406\u548c\u8d1f\u8f7d\u5747\u8861\u3002 \u4f7f\u7528supervisor\u4f5c\u4e3a\u5355\u670d\u52a1\u5b88\u62a4\u4e0e\u76d1\u63a7\u3002 \u4f7f\u7528uwsgi\u4f5c\u4e3a\u9ad8\u6027\u80fdweb server\u3002 \u6a21\u578b\u670d\u52a1\u5c01\u88c5 \u57fa\u4e8etensorflow/keras\u6846\u67b6\u5f00\u53d1\u7684\u6a21\u578b\u4f7f\u7528tf-serving\u8fdb\u884c\u5c01\u88c5\uff0c\u4ee5\u4fdd\u8bc1\u670d\u52a1\u5065\u58ee\u6027\u4ee5\u53ca\u6a21\u578b\u70ed\u66f4\u65b0\u3002 \u57fa\u4e8epytorch\u6846\u67b6\u5f00\u53d1\u7684\u6a21\u578b\u4f7f\u7528flask\u6846\u67b6\u8fdb\u884c\u5c01\u88c5\uff0c\u4f7f\u7528\u4ea4\u66ff\u53cc\u670d\u52a1\u4fdd\u8bc1\u6a21\u578b\u70ed\u66f4\u65b0\u3002 \u7cfb\u7edf\u8054\u8c03\u4e0e\u6d4b\u8bd5 \u4e0e\u5916\u754c\u670d\u52a1\u4f7f\u7528REST API\uff08http\uff09\u8fdb\u884c\u4ea4\u4e92\u3002 \u8f93\u5165\u4e0e\u8f93\u51fa\u4e3a\u89c4\u8303json\u683c\u5f0f\uff08\u56fe\u7247\u6570\u636e\u8fdb\u884c\u7f16\u7801\uff09\u3002 \u6839\u636e\u5b9e\u9645\u63a5\u53e3\u8c03\u7528\u60c5\u51b5\uff0c\u8fdb\u884c\u5e76\u53d1\u538b\u529b\u6d4b\u8bd5\u3002 \u7070\u5ea6\u53d1\u5e03\uff0c\u8fdb\u884c\u53ef\u7528\u6027\u6d4b\u8bd5\u3002 \u670d\u52a1\u5668\u8d44\u6e90 \u6a21\u578b\u8bad\u7ec3\u670d\u52a1\u5668: CPU\uff1a8C\uff0c16G\u5185\u5b58\uff0c100G\u786c\u76d8 \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u5668: CPU\uff1a8C\uff0c16G\u5185\u5b58\uff0c100G\u786c\u76d8\uff0c2M\u5e26\u5bbd \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u53ef\u89c6\u5316\u6570\u636e\u5206\u6790 \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0 6.4 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u5b9e\u65bd\u4e0e\u8c03\u6574 \u5b66\u4e60\u76ee\u6807 \u638c\u63e1\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5b9e\u65bd\u6b65\u9aa4\u548c\u4ee3\u7801\u5b9e\u73b0\u3002 \u638c\u63e1\u6839\u636e\u771f\u5b9e\u6570\u636e\u60c5\u51b5\u4f5c\u51fa\u7684\u4e00\u4e9b\u65b9\u6848\u8c03\u6574\u548c\u4ee3\u7801\u5b9e\u73b0\u3002 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5b9e\u65bd\u6b65\u9aa4 \u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e8c\u6b65: \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u5b9e\u73b0 \u7b2c\u4e09\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u8bad\u7ec3\u901f\u5ea6 \u7b2c\u56db\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u63a8\u65ad\u901f\u5ea6-\u6a21\u578b\u526a\u679d \u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790 \u6839\u636e\u4e4b\u524d\u7684\"\u6570\u636e\u8981\u6c42\"\uff0c\u6211\u4eec\u5c06\u4ece\u6570\u636e\u6293\u53d6\u5de5\u7a0b\u5e08\u624b\u4e2d\u83b7\u5f97\u6307\u5b9a\u6570\u636e\uff0c\u5927\u7ea62000\u5f20\u56fe\u7247\uff08\u5373\u5305\u542b\u7ebf\u4e0a\u7167\u7247\u4e5f\u5305\u542b\u7ebf\u4e0b\u7684\u7167\u7247\uff09\uff0c\u4f46\u548c\u6211\u4eec\u9884\u8ba1\u7684\u4e0d\u540c\uff0c\u8fd9\u4e9b\u56fe\u7247\u5e76\u6ca1\u6709\u63d0\u4f9b\u7ed9\u6807\u7b7e\uff0c\u610f\u5473\u7740\u9700\u8981\u6211\u4eec\u81ea\u5df1\u8fdb\u884c\u76f8\u5e94\u7684\u6807\u6ce8\u3002 \u8fdb\u884c\u56fe\u7247\u6807\u6ce8 \u8fd9\u4e9b\u56fe\u7247\u88ab\u5b58\u50a8\u5728\u8bad\u7ec3\u670d\u52a1\u5668\u7684/data/ItcastBrain_CV/image/\u8def\u5f84\u4e0b. # \u901a\u8fc7\u4ee5\u4e0bshell\u547d\u4ee4\u83b7\u5f97\u56fe\u7247\u6570\u91cf # \u8003\u8651\u6570\u636e\u5b89\u5168\uff0c\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u63d0\u4f9b\u5168\u90e82132\u5f20\u56fe\u7247\uff0c # \u53ea\u63d0\u4f9b\u4e86\u90e8\u5206\u56fe\u7247\uff0c\u5e76\u8fdb\u884c\u4e86\u6a21\u7cca\u5316 # \u56fe\u50cf\u7684\u540d\u5b57\u5df2\u88ab\u8131\u654f\u6210\u6570\u5b57\uff0c # \u5b9e\u9645\u4e0a\u5b83\u5e94\u8be5\u662f'xxx\u6821\u533axxx\u5b66\u79d1xxx\u671f\u5f00\u73ed\u5408\u7167' cd /data/ItcastBrain_CV/image/ ls | wc -l \u5728\u4eba\u5de5\u6807\u6ce8\u524d\uff0c\u5148\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6\u5939\u5206\u522b\u5b58\u50a8\u5bf9\u5e94\u7684\u56fe\u7247\uff0coffline\u548conline\uff0c\u4ee3\u8868\u7ebf\u4e0b\u548c\u7ebf\u4e0a\u3002 mkdir /data/ItcastBrain_CV/online mkdir /data/ItcastBrain_CV/offline \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5e0c\u671b\u50cf\u672c\u673a\u4e00\u6837\u80fd\u591f\u67e5\u770b\u8fd9\u4e9b\u56fe\u7247\uff0c\u56e0\u6b64\u6211\u4eec\u6765\u5230\u670d\u52a1\u5668\u7684/data/ItcastBrain_CV/\u76ee\u5f55\u4e0b\uff0c\u542f\u52a8\u4e00\u4e2a\u7b80\u5355\u7684\u670d\u52a1\uff1a # \u4f60\u7684\u670d\u52a1\u5668\u9700\u8981\u5f00\u901a8000\u7aef\u53e3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u8fdb\u884c\u56fe\u7247\u67e5\u770b python -m http.server 8000 \u8f93\u51fa\u6548\u679c: \u8fd9\u6837\u6211\u4eec\u5c31\u901a\u8fc7\u6d4f\u89c8\u5668\u6765\u67e5\u770b\u8be5\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u3002\u67e5\u770b\u6bcf\u4e00\u5f20\u56fe\u7247\uff0c\u5c06\u7ebf\u4e0a\u7684\u56fe\u7247\u901a\u8fc7 mv\u547d\u4ee4 \u8f6c\u5230online\u6587\u4ef6\u5939\u4e2d\uff0c\u8fd9\u6837\u6700\u540eimage\u5c31\u5269\u4e0boffline\u56fe\u7247\uff0c\u540c\u65f6\uff0c\u5728\u6574\u4e2a\u6807\u6ce8\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e5f\u5c06\u8fc7\u6ee4\u6389\u6240\u6709\u975e\u6cd5\u683c\u5f0f\u548c\u5df2\u7ecf\u635f\u574f\u7684\u56fe\u7247\uff0c\u5728\u540e\u7eed\u7684\u6570\u636e\u5206\u6790\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u4e0d\u518d\u9700\u8981\u8fd9\u4e9b\u6b65\u9aa4\u3002 \u901a\u8fc7\u6570\u636e\u589e\u5f3a\u6765\u5747\u8861\u6570\u636e\u96c6 \u6807\u6ce8\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u4e24\u79cd\u7c7b\u578b\u56fe\u7247\u7684\u6570\u91cf cd /data/ItcastBrain_CV/online ls | wc -l # \u6309\u7167\u7ed9\u5b9a\u7684\u90e8\u5206\u6570\u636e\uff0conline\u56fe\u7247\u6570\u91cf\u5e94\u8be5\u662f500\u5de6\u53f3 cd /data/ItcastBrain_CV/offline ls | wc -l # \u6309\u7167\u7ed9\u5b9a\u7684\u90e8\u5206\u6570\u636e\uff0coffline\u56fe\u7247\u6570\u91cf\u5e94\u8be5\u662f180\u5de6\u53f3 \u6570\u636e\u4e0d\u5747\u8861\u5bf9\u4e8c\u5206\u7c7b\u7684\u5f71\u54cd\uff1a \u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\u7684\u8bc4\u4f30\u6307\u6807\uff08\u6bd4\u5982acc\uff09\uff0c\u4e0d\u5747\u8861\u5c06\u5bfc\u81f4acc\u4e0d\u5177\u6709\u4ee3\u8868\u6027\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u6570\u636e\u589e\u5f3a\u7684\u65b9\u5f0f\u6765\u62d3\u5c55\u6570\u636e\uff0c\u4f7f\u5176\u8d8b\u4e8e\u5e73\u8861\u3002\u5f53\u7136\u89e3\u51b3\u6570\u636e\u4e0d\u5747\u8861\u4e0d\u4ec5\u4ec5\u4e00\u79cd\u65b9\u5f0f\uff0c\u4fee\u6539\u635f\u5931\u51fd\u6570\u4e2d\u6807\u7b7e\u7684\u6743\u91cd\uff0c\u4f7f\u7528AUC\u6307\u6807\u8fdb\u884c\u8bc4\u4f30\u7b49\u90fd\u662f\u5e38\u89c1\u7684\u9009\u62e9\uff0c\u4f46\u662f\u4f7f\u7528\u6570\u636e\u589e\u5f3a\u7684\u65b9\u5f0f\u5e73\u8861\u6570\u636e\u91cf\u662f\u4e1a\u754c\u516c\u8ba4\u7684\u6548\u679c\u66f4\u597d\u7684\u65b9\u5f0f\u3002 \u5982\u4f55\u505a\u6570\u636e\u589e\u5f3a: \u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\u7684\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u6bd4\u5982\uff0c\u968f\u673a\u7ffb\u8f6c\uff0c\u4e2d\u5fc3\u526a\u88c1\uff0c\u8c03\u8282\u4eae\u5ea6\uff0c\u8c03\u8282\u9971\u548c\u5ea6\u7b49\u7b49\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u628aonline\u6570\u636e\u589e\u5f3a2\u500d\u6765\u5e73\u8861offline\uff0c\u589e\u5f3a\u540eonline\u6570\u636e\u603b\u6570\u4e3a180 + 2*180=540\u3002\u6211\u4eec\u9009\u62e9\u968f\u673a\u8c03\u6574\u4eae\u5ea6\u548c\u968f\u673a\u8c03\u6574\u9971\u548c\u5ea6\u3002 \u539f\u56e0\uff1a\u5bf9\u4e8e\u54ea\u79cd\u589e\u5f3a\u65b9\u5f0f\u5408\u9002\uff0c\u53ef\u4ee5\u901a\u8fc7\u4efb\u52a1\u7279\u70b9\u8fdb\u884c\u4e00\u5b9a\u7684\u9009\u62e9\uff0c\u5bf9\u4e8e\u8be5\u4efb\u52a1\uff0c\u5373\u4f7f\u4e4b\u540e\u7684\u6570\u636e\u96c6\u8db3\u591f\u5927\uff0c\u5728\u6d4b\u8bd5\u4e2d\u4e5f\u6781\u5c11\u51fa\u73b0\u56fe\u50cf\u7ffb\u8f6c\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6293\u53d6\u7684\u5f00\u73ed\u6587\u6848\u4e00\u822c\u53d1\u5e03\u524d\u90fd\u7ecf\u8fc7\u5ba1\u6838\uff0c\u4e0d\u4f1a\u51fa\u73b0\u7167\u7247\u88ab\u7ffb\u8f6c\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u8fd9\u65b9\u9762\u7684\u589e\u5f3a\u4e00\u822c\u6700\u540e\u8003\u8651\u3002\u6211\u4eec\u901a\u8fc7\u5bf9\u6570\u636e\u7684\u5ba1\u67e5\uff0c\u8fd9\u4e9b\u7167\u7247\u6765\u81ea\u4e0d\u540c\u7684\u8bbe\u5907\u4e14\u5728\u591a\u53d8\u7684\u73af\u5883\u4e2d\uff0c\u56e0\u6b64\u56fe\u7247\u4eae\u5ea6\u548c\u9971\u548c\u5ea6\u662f\u53d8\u5316\u8f83\u5927\u7684\u65b9\u5f0f\u3002 \u6ce8\u610f\uff1a\u5173\u4e8e\u56fe\u7247\u589e\u5f3a\u5de5\u5177\u7684\u4f7f\u7528\u662f\u6ca1\u6709\u9650\u5b9a\u7684\uff0cpytorch/tensorflow\u6846\u67b6\u90fd\u6709\u5b9e\u73b0\u5de5\u5177\uff0c\u4ed6\u4eec\u7684\u5b9e\u73b0\u4e5f\u7565\u6709\u5dee\u5f02\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u4e8e\u6211\u4eec\u589e\u5f3a\u8981\u6c42\u6700\u5339\u914d\u7684\u5de5\u5177\uff0c\u8fd9\u91cc\u4f7f\u7528tf.image\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u66f4\u52a0\u4e13\u4e1a\u7684\u6570\u636e\u589e\u5f3a\u5de5\u5177\uff0c\u53ef\u4ee5\u5b66\u4e60 Albumentations \uff0c\u5b83\u7684\u4f7f\u7528\u5f88\u7b80\u5355\uff0c\u4f46\u80fd\u591f\u589e\u5f3a\u7684\u65b9\u5f0f\u5374\u975e\u5e38\u4e30\u5bcc\u3002 \u4eae\u5ea6\u548c\u9971\u548c\u5ea6\u7684\u533a\u522b\uff1a \u4eae\u5ea6\u5f80\u6697\u8d70\u5c31\u662f\u6574\u4e2a\u8272\u76f8\u504f\u6697\u6700\u6697\u5c31\u4f1a\u53d8\u7eaf\u9ed1\uff0c\u5f80\u4eae\u8d70\u5c31\u662f\u6574\u4e2a\u8272\u76f8\u504f\u767d\u4eae\u6700\u4eae\u5c31\u53d8\u7eaf\u767d\u3002\uff08\u8272\u76f8\u7684\u6df1\u6d45\uff09 \u9971\u548c\u5ea6\u6700\u9ad8\u5c31\u662f\u5f53\u524d\u8272\u5f69\u80fd\u8fbe\u5230\u7684\u6700\u5927\u9971\u548c\u7a0b\u5ea6\u5c31\u662f\u6700\u9c9c\u8273\u7684\u610f\u601d\uff0c\u9971\u548c\u5ea6\u6700\u4f4e\u5c31\u4ee3\u8868\u5df2\u7ecf\u662f\u7070\u8272\u6ca1\u6709\u4efb\u4f55\u9971\u548c\u5ea6\u3002\uff08\u8272\u76f8\u7684\u5f3a\u5f31\uff09 \u4f7f\u7528tf.image\u8fdb\u884c\u6307\u5b9a\u6570\u636e\u589e\u5f3a\u7684\u793a\u4f8b # /data/ItcastBrain_CV/sample.jpg\u662f\u6211\u4eec\u7ed9\u5b9a\u7684\u56fe\u7247 import os # pip install tensorflow==2.3.0 import tensorflow as tf import PIL.Image import matplotlib.pyplot as plt import matplotlib as mpl mpl . rcParams [ \"figure.figsize\" ] = ( 12 , 5 ) import numpy as np image_path = \"./\" image_name = \"sample.jpg\" # \u5c06\u56fe\u7247\u8bfb\u5165\u5185\u5b58\uff0c\u4e0etf.io.decode_image\u914d\u5408\u4f7f\u7528 image_string = tf . io . read_file ( os . path . join ( image_path , image_name )) # \u5c06\u5176\u8f6c\u6362\u6210\u5f20\u91cf\uff0c\u4fdd\u7559\u989c\u8272\u901a\u9053 image = tf . io . decode_image ( image_string , channels = 3 ) # \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b\u589e\u5f3a\u7684\u6548\u679c # \u9971\u548c\u5ea6\u8c03\u8282 saturation_image = tf . image . random_saturation ( image , 5 , 10 ) saturation_image = tf . io . encode_jpeg ( saturation_image ) filepath = os . path . join ( image_path , \"saturation_\" + image_name ) tf . io . write_file ( filepath , saturation_image ) # \u4eae\u5ea6\u8c03\u8282 brightness_image = tf . image . random_brightness ( image , 0.2 ) brightness_image = tf . io . encode_jpeg ( brightness_image ) filepath = filepath = os . path . join ( image_path , \"brightness_\" + image_name ) tf . io . write_file ( filepath , brightness_image ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210brightness_sample.jpg\u548csaturation_sample.jpg \u901a\u8fc7\u6d4f\u89c8\u5668\u67e5\u770b\u539f\u56fe\uff0c\u4eae\u5ea6\u589e\u5f3a\u56fe\uff0c\u9971\u548c\u5ea6\u589e\u5f3a\u56fe \u5bf9online\u4e2d\u7684\u56fe\u7247\u8fdb\u884c\u589e\u5f3a # \u8bfb\u53d6\u6240\u6709\u56fe\u7247 online_image_path = \"./online/\" online_image_names = os . listdir ( online_image_path ) # \u4e0e\u521a\u521a\u7684\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u9700\u8981\u5faa\u73af for image_name in online_image_names : image_string = tf . io . read_file ( os . path . join ( online_image_path , image_name )) image = tf . io . decode_image ( image_string , channels = 3 ) ## \u9971\u548c\u5ea6\u8c03\u8282 saturation_image = tf . image . random_saturation ( image , 5 , 10 ) saturation_image = tf . io . encode_jpeg ( saturation_image ) filepath = os . path . join ( online_image_path , \"saturation_\" + image_name ) tf . io . write_file ( filepath , saturation_image ) ## \u4eae\u5ea6\u8c03\u8282 brightness_image = tf . image . random_brightness ( image , 0.2 ) brightness_image = tf . io . encode_jpeg ( brightness_image ) filepath = filepath = os . path . join ( online_image_path , \"brightness_\" + image_name ) tf . io . write_file ( filepath , brightness_image ) print ( \"Finished!\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: \u5728/data/ItcastBrain_CV/online/\u8def\u5f84\u4e0b\uff0c\u56fe\u7247\u6570\u91cf\u589e\u81f3500+ \u5728\u8be5\u8def\u5f84\u4e0b\u4f7f\u7528 ls | wc -l \u67e5\u770b\u6587\u4ef6\u6570\u91cf \u7edf\u8ba1\u56fe\u7247\u5bbd-\u9ad8\u5206\u5e03 \u56e0\u4e3a\u56fe\u7247\u662f\u6211\u4eec\u4eba\u5de5\u6807\u6ce8\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u5728\u8fdb\u884c\u683c\u5f0f\u8fc7\u6ee4\u3002 \u4f46\u67e5\u770b\u5bbd-\u9ad8\u5206\u5e03\u662f\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u4e4b\u540e\u5728\u8f93\u5165\u6a21\u578b\u524d\u9700\u8981\u89c4\u8303\u56fe\u7247\u5c3a\u5bf8\uff0c\u901a\u8fc7\u8be5\u5206\u5e03\uff0c\u53ef\u4ee5\u83b7\u5f97\u6bd4\u8f83\u5408\u9002\u7684\u4e2d\u95f4\u503c\u3002 import seaborn as sns # \u51c6\u5907online\u548coffline\u8def\u5f84\u4e0b\u7684\u56fe\u7247\u540d\u5b57 online_image_path = \"./online/\" online_image_names = os . listdir ( online_image_path ) offline_image_path = \"./offline/\" offline_image_names = os . listdir ( offline_image_path ) # \u521d\u59cb\u5316\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5217\u8868 w_list = [] h_list = [] # \u5bf9\u6240\u6709\u7684\u56fe\u7247\uff08\u5305\u62econline\u548coffline\uff09\u540d\u5b57\u8fdb\u884c\u904d\u5386 for image_name in online_image_names + offline_image_names : # \u8fd9\u91cc\u4f7f\u7528try\u6765\u533a\u5206\u6253\u5f00\u56fe\u7247\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u56fe\u7247\u540d\u5b57\u65e2\u6709online\u53c8\u6709offline # \u5728online\u8def\u5f84\u4e0b\u6253\u5f00\u51fa\u9519\uff0c\u5219\u5728offline\u8def\u5f84\u4e0b\u6253\u5f00 try : im = Image . open ( os . path . join ( online_image_path , image_name )) except : im = Image . open ( os . path . join ( offline_image_path , image_name )) # \u5c06\u6bcf\u5f20\u56fe\u7247\u7684\u5bbd\u9ad8\u5b58\u5165\u5217\u8868 w_list . append ( im . size [ 0 ]) h_list . append ( im . size [ 1 ]) # \u63a5\u4e0b\u6765\u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( w_list ) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . savefig ( \"./w_distribu.png\" ) plt . close () # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( h_list ) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . savefig ( \"./h_distribu.png\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: \u5728/data/ItcastBrain_CV/\u8def\u5f84\u4e0b\u751f\u6210w_distribu.png\u548ch_distribu.png\u4e24\u5f20\u56fe\u7247\u3002 \u5206\u6790: \u4ece\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6240\u6709\u56fe\u7247\u7684\u5bbd\u5ea6\u8303\u56f4\u5927\u6982\u4e3a\uff1a500-2000\uff0c\u5bc6\u5ea6\u8f83\u9ad8\u5728500-1000\u4e4b\u95f4\uff1b\u9ad8\u5ea6\u8303\u56f4\u5927\u6982\u4e3a\uff1a250-2000\uff0c\u5bc6\u5ea6\u8f83\u9ad8\u5728250-750\u4e4b\u95f4\uff0c\u56e0\u6b64\u8f83\u5408\u7406\u7684\u89c4\u8303\u88c1\u526a\u5bbd\u5ea6\u4e3a(500 + 1000)/2 = 750, \u526a\u88c1\u9ad8\u5ea6\u4e3a(250 + 750)/2 = 500\u3002\u8fd9\u5728\u8bad\u7ec3\u524d\u5904\u7406\u65f6\u5c06\u4f1a\u4f7f\u7528\u3002 \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6 \u5728\u8fd9\u91cc\u6211\u4eec\u5212\u5206\u6bd4\u4f8b\u5e76\u4e0d\u662f\u4e4b\u524d\u76840.2\u6216\u80050.3\uff0c\u800c\u662f\u9009\u62e9\u4e86\u66f4\u5927\u76840.7\uff0870%\u662f\u9a8c\u8bc1\u96c6\uff0c\u53ea\u670930%\u662f\u8bad\u7ec3\u96c6\uff09 \u539f\u56e0\uff1a\u56e0\u4e3a\u603b\u4f53\u4e0a\uff0c\u8bad\u7ec3\u6570\u636e\u603b\u91cf\u5e76\u4e0d\u5927\uff0c\u56e0\u6b64\u8fc7\u5c0f\u7684\u9a8c\u8bc1\u96c6\u53ef\u80fd\u4e0d\u5177\u6709\u4ee3\u8868\u6027\uff0c\u56e0\u6b64\u4e00\u5b9a\u8981\u52a0\u5927\u9a8c\u8bc1\u96c6\u90e8\u5206\u7684\u6bd4\u4f8b\uff0c\u540c\u65f6\uff0c\u4f60\u53ef\u80fd\u62c5\u5fc3\u8fd9\u4f1a\u9020\u6210\u8bad\u7ec3\u6570\u636e\u8fc7\u5c11\uff0c\u800c\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u7684\u8bad\u7ec3\u65b9\u6cd5\u662f\u5728\u9884\u8bad\u7ec3\u6a21\u578b\u4e0a\u8fdb\u884c\u5fae\u8c03\uff0c\u5b9e\u9a8c\u8868\u660e\u5fae\u8c03\u80fd\u591f\u5728\u5f88\u5c0f\u7684\u6570\u636e\u96c6\u4e0a\u53d6\u5f97\u6548\u679c\uff08\u751a\u81f3\u4ec5\u6709100\u5f20\u56fe\u7247\uff09\u3002 # \u4f7f\u7528shell\u547d\u4ee4\uff0c\u521b\u5efatrain\u548cval\u8def\u5f84, \u5728train\u548cval\u5185\u518d\u521b\u5efaonline\u548coffline\u6587\u4ef6\u5939 mkdir /data/ItcastBrain_CV/train/ mkdir /data/ItcastBrain_CV/train/online/ mkdir /data/ItcastBrain_CV/train/offline/ mkdir /data/ItcastBrain_CV/val/ mkdir /data/ItcastBrain_CV/val/online/ mkdir /data/ItcastBrain_CV/val/offline/ # \u5b9a\u4e49\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u5b58\u50a8\u8def\u5f84 train_online_image_path = \"./train/online/\" train_offline_image_path = \"./train/offline/\" val_online_image_path = \"./val/online/\" val_offline_image_path = \"./val/offline/\" # \u8fdb\u884c\u6bd4\u4f8b\u5212\u5206 online_train_num = int ( len ( online_image_names ) * 0.3 ) online_val_num = len ( online_image_names ) - online_train_num offline_train_num = int ( len ( offline_image_names ) * 0.3 ) offline_val_num = len ( offline_image_names ) - offline_train_num # \u67e5\u770bonline\u548coffline\u4e2d\u5212\u5206\u7684\u8bad\u7ec3\u548c\u9a8c\u8bc1\u56fe\u7247\u6570\u91cf print ( online_train_num , online_val_num ) print ( offline_train_num , offline_val_num ) # \u4f7f\u7528\u8be5\u5de5\u5177\u4e2d\u7684copyfile\u65b9\u6cd5\u590d\u5236\u7c98\u8d34\u529f\u80fd import shutil # \u5c06online\u6570\u636e\u5206\u5230train/online\u548cval/online\u4e2d for image_name in online_image_names [: online_train_num ]: shutil . copyfile ( os . path . join ( online_image_path , image_name ), os . path . join ( train_online_image_path , image_name )) for image_name in online_image_names [ online_train_num :]: shutil . copyfile ( os . path . join ( online_image_path , image_name ), os . path . join ( val_online_image_path , image_name )) # \u5c06offline\u6570\u636e\u5206\u5230train/offline\u548cval/offline\u4e2d for image_name in offline_image_names [: offline_train_num ]: shutil . copyfile ( os . path . join ( offline_image_path , image_name ), os . path . join ( train_offline_image_path , image_name )) for image_name in offline_image_names [ offline_train_num :]: shutil . copyfile ( os . path . join ( offline_image_path , image_name ), os . path . join ( val_offline_image_path , image_name )) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: # online\u5212\u5206\u6570\u91cf 165 387 # offline\u5212\u5206\u6570\u91cf 152 356 \u5728/data/ItcastBrain_CV/train/online/\uff0c /data/ItcastBrain_CV/train/offline/\uff0c /data/ItcastBrain_CV/val/online/\uff0c /data/ItcastBrain_CV/val/offline/\u8def\u5f84\u4e0b\u90fd\u6709\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u3002 \u7b2c\u4e8c\u6b65: \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u5b9e\u73b0 \u5728\u6a21\u578b\u8bad\u7ec3\u524d\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6a21\u578b\u7684\u9009\u62e9\uff0cCV\u53d1\u5c55\u81f3\u4eca\uff0c\u5df2\u7ecf\u79ef\u7d2f\u4e86\u5927\u91cf\u7684\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\u7684\u6a21\u578b\uff0c\u5b83\u4eec\u5728\u6807\u51c6\u4efb\u52a1\u4e0a\u90fd\u6709\u4e0d\u9519\u7684\u8868\u73b0\uff0c\u540c\u65f6\uff0c\u8fd9\u4e9b\u6a21\u578b\u4e5f\u5728pytorch\u6846\u67b6\u4e2d\u6709\u4e86\u6807\u51c6\u5b9e\u73b0\uff0c\u8fd9\u5bf9\u4e8e\u6211\u4eec\u8fdb\u884c\u5feb\u901f\u5e94\u7528\u5177\u6709\u91cd\u8981\u610f\u4e49\u3002 \u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0bpytorch\u5b9e\u73b0\u768429\u4e2a\u4e3b\u6d41\u9884\u8bad\u7ec3\u6a21\u578b\u5728\u6807\u51c6\u6570\u636e\u96c6ImageNet\u4e0a\u7684\u8868\u73b0\uff1a \u5206\u6790\uff1a top-N error\u662f\u56fe\u50cf\u591a\u5206\u7c7b\u95ee\u9898\u91cd\u8981\u7684\u6307\u6807\uff0c\u56e0\u4e3a\u8be5\u6307\u6807\u4ee3\u8868\u9519\u8bef\u7387\uff0c\u56e0\u6b64\u8be5\u503c\u8d8a\u5c0f\u6a21\u578b\u6548\u679c\u8d8a\u597d\u3002\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cResNet\u7cfb\u5217\u6a21\u578b\u5728\u5206\u7c7b\u4efb\u52a1\u4e0a\u5177\u6709\u975e\u5e38\u4e0d\u9519\u7684\u8868\u73b0\uff0c\u65e0\u8bba\u662ftop-1 error\u8fd8\u662ftop-5 error\u90fd\u6709\u6700\u4f73\u6210\u7ee9\uff0c\u8fd9\u662f\u6211\u4eec\u9009\u5b9a\u8be5\u7cfb\u5217\u6a21\u578b\u7684\u539f\u56e0\u3002\u9009\u5b9a\u6a21\u578b\u7cfb\u5217\u540e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6bd4\u5bf9\u6574\u4e2aResnet\u7cfb\u5217\u4e2d\u82e5\u5e72\u6a21\u578b\u5728\u5b9e\u9645\u6570\u636e\u96c6\u4e0a\u7684\u6548\u679c\u3002 \u5c01\u88c5\u6570\u636e\u6210\u4e3apytorch\u4e2d\u7684datasets\u5bf9\u8c61 ## torch-1.6.0 torchvision-0.7.0 import torch import torch.nn as nn import torch.optim as optim from torch.optim import lr_scheduler import numpy as np import torchvision from torchvision import datasets , models , transforms import time import os import copy # \u8be5\u811a\u672c\u5c06\u5199\u5728/data/ItcastBrain_CV/\u8def\u5f84\u4e0b data_dir = './' # \u6839\u636e\u4e4b\u524d\u7684\u6570\u636e\u5206\u6790\u83b7\u5f97 gold_size = ( 700 , 500 ) # \u4f7f\u6a21\u578b\u8f93\u5165\u5f20\u91cf\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5747\u503c\u5217\u8868\uff0c\u4ee3\u8868\u5404\u4e2a\u901a\u9053\u7684\u5747\u503c\uff0c # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u6807\u51c6\u5dee\u5217\u8868\uff0c\u4ee3\u8868\u5404\u4e2a\u901a\u9053\u7684\u6807\u51c6\u5dee\u3002\u8fd9\u91cc\u7684\u56fe\u7247\u90fd\u662f\u6709\u4e09\u4e2a\u901a\u9053\u3002 # \u5176\u4e2d\u5747\u503c\u548c\u6807\u51c6\u5dee\u5217\u8868\u4e2d\u7684\u6570\u503c\u6765\u81ea\u5bf9ImageNet\u7684\u5168\u5c40\u91c7\u6837\u7ed3\u679c\u3002 # gold_normalize = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) # \u5b9a\u4e49\u4e00\u7cfb\u5217\u6807\u51c6\u5904\u7406\u6d41\u7a0b\uff0cResize\uff0c\u5f20\u91cf\u5316\uff0c\u89c4\u8303\u5316 # Resize\u548c\u5f20\u91cf\u5316\u7528\u4e8e\u7edf\u4e00\u56fe\u7247\u5c3a\u5bf8\u548c\u6ee1\u8db3\u6846\u67b6\u8981\u6c42 # \u89c4\u8303\u5316\u4fbf\u4e8e\u6a21\u578b\u5feb\u901f\u6536\u655b data_transforms = { 'train' : transforms . Compose ([ transforms . RandomResizedCrop ( gold_size ), transforms . ToTensor (), transforms . Normalize ( gold_normalize [ 0 ], gold_normalize [ 1 ]) ]), 'val' : transforms . Compose ([ transforms . Resize ( gold_size ), transforms . ToTensor (), transforms . Normalize ( gold_normalize [ 0 ], gold_normalize [ 1 ]) ]), } # \u4f7f\u7528datasets\u7684ImageFolder\u65b9\u6cd5\u8fdb\u884c\u6570\u636e\u8bfb\u53d6\uff0c\u5e76\u901a\u8fc7data_transforms\u5904\u7406 image_datasets = { x : datasets . ImageFolder ( os . path . join ( data_dir , x ), data_transforms [ x ]) for x in [ 'train' , 'val' ]} # \u4e4b\u540e\u4f7f\u7528DataLoader\u8fdb\u884c\u5c01\u88c5\uff0c\u4f7f\u5176\u6bcf\u4e2a\u6279\u6b21\u80fd\u591f\u4f7f\u7528\u8fed\u4ee3\u5668\u4ee5\u4fbf\u51cf\u5c0f\u5185\u5b58\uff0c # \u8fd9\u91cc\u8bbe\u7f6e\u6279\u6b21\u5927\u5c0f\u4e3a8\uff0c\u5e76\u6253\u4e71\u987a\u5e8f\uff0c\u6bcf\u6b21\u542f\u75284\u4e2a\u5b50\u8fdb\u7a0b\u6765\u4e00\u540c\u52a0\u8f7d\u5bf9\u5e94\u6279\u6b21\u7684\u6570\u636e\u3002 dataloaders = { x : torch . utils . data . DataLoader ( image_datasets [ x ], batch_size = 8 , shuffle = True , num_workers = 4 ) for x in [ 'train' , 'val' ]} print ( dataloaders ) dataset_sizes = { x : len ( image_datasets [ x ]) for x in [ 'train' , 'val' ]} print ( dataset_sizes ) # \u5982\u679c\u6709GPU\u6211\u4eec\u5c06\u4f7f\u7528\u8be5\u8bbe\u5907\u8bad\u7ec3 # \u6211\u4eec\u5c06\u5728\u4e00\u53f0Tesla T4\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u5355\u7cbe\u5ea6\u5cf0\u503c\u7b97\u529b8.1TFLOPS device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: {'train': <torch.utils.data.dataloader.DataLoader object at 0x7f620d4d2550>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f620d4d2390>} {'train': 317, 'val': 743} \u6a21\u578b\u8bad\u7ec3\u4e0e\u9a8c\u8bc1\u7684\u5b9e\u73b0 def train_and_eval_model ( model , criterion , optimizer , scheduler , num_epochs = 25 ): \"\"\"\u8bad\u7ec3\u5e76\u9a8c\u8bc1\u6a21\u578b Args: model: \u6a21\u578b\u5bf9\u8c61\uff0c\u8fd9\u91cc\u5c06\u4f20\u5165\u9884\u8bad\u7ec3\u6a21\u578b criterion: \u635f\u5931\u8ba1\u7b97\u65b9\u6cd5 optimizer: \u4f18\u5316\u5668 sheduler: \u5b66\u4e60\u7387\u8c03\u8282\u5668 num_epochs: \u8bad\u7ec3\u8f6e\u6570 Return: \u8bad\u7ec3\u540e\u7684\u6a21\u578b \"\"\" # \u83b7\u5f97\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4 since = time . time () # \u83b7\u5f97\u6700\u521d\u7684model\u72b6\u6001\u5b57\u5178(\u53c2\u6570)\uff0c\u4f7f\u7528\u6df1\u62f7\u8d1d\u4f7fbest_model_wts\u503c\u7a33\u5b9a best_model_wts = copy . deepcopy ( model . state_dict ()) # \u521d\u59cb\u5316\u6a21\u578b\u51c6\u786e\u7387 best_acc = 0.0 # \u5faa\u73af\u8f6e\u6570\u8bad\u7ec3 for epoch in range ( num_epochs ): # \u6253\u5370\u8f6e\u6570 print ( 'Epoch {}/{}' . format ( epoch + 1 , num_epochs )) print ( '-' * 10 ) # \u4f9d\u6b21\u8fdb\u5165\u8bad\u7ec3\u548c\u9a8c\u8bc1\u9636\u6bb5\uff0c\u5904\u7406\u65b9\u5f0f\u6709\u6240\u4e0d\u540c for phase in [ 'train' , 'val' ]: # \u5f00\u542f\u8bad\u7ec3\u6a21\u5f0f\u6216\u9a8c\u8bc1\u6a21\u5f0f model . train () if phase == 'train' else model . eval () # \u521d\u59cb\u5316\u8be5\u8f6e\u6b21\u7684\u635f\u5931\u548c\u51c6\u786e\u7387 running_loss = 0.0 running_corrects = 0 # \u5728\u8be5\u8f6e\u6b21\u4e2d\u8fed\u4ee3\u6279\u6b21\u6570\u636e for inputs , labels in dataloaders [ phase ]: inputs = inputs . to ( device ) labels = labels . to ( device ) # \u68af\u5ea6\u521d\u59cb\u5316 optimizer . zero_grad () # \u81ea\u52a8\u68af\u5ea6\u8ba1\u7b97\u662f\u5426\u5f00\u542f\uff0c\u8bad\u7ec3\u5219\u5f00\u542f\uff0c\u9a8c\u8bc1\u5219\u4e0d\u5f00\u542f with torch . set_grad_enabled ( phase == 'train' ): # \u4f7f\u7528\u6a21\u578b\u83b7\u5f97\u8f93\u51fa\u5206\u5e03 outputs = model ( inputs ) # \u4ece\u5206\u5e03\u4e2d\u83b7\u53d6\u6982\u7387\u6700\u5927\u7684\u7ed3\u679c _ , preds = torch . max ( outputs , 1 ) # \u8ba1\u7b97\u5f53\u524d\u635f\u5931 loss = criterion ( outputs , labels ) if phase == 'train' : # \u5982\u679c\u662f\u8bad\u7ec3\u9636\u6bb5\uff0c\u8bef\u5dee\u53cd\u5411\u4f20\u64ad loss . backward () # \u66f4\u65b0\u53c2\u6570 optimizer . step () # \u8ba1\u7b97\u5e73\u5747\u635f\u5931\u548c\u51c6\u786e\u7387 running_loss += loss . item () * inputs . size ( 0 ) running_corrects += torch . sum ( preds == labels . data ) # \u6bcf\u4e00\u8f6e\u8c03\u6574\u4e00\u6b21\u5b66\u4e60\u7387 if phase == 'train' : scheduler . step () # \u8ba1\u7b97\u6bcf\u8f6e\u7684\u5e73\u5747\u635f\u5931\u548c\u51c6\u786e\u7387 epoch_loss = running_loss / dataset_sizes [ phase ] epoch_acc = running_corrects . double () / dataset_sizes [ phase ] # \u6253\u5370\u6bcf\u8f6e\u7684\u7ed3\u679c print ( '{} Loss: {:.4f} Acc: {:.4f}' . format ( phase , epoch_loss , epoch_acc )) # \u5728\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\uff0c\u627e\u5230\u51c6\u786e\u7387\u6700\u9ad8\u7684\u7ed3\u679c\u5e76\u4fdd\u5b58\u8be5\u6b21\u6a21\u578b\u7684\u53c2\u6570 if phase == 'val' and epoch_acc > best_acc : best_acc = epoch_acc best_model_wts = copy . deepcopy ( model . state_dict ()) # \u83b7\u5f97\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7ed3\u675f\u65f6\u95f4 time_elapsed = time . time () - since # \u6253\u5370\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8017\u65f6\u6700\u4f73\u51c6\u786e\u7387 print ( 'Training complete in {:.0f}m {:.0f}s' . format ( time_elapsed // 60 , time_elapsed % 60 )) print ( 'Best val Acc: {:4f}' . format ( best_acc )) # \u6a21\u578b\u91cd\u8f7d\u6700\u4f73\u53c2\u6570 model . load_state_dict ( best_model_wts ) # \u8fd4\u56de\u7ed3\u679c return model \u8c03\u7528\uff1a # \u52a0\u8f7dresnet18\u6a21\u578b\u548c\u5168\u90e8\u9884\u8bad\u7ec3\u53c2\u6570 model = models . resnet18 ( pretrained = True ) # \u53d6resnet18\u539f\u6709\u7684\u6700\u540e\u4e00\u5c42(\u5168\u8fde\u63a5\u5c42)\u8f93\u5165\u7279\u5f81(in_features)\u7ef4\u5ea6 num_ftrs = model . fc . in_features # \u66ff\u6362\u539f\u6709\u7684\u6700\u540e\u4e00\u5c42\uff0c\u8f93\u5165\u7ef4\u5ea6\u4e0d\u53d8\uff0c\u8f93\u51fa\u7ef4\u5ea6\u53d8\u4e3a2 model . fc = nn . Linear ( num_ftrs , 2 ) # \u5c06\u4fee\u6539\u540e\u7684\u6a21\u578b\u53d1\u5230\u6307\u5b9a\u8bbe\u5907\u4e0a model = model . to ( device ) # \u5b9a\u4e49\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 criterion = nn . CrossEntropyLoss () # \u5b9a\u4e49SGD\u4f18\u5316\u5668 optimizer = optim . SGD ( model . parameters (), lr = 0.001 , momentum = 0.9 ) # \u5b9a\u4e49\u5b66\u4e60\u7387\u8c03\u8282\u5668 scheduler = lr_scheduler . StepLR ( optimizer , step_size = 7 , gamma = 0.1 ) # \u8c03\u7528train_model\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 model_ft = train_model ( model , criterion , optimizer , scheduler , num_epochs = 5 ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/train.py \u8f93\u51fa\u6548\u679c: Epoch 1/5 ---------- train Loss: 0.3131 Acc: 0.8770 val Loss: 0.0840 Acc: 0.9865 Epoch 2/5 ---------- train Loss: 0.1194 Acc: 0.9558 val Loss: 0.0083 Acc: 1.0000 Epoch 3/5 ---------- train Loss: 0.0925 Acc: 0.9621 val Loss: 0.0093 Acc: 1.0000 Epoch 4/5 ---------- train Loss: 0.1181 Acc: 0.9495 val Loss: 0.0039 Acc: 1.0000 Epoch 5/5 ---------- train Loss: 0.0852 Acc: 0.9621 val Loss: 0.0068 Acc: 1.0000 Training complete in 1m 5s Best val Acc: 1.000000 \u7ed3\u8bba\uff1a \u6211\u4eec\u53d1\u73b0\uff0c\u4f7f\u7528\u5c11\u91cf\u5fae\u8c03\u6570\u636e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528resnet18\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8fbe\u5230\u8fd1100%\u7684\u51c6\u786e\u7387\uff0c\u53ef\u89c1\u8fc1\u79fb\u5b66\u4e60\u7684\u201c\u529f\u529b\u201d\u6240\u5728\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u8fc1\u79fb\u5b66\u4e60\u98ce\u9761\u7684\u91cd\u8981\u539f\u56e0\u3002\u6700\u7ec85\u4e2a\u8f6e\u6b21\u5728Tesla T4\u4e0a\u8bad\u7ec3\u8017\u65f6\u4ec5\u4e3a1m5s\u3002 \u5982\u4f55\u5728\u5176\u4ed6Resnet\u7cfb\u5217\u6a21\u578b\u4e0a\u8bad\u7ec3 # \u53ea\u9700\u4fee\u6539\u6a21\u578b\u540d\u79f0\u5373\u53ef, \u4fee\u6539\u4e0a\u8ff0\u4ee3\u7801 model = models . resnet18 ( pretrained = True ) # \u4fee\u6539\u4e3a\u4ee5\u4e0b\u6a21\u578b\uff0c\u53ef\u4ee5\u9010\u4e2a\u8fdb\u884c\u5c1d\u8bd5 model = models . resnet34 ( pretrained = True ) model = models . resnet50 ( pretrained = True ) model = models . resnet101 ( pretrained = True ) model = models . resnet152 ( pretrained = True ) \u5bf9\u6bd4\u7ed3\u679c \u6240\u6709\u6a21\u578b\u5747\u53ef\u8fbe\u5230\u9a8c\u8bc1\u51c6\u786e\u7387\u8fd1100%\uff0cTelas T4\u4e0a\u76845\u8f6e\u8bad\u7ec3\u65f6\u95f4\u5982\u4e0b\u8868\uff1a resnet18 resnet34 resnet50 resnet101 resnet152 1m5s 1m55s 2m32s 5m2s 9m17s \u4fdd\u5b58\u6a21\u578b PATH_ = \"./18_model_ft_params.pth\" torch . save ( model_ft . state_dict (), PATH_ ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/ItcastBrain_CV/train.py \u8f93\u51fa\u6548\u679c\uff1a \u5728\u8be5\u76ee\u5f55\u4e0b\u5c06\u5f97\u523018_model_ft_params.pth\u53c2\u6570\u6587\u4ef6\u3002 \u7b2c\u4e09\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u8bad\u7ec3\u901f\u5ea6 \u5f53\u524d\u6211\u4eec\u7684\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u5df2\u7ecf\u975e\u5e38\u9ad8\uff0c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u4f18\u5316\u51c6\u786e\u7387\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u8bad\u7ec3\u7684\u901f\u5ea6\u80fd\u591f\u8fdb\u4e00\u6b65\u63d0\u5347\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u6839\u636e\u6bcf\u4e00\u6279\u65b0\u6765\u7684\u6570\u636e\u5feb\u901f\u7684\u8fed\u4ee3\u6a21\u578b\uff0c\u4ee5\u9002\u5e94\u6700\u65b0\u7684\u6570\u636e\u89c4\u5f8b\u3002 \u51bb\u7ed3\u5927\u90e8\u5206\u53c2\u6570\u7684\u65b9\u5f0f\u8fdb\u884c\u5fae\u8c03 # \u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u52a0\u8f7dresnet18\u7684\u6a21\u578b\u548c\u53c2\u6570 model_conv = torchvision . models . resnet18 ( pretrained = True ) # \u51bb\u7ed3\u6307\u5b9a\u7f51\u7edc\u7684\u53c2\u6570\uff0c # \u8fd9\u91cc\u5c06resnet18\u7279\u5f81\u63d0\u53d6\u90e8\u5206\u7684\u6240\u6709\u53c2\u6570\u51bb\u7ed3(\u4e0d\u6c42\u68af\u5ea6) for param in model_conv . parameters (): param . requires_grad = False # \u76f8\u5f53\u4e8e\u53ea\u53bb\u5fae\u8c03\u6700\u540e\u9762\u7684\u8f93\u51fa\u5c42 num_ftrs = model_conv . fc . in_features model_conv . fc = nn . Linear ( num_ftrs , 2 ) model_conv = model_conv . to ( device ) criterion = nn . CrossEntropyLoss () optimizer_conv = optim . SGD ( model_conv . fc . parameters (), lr = 0.001 , momentum = 0.9 ) exp_lr_scheduler = lr_scheduler . StepLR ( optimizer_conv , step_size = 7 , gamma = 0.1 ) # \u8c03\u7528train_model\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 model_ft = train_model ( model_conv , criterion , optimizer_conv , exp_lr_scheduler , num_epochs = 5 ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/ItcastBrain_CV/train.py \u8f93\u51fa\u6548\u679c: Epoch 1/5 ---------- train Loss: 0.4970 Acc: 0.7161 val Loss: 0.1035 Acc: 1.0000 Epoch 2/5 ---------- train Loss: 0.2245 Acc: 0.9085 val Loss: 0.0733 Acc: 0.9919 Epoch 3/5 ---------- train Loss: 0.2272 Acc: 0.9274 val Loss: 0.0376 Acc: 1.0000 Epoch 4/5 ---------- train Loss: 0.1374 Acc: 0.9653 val Loss: 0.0747 Acc: 0.9812 Epoch 5/5 ---------- train Loss: 0.1624 Acc: 0.9369 val Loss: 0.0262 Acc: 1.0000 Training complete in 0m 43s Best val Acc: 1.000000 \u7ed3\u8bba\uff1a \u8be5\u79cd\u5fae\u8c03\u65b9\u5f0f\u4ecd\u80fd\u4fdd\u8bc1\u9a8c\u8bc1\u51c6\u786e\u7387\uff0c\u540c\u65f6\u5c065\u8f6e\u8bad\u7ec3\u65f6\u95f4\u7f29\u77ed\u4e3a43s\uff08\u4e4b\u524d\u4e3a1m5s\uff09\uff0c\u540c\u5b66\u4eec\u53ef\u4ee5\u81ea\u6d4b\u8be5\u79cd\u65b9\u5f0f\u4e0b\u5176\u5b83Resnet\u7cfb\u5217\u6a21\u578b\u7684\u8bad\u7ec3\u65f6\u95f4\u3002 \u4e0d\u540c\u5fae\u8c03\u65b9\u5f0f\u4e0b\u6a21\u578b\u7684\u53c2\u6570\u60c5\u51b5 \u901a\u8fc7summary\u5de5\u5177\u5305\u67e5\u770b\u6a21\u578b\u53c2\u6570\u3002 pip install torchsummary == 1 .5.1 import os import torch import torch.nn as nn import torchvision from torchvision import datasets , models , transforms from torchsummary import summary device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) # \u6062\u590d\u6a21\u578b\u7ed3\u6784 model = torchvision . models . resnet18 ( pretrained = True ) num_ftrs = model . fc . in_features model . fc = nn . Linear ( num_ftrs , 2 ) # \u53c2\u6570\u8def\u5f84 PATH = \"18_model_ft_params.pth\" # \u6062\u590d\u53c2\u6570 model . load_state_dict ( torch . load ( PATH )) model . eval () # \u67e5\u770b\u5f53\u524d\u6a21\u578b\u60c5\u51b5 summary ( model , ( 3 , 700 , 500 ), device = \"cpu\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/test.py \u8f93\u51fa\u6548\u679c: ---------------------------------------------------------------- Layer (type) Output Shape Param # ================================================================ Conv2d-1 [-1, 64, 112, 112] 9,408 BatchNorm2d-2 [-1, 64, 112, 112] 128 ReLU-3 [-1, 64, 112, 112] 0 MaxPool2d-4 [-1, 64, 56, 56] 0 Conv2d-5 [-1, 64, 56, 56] 36,864 BatchNorm2d-6 [-1, 64, 56, 56] 128 ReLU-7 [-1, 64, 56, 56] 0 Conv2d-8 [-1, 64, 56, 56] 36,864 BatchNorm2d-9 [-1, 64, 56, 56] 128 ReLU-10 [-1, 64, 56, 56] 0 BasicBlock-11 [-1, 64, 56, 56] 0 Conv2d-12 [-1, 64, 56, 56] 36,864 BatchNorm2d-13 [-1, 64, 56, 56] 128 ReLU-14 [-1, 64, 56, 56] 0 Conv2d-15 [-1, 64, 56, 56] 36,864 BatchNorm2d-16 [-1, 64, 56, 56] 128 ReLU-17 [-1, 64, 56, 56] 0 BasicBlock-18 [-1, 64, 56, 56] 0 Conv2d-19 [-1, 128, 28, 28] 73,728 BatchNorm2d-20 [-1, 128, 28, 28] 256 ReLU-21 [-1, 128, 28, 28] 0 Conv2d-22 [-1, 128, 28, 28] 147,456 BatchNorm2d-23 [-1, 128, 28, 28] 256 Conv2d-24 [-1, 128, 28, 28] 8,192 BatchNorm2d-25 [-1, 128, 28, 28] 256 ReLU-26 [-1, 128, 28, 28] 0 BasicBlock-27 [-1, 128, 28, 28] 0 Conv2d-28 [-1, 128, 28, 28] 147,456 BatchNorm2d-29 [-1, 128, 28, 28] 256 ReLU-30 [-1, 128, 28, 28] 0 Conv2d-31 [-1, 128, 28, 28] 147,456 BatchNorm2d-32 [-1, 128, 28, 28] 256 ReLU-33 [-1, 128, 28, 28] 0 BasicBlock-34 [-1, 128, 28, 28] 0 Conv2d-35 [-1, 256, 14, 14] 294,912 BatchNorm2d-36 [-1, 256, 14, 14] 512 ReLU-37 [-1, 256, 14, 14] 0 Conv2d-38 [-1, 256, 14, 14] 589,824 BatchNorm2d-39 [-1, 256, 14, 14] 512 Conv2d-40 [-1, 256, 14, 14] 32,768 BatchNorm2d-41 [-1, 256, 14, 14] 512 ReLU-42 [-1, 256, 14, 14] 0 BasicBlock-43 [-1, 256, 14, 14] 0 Conv2d-44 [-1, 256, 14, 14] 589,824 BatchNorm2d-45 [-1, 256, 14, 14] 512 ReLU-46 [-1, 256, 14, 14] 0 Conv2d-47 [-1, 256, 14, 14] 589,824 BatchNorm2d-48 [-1, 256, 14, 14] 512 ReLU-49 [-1, 256, 14, 14] 0 BasicBlock-50 [-1, 256, 14, 14] 0 Conv2d-51 [-1, 512, 7, 7] 1,179,648 BatchNorm2d-52 [-1, 512, 7, 7] 1,024 ReLU-53 [-1, 512, 7, 7] 0 Conv2d-54 [-1, 512, 7, 7] 2,359,296 BatchNorm2d-55 [-1, 512, 7, 7] 1,024 Conv2d-56 [-1, 512, 7, 7] 131,072 BatchNorm2d-57 [-1, 512, 7, 7] 1,024 ReLU-58 [-1, 512, 7, 7] 0 BasicBlock-59 [-1, 512, 7, 7] 0 Conv2d-60 [-1, 512, 7, 7] 2,359,296 BatchNorm2d-61 [-1, 512, 7, 7] 1,024 ReLU-62 [-1, 512, 7, 7] 0 Conv2d-63 [-1, 512, 7, 7] 2,359,296 BatchNorm2d-64 [-1, 512, 7, 7] 1,024 ReLU-65 [-1, 512, 7, 7] 0 BasicBlock-66 [-1, 512, 7, 7] 0 AdaptiveAvgPool2d-67 [-1, 512, 1, 1] 0 Linear-68 [-1, 2] 1,026 ================================================================ Total params: 11,177,538 Trainable params: 1,026 Non-trainable params: 11,176,512 ---------------------------------------------------------------- Input size (MB): 0.57 Forward/backward pass size (MB): 62.79 ## \u8be5\u6a21\u578b\u5b8c\u6210\u6b63\u5411/\u53cd\u5411\u4f20\u64ad\u65f6\u9700\u8981\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4 Params size (MB): 42.64 Estimated Total Size (MB): 106.00 ---------------------------------------------------------------- \u7ed3\u8bba\uff1a \u901a\u8fc7\u7b2c\u4e8c\u79cd\u5fae\u8c03\u65b9\u5f0f\uff0c\u8be5\u6a21\u578b\u53ea\u8bad\u7ec3\u4e861026\u4e2a\u53ef\u8c03\u53c2\u6570\uff0c\u800c\u4f7f\u7528\u7b2c\u4e00\u79cd\u5fae\u8c03\u65b9\u5f0f\uff0c\u5219\u662f\u4e0b\u9762\u7684\u53c2\u6570\u91cf\uff0c\u8fd9\u4e5f\u662f\u8bad\u7ec3\u901f\u5ea6\u7684\u5dee\u5f02\u6240\u5728\u3002 ================================================================ Total params: 11,177,538 Trainable params: 11,177,538 Non-trainable params: 0 ---------------------------------------------------------------- Input size (MB): 4.01 Forward/backward pass size (MB): 441.02 Params size (MB): 42.64 Estimated Total Size (MB): 487.66 ---------------------------------------------------------------- \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\u5e76\u8ba1\u7b97\u5355\u6761\u63a8\u65ad\u65f6\u95f4 from PIL import Image import time # \u4ee5sample.jpg\u4e3a\u4f8b\uff0c\u5b83\u662f\u4e00\u5f20offline\uff08\u7ebf\u4e0b\u5f00\u73ed\uff09\u7684\u56fe\u7247 data_dir = \"./\" image = \"sample.jpg\" # \u4f7f\u7528GPU\u65f6\u4f7f\u7528 # model.to(device) def singe_predict ( data_dir , image ): # \u8bfb\u53d6\u56fe\u7247 im = Image . open ( os . path . join ( data_dir , image )) . convert ( 'RGB' ) # \u56fe\u7247\u9884\u5904\u7406 data_transforms = transforms . Compose ([ transforms . Resize (( 700 , 500 )), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) image_tensor = data_transforms ( im ) # \u62d3\u5c55\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u4e4b\u524d\u8bad\u7ec3\u65f6\u6709batch_size\u8fd9\u4e2a\u7ef4\u5ea6 image_tensor = image_tensor . unsqueeze ( 0 ) # \u4f7f\u7528GPU\u65f6\u4f7f\u7528 # image_tensor = image_tensor.to(device) res = model ( image_tensor ) return torch . argmax ( res ) . item () if __name__ == \"__main__\" : start = time . time () res = singe_predict ( data_dir , image ) end = time . time () # \u6253\u5370\u5355\u6761\u9884\u6d4b\u65f6\u95f4 print ( \"Interval:\" , end - start ) # \u6253\u5370\u9884\u6d4b\u7ed3\u679c print ( res ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/test.py \u8f93\u51fa\u6548\u679c: # \u5728CPU\u4e0a\u5355\u6761\u63a8\u65ad\u65f6\u95f4\u5728125ms\u5de6\u53f3 Interval: 0.12526451587677002 # \u5728GPU\uff08Tesla T4\uff09\u4e0a\u5355\u6761\u63a8\u65ad\u65f6\u95f4\u572844ms\u5de6\u53f3 Interval: 0.4454502123531231 # 0\u8868\u793aoffline\uff0c1\u8868\u793aonline 0 \u66f4\u591a\u7684\u6d4b\u8bd5 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7684\u56fe\u7247\uff0c\u5982image_dir = \"./offline/77.jpg\"\u7b49\u8fdb\u884c\u6d4b\u8bd5\u6548\u679c\u3002 \u7b2c\u56db\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u63a8\u65ad\u901f\u5ea6-\u6a21\u578b\u526a\u679d \u5173\u4e8e\u526a\u679d\u6280\u672f\u539f\u7406\u53ef\u53c2\u89c1 \u7b2c\u4e03\u7ae0\uff1a\u6a21\u578b\u526a\u679d\u6280\u672f \uff0c\u4e0b\u9762\u662f\u6709\u5173\u526a\u679d\u6280\u672f\u7684\u76f4\u63a5\u5e94\u7528\u3002 \u4f7f\u7528\u526a\u679d\u6280\u672f\u7684\u539f\u56e0\uff1a \u6211\u4eecCPU\u8bbe\u5907\uff0816C\uff09\u4e0a\u7684\u5355\u6761\u63a8\u65ad\u65f6\u95f4\uff0c\u5305\u62ec\u56fe\u7247\u9884\u5904\u7406\u548c\u6a21\u578b\u63a8\u65ad\u65f6\u95f4\uff0c\u5171\u8ba1125ms\u5de6\u53f3\uff08\u5176\u4e2d\u4ec5\u6a21\u578b\u63a8\u65ad\u65f6\u95f4\u7ea695ms\uff09\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u5355\u6761\u63a8\u65ad\u65f6\u95f4\u7531125ms\u63a7\u5236\u523090ms\u5de6\u53f3\uff0c\u5373100ms\u5185\uff0c\u540c\u65f6\u51c6\u786e\u7387\u4e0d\u53ef\u4ee5\u4e0b\u964d\u4f4e\u4e8e95%\uff0c\u8fd9\u91cc\u9009\u62e9\u4e86\u526a\u679d\u6280\u672f\u6765\u5b9e\u73b0\u3002 \u4f7f\u7528\u526a\u679d\u6280\u672f\u7684\u6b65\u9aa4\uff1a 1\uff1a\u52a0\u8f7d\u672a\u526a\u679d\u6a21\u578b 2\uff1a\u8fdb\u884c\u5168\u5c40\u526a\u679d 3\uff1a\u67e5\u770b\u5f53\u524d\u63a8\u65ad\u65f6\u95f4 4\uff1a\u67e5\u770b\u5f53\u524d\u51c6\u786e\u7387 1\uff1a\u52a0\u8f7d\u672a\u526a\u679d\u6a21\u578b # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import os import torch from torch import nn import torch.nn.utils.prune as prune import torch.nn.functional as F import torchvision from torchvision import transforms device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) # \u4fdd\u5b58\u7684\u6a21\u578b\u53c2\u6570\u5730\u5740 PATH = \"./18_model_ft_params.pth\" # \u91cd\u73b0\u6a21\u578b\u7ed3\u6784 model = torchvision . models . resnet18 ( pretrained = True ) num_ftrs = model . fc . in_features model . fc = nn . Linear ( num_ftrs , 2 ) # \u52a0\u8f7d\u53c2\u6570 model . load_state_dict ( torch . load ( PATH )) model . eval () # \u6253\u5370\u6a21\u578b\u7ed3\u6784\uff0c\u4ee5\u786e\u5b9a\u526a\u679d\u540d\u79f0 print ( model ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/pruned.py \u8f93\u51fa\u6548\u679c: # \u4e4b\u540e\u6211\u4eec\u7684\u526a\u679d\u65f6\u5c06\u6307\u5b9a\u8be5\u7ed3\u6784\u4e2d\u7684\u5c42\u540d\u79f0 ResNet( (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (layer1): Sequential( (0): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (1): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (layer2): Sequential( (0): BasicBlock( (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (layer3): Sequential( (0): BasicBlock( (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (layer4): Sequential( (0): BasicBlock( (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (avgpool): AdaptiveAvgPool2d(output_size=(1, 1)) (fc): Linear(in_features=512, out_features=2, bias=True) ) 2\uff1a\u8fdb\u884c\u5168\u5c40\u526a\u679d # \u7528\u5143\u7ec4\u6307\u5b9a\u9700\u8981\u526a\u679d\u7684\u5c42\u548c\u53c2\u6570\u7c7b\u578b parameters_to_prune = ( ( model . conv1 , 'weight' ), ( model . bn1 , 'weight' ), ( model . layer1 [ 0 ] . conv1 , 'weight' ), ( model . layer1 [ 0 ] . conv2 , 'weight' ), ( model . layer1 [ 0 ] . bn1 , 'weight' ), ( model . layer1 [ 0 ] . bn2 , 'weight' ), ( model . layer1 [ 1 ] . bn1 , 'weight' ), ( model . layer1 [ 1 ] . bn2 , 'weight' ), ( model . layer1 [ 1 ] . conv1 , 'weight' ), ( model . layer1 [ 1 ] . conv2 , 'weight' ), ( model . layer2 [ 0 ] . conv1 , 'weight' ), ( model . layer2 [ 0 ] . conv2 , 'weight' ), ( model . layer2 [ 0 ] . bn1 , 'weight' ), ( model . layer2 [ 0 ] . bn2 , 'weight' ), ( model . layer2 [ 1 ] . bn1 , 'weight' ), ( model . layer2 [ 1 ] . bn2 , 'weight' ), ( model . layer2 [ 1 ] . conv1 , 'weight' ), ( model . layer2 [ 1 ] . conv2 , 'weight' ), ( model . layer3 [ 0 ] . conv1 , 'weight' ), ( model . layer3 [ 0 ] . conv2 , 'weight' ), ( model . layer3 [ 0 ] . bn1 , 'weight' ), ( model . layer3 [ 0 ] . bn2 , 'weight' ), ( model . layer3 [ 1 ] . bn1 , 'weight' ), ( model . layer3 [ 1 ] . bn2 , 'weight' ), ( model . layer3 [ 1 ] . conv1 , 'weight' ), ( model . layer3 [ 1 ] . conv2 , 'weight' ), ( model . layer4 [ 0 ] . conv1 , 'weight' ), ( model . layer4 [ 0 ] . conv2 , 'weight' ), ( model . layer4 [ 1 ] . conv1 , 'weight' ), ( model . layer4 [ 1 ] . conv2 , 'weight' ), ) # \u8fdb\u884c\u5168\u5c40\u526a\u679d\uff0c\u53c2\u6570\u5206\u522b\u662f\u9700\u8981\u526a\u679d\u7684\u5c42\u548c\u53c2\u6570\u7c7b\u578b\uff0c\u526a\u679d\u65b9\u6cd5\uff0c\u526a\u679d\u6bd4\u4f8b # \u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u526a\u679d\u540e\u7684\u6a21\u578b\uff0c\u8fd9\u91cc\u76840.45\u662f\u6574\u4f53\u768445%\uff0c\u5404\u4e2a\u90e8\u5206\u526a\u679d\u572845%\u5de6\u53f3 # \u8fd9\u91cc\u4f7f\u7528\u4e86L1\u526a\u679d prune . global_unstructured ( parameters_to_prune , # pruning_method=prune.RandomUnstructured, pruning_method = prune . L1Unstructured , amount = 0.45 , ) # \u6c38\u4e45\u5316\u53c2\u6570 for module , name in parameters_to_prune : prune . remove ( module , name ) # \u67e5\u770b\u4efb\u610f\u5c42\u7684\u53c2\u6570\u60c5\u51b5\uff0c\u4ee5\u786e\u4fdd\u526a\u679d\u6210\u529f print ( model . layer4 [ 1 ] . conv2 . weight ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/pruned.py \u8f93\u51fa\u6548\u679c: # \u6839\u636e0\u7684\u60c5\u51b5\u5c31\u8bf4\u660e\u526a\u679d\u6210\u529f Parameter containing: tensor([[[[ 0.0000, 0.0000, -0.0000], [ 0.0000, 0.0000, -0.0000], [ 0.0000, 0.0000, 0.0000]], [[-0.0113, -0.0132, -0.0103], [-0.0000, -0.0000, -0.0000], [-0.0000, -0.0000, -0.0000]], [[-0.0119, -0.0121, -0.0102], [-0.0121, -0.0116, -0.0000], [-0.0125, -0.0000, -0.0000]], ..., [[[ 0.0000, 0.0000, 0.0000], [-0.0000, -0.0000, -0.0000], [-0.0000, -0.0000, -0.0000]], [[-0.0146, -0.0123, -0.0145], [-0.0000, -0.0000, -0.0111], [-0.0000, -0.0000, -0.0000]], [[ 0.0000, 0.0000, -0.0000], [-0.0000, 0.0000, -0.0000], [ 0.0000, 0.0000, 0.0000]], ..., [[-0.0164, -0.0169, -0.0190], [-0.0000, -0.0113, -0.0103], [-0.0123, -0.0159, -0.0142]], [[ 0.0000, -0.0000, 0.0000], [ 0.0000, -0.0000, -0.0000], [-0.0000, -0.0000, -0.0000]], [[-0.0144, -0.0135, -0.0114], [-0.0000, -0.0000, -0.0000], [ 0.0000, 0.0000, 0.0000]]]], requires_grad=True) 3\uff1a\u67e5\u770b\u5f53\u524d\u63a8\u65ad\u65f6\u95f4 # \u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u8ba1\u7b97\u5355\u6761\u7684\u63a8\u65ad\u65f6\u95f4 from PIL import Image import time # \u4ee5sample.jpg\u4e3a\u4f8b\uff0c\u5b83\u662f\u4e00\u5f20offline\uff08\u7ebf\u4e0b\u5f00\u73ed\uff09\u7684\u56fe\u7247 data_dir = \"./\" image = \"sample.jpg\" # \u4f7f\u7528GPU\u65f6\u4f7f\u7528 # model.to(device) def singe_predict ( data_dir , image ): # \u8bfb\u53d6\u56fe\u7247 im = Image . open ( os . path . join ( data_dir , image )) . convert ( 'RGB' ) # \u56fe\u7247\u9884\u5904\u7406 data_transforms = transforms . Compose ([ transforms . Resize (( 700 , 500 )), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) image_tensor = data_transforms ( im ) # \u62d3\u5c55\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u4e4b\u524d\u8bad\u7ec3\u65f6\u6709batch_size\u8fd9\u4e2a\u7ef4\u5ea6 image_tensor = image_tensor . unsqueeze ( 0 ) # \u4f7f\u7528GPU\u65f6\u4f7f\u7528 # image_tensor = image_tensor.to(device) res = model ( image_tensor ) return torch . argmax ( res ) . item () start = time . time () res = singe_predict ( data_dir , image )) end = time . time () print ( \"Interval:\" , end - start ) print ( res ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/pruned.py \u8f93\u51fa\u6548\u679c: # \u63a8\u65ad\u65f6\u95f4\u964d\u81f3100ms\u4ee5\u5185 Interval: 0.09217426109313965 0 4\uff1a\u67e5\u770b\u5f53\u524d\u51c6\u786e\u7387 # \u5b9a\u4e49\u9a8c\u8bc1\u96c6\u8def\u5f84 off_data_dir = \"./val/offline/\" on_data_dir = \"./val/online/\" def calc_acc ( data_dir , label ): \"\"\"\u8ba1\u7b97\u6307\u5b9a\u8def\u5f84\u4e0b\u7edf\u4e00\u6807\u7b7e\u7684\u51c6\u786e\u7387\"\"\" # \u9884\u6d4b\u6b63\u786e\u7684\u8ba1\u6570 score = 0 # \u8be5\u8def\u5f84\u4e0b\u7684\u56fe\u7247\u540d data = os . listdir ( data_dir ) for image in data : res = singe_predict ( data_dir , image ) if str ( res ) == label : score += 1 return score / len ( data ) # offline\u6570\u636e\u7684\u9884\u6d4b\u51c6\u786e\u7387 off_acc = calc_acc ( off_data_dir , \"0\" ) # online\u6570\u636e\u7684\u9884\u6d4b\u51c6\u786e\u7387 on_acc = calc_acc ( on_data_dir , \"1\" ) # \u5e73\u5747\u51c6\u786e\u7387 acc = ( off_acc + on_acc ) / 2 print ( \"ACC:\" , acc ) # \u4fdd\u5b58\u6a21\u578b\u53c2\u6570 PATH_ = \"./pruned_18_model_ft_params.pth\" torch . save ( model_ft . state_dict (), PATH_ ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/pruned.py \u8f93\u51fa\u6548\u679c: # \u6700\u7ec8\u51c6\u786e\u7387\u4ecd\u80fd\u4fdd\u6301\u572899%\u5de6\u53f3 ACC: 0.9943820224719101 \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5b9e\u65bd\u6b65\u9aa4 \u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e8c\u6b65: \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u5b9e\u73b0 \u7b2c\u4e09\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u8bad\u7ec3\u901f\u5ea6 \u7b2c\u56db\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u63a8\u65ad\u901f\u5ea6-\u6a21\u578b\u526a\u679d 1\uff1a\u52a0\u8f7d\u672a\u526a\u679d\u6a21\u578b 2\uff1a\u8fdb\u884c\u5168\u5c40\u526a\u679d 3\uff1a\u67e5\u770b\u5f53\u524d\u63a8\u65ad\u65f6\u95f4 4\uff1a\u67e5\u770b\u5f53\u524d\u51c6\u786e\u7387 6.5 \u6a21\u578b\u670d\u52a1\u7684\u90e8\u7f72 \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u4ee5\u53ca\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0\u3002 \u4e86\u89e3Flask\u6846\u67b6\u53ca\u5176\u76f8\u5173\u7684\u670d\u52a1\u7ec4\u4ef6\u3002 \u638c\u63e1\u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u3002 \u6574\u4f53\u670d\u52a1\u90e8\u7f72\u4e0e\u8054\u8c03\u6d4b\u8bd5\u3002 \u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0 \u56e0\u4e3a\u8bad\u7ec3AI\u6a21\u578b\u5f80\u5f80\u662f\u8f83\u5927\u7684\u6587\u4ef6\uff0c\u5728\u6bcf\u6b21IO\u65f6\u5f80\u5f80\u6bd4\u8f83\u8017\u65f6\uff0c\u56e0\u6b64\u4f1a\u9009\u62e9\u5728\u670d\u52a1\u5f00\u542f\u65f6\u8bfb\u5165\u5185\u5b58\uff0c\u907f\u514dIO\u64cd\u4f5c\u3002\u800c\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u610f\u5473\u7740\u5f53\u6211\u4eec\u66f4\u65b0\u6a21\u578b\u65f6\u9700\u8981\u6682\u505c\u670d\u52a1\uff0c \u8fd9\u5bf9\u4e8e\u5728\u7ebf\u4efb\u52a1\u662f\u975e\u5e38\u4e0d\u53ef\u53d6\u7684\u884c\u4e3a\uff1b\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65e2\u80fd\u907f\u514dIO\u53c8\u80fd\u4f7f\u7528\u6237\u65e0\u611f\u77e5\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u7684\u8981\u6c42\u5c31\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u8981\u6c42\u3002 \u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0 \u6700\u5e38\u89c1\u7684\u6ee1\u8db3\u70ed\u66f4\u65b0\u8981\u6c42\u7684\u65b9\u6cd5\u5c31\u662f\u4e00\u540c\u5f00\u542f\u4e24\u4e2a\u6a21\u578b\u670d\u52a1\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u6b63\u5f0f\u4f7f\u7528\uff0c\u4e00\u4e2a\u4f5c\u4e3abackup(\u5907\u7528)\uff0c\u5f53\u6211\u4eec\u6709\u66f4\u65b0\u9700\u6c42\u65f6\uff0c\u5c06\u6b63\u5f0f\u670d\u52a1\u6682\u505c\u8fdb\u884c\u6a21\u578b\u66f4\u6362\uff0c\u800c\u6b64\u65f6\u5907\u7528\u670d\u52a1\u5c06\u7ee7\u7eed\u4e3a\u7528\u6237\u670d\u52a1\uff0c\u76f4\u5230\u6b63\u5f0f\u670d\u52a1\u91cd\u65b0\u4e0a\u7ebf\u3002\u5728\u6b63\u5f0f\u670d\u52a1\u8fd0\u8f6c\u6b63\u5e38\u540e\uff0c\u518d\u4e3a\u5907\u7528\u670d\u52a1\u66f4\u6362\u6a21\u578b\u3002 Flask\u670d\u52a1\u7ec4\u4ef6 web\u6846\u67b6FLask\uff1a Flask\u6846\u67b6\u662f\u5f53\u4e0b\u6700\u53d7\u6b22\u8fce\u7684python\u8f7b\u91cf\u7ea7\u6846\u67b6, \u4e5f\u662fpytorch\u5b98\u7f51\u6307\u5b9a\u7684\u90e8\u7f72\u6846\u67b6. Flask\u7684\u57fa\u672c\u6a21\u5f0f\u4e3a\u5728\u7a0b\u5e8f\u91cc\u5c06\u4e00\u4e2a\u89c6\u56fe\u51fd\u6570\u5206\u914d\u7ed9\u4e00\u4e2aURL\uff0c\u6bcf\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2aURL\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u7ed9\u8be5URL\u5206\u914d\u597d\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u83b7\u53d6\u51fd\u6570\u7684\u8fd4\u56de\u503c. \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Flask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5Flask pip install Flask == 1 .1.1 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u5bfc\u5165Flask\u7c7b from flask import Flask # \u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b9e\u4f8bapp, \u53c2\u6570\u4e3a__name__, \u8fd9\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\uff0c # \u8fd9\u6837Flask\u624d\u80fd\u77e5\u9053\u5728\u54ea\u91cc\u53ef\u627e\u5230\u6a21\u677f\u548c\u9759\u6001\u6587\u4ef6\u7b49\u4e1c\u897f. app = Flask ( __name__ ) # \u4f7f\u7528route()\u88c5\u9970\u5668\u6765\u544a\u8bc9Flask\u89e6\u53d1\u51fd\u6570\u7684URL @app.route ( '/' ) def hello_world (): \"\"\"\u8bf7\u6c42\u6307\u5b9a\u7684url\u540e\uff0c\u6267\u884c\u7684\u4e3b\u8981\u903b\u8f91\u51fd\u6570\"\"\" # \u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u4fe1\u606f:'Hello, World!' return 'Hello, World!' if __name__ == '__main__' : app . run ( host = \"0.0.0.0\" , port = 5005 ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Pm/resnet_server/app.py \u542f\u52a8\u670d\u52a1: python app.py \u67e5\u770b\u6548\u679c: \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740http://0.0.0.0:5001\u53ef\u770b\u89c1\u6253\u5370\u4e86'Hello, World'. web\u7ec4\u4ef6Gunicorn: Gunicorn\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u9ad8\u6027\u80fd\u7684Python WSGI UNIX HTTP\u670d\u52a1\u7ec4\u4ef6(WSGI: Web Server Gateway Interface)\uff0c\u79fb\u690d\u81eaRuby\u7684\u72ec\u89d2\u517d\uff08Unicorn \uff09\u9879\u76ee\uff0c\u5177\u6709\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8d44\u6e90\u6d88\u8017\uff0c\u4ee5\u53ca\u9ad8\u6027\u80fd\u7b49\u7279\u70b9\u3002 \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Gunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528, \u5904\u7406\u8bf7\u6c42, \u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5gunicorn pip install gunicorn == 20 .0.4 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u6ce8\u610f\uff1akill\u6389\u4e4b\u524d\u76845001\u7aef\u53e3\u670d\u52a1\uff0c\u4e0d\u518d\u4f7f\u7528\u539f\u751f\u7684\u542f\u52a8\u65b9\u5f0f # \u800c\u662f\u4f7f\u7528gunicorn\u542f\u52a8Flask\u670d\u52a1: gunicorn -w 1 -b 0 .0.0.0:5005 app:app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570, \u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # app:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e, \u5728app.py\u4e2d\u7684app\u5bf9\u8c61 \u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1 \u6211\u4eec\u53ef\u4ee5\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u5206\u4e3a\u4e09\u6b65: \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0 \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b: # Flask\u6846\u67b6\u56fa\u5b9a\u5de5\u5177 from flask import Flask from flask import request app = Flask ( __name__ ) import torch import torch.nn as nn import torchvision from torchvision import datasets , models , transforms from PIL import Image # \u6700\u65b0\u7684\u6a21\u578b\uff0c\u5927\u5bb6\u6839\u636e\u81ea\u5df1\u4e4b\u524d\u8bad\u7ec3\u7684\u6a21\u578b\u540d\u5b57\u8fdb\u884c\u4fee\u6539 model_name = \"18_model_ft_params.pth\" # \u6700\u65b0\u6a21\u578b\u7684\u5168\u8def\u5f84 model_path = \"/data/ItcastBrain/Pm/resnet_model/\" + model_name # \u52a0\u8f7d\u5df2\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u6ce8\u610f: \u8fd9\u6bb5\u52a0\u8f7d\u8bed\u53e5\u4e0d\u80fd\u5199\u5165\u4e0b\u65b9\u7684\u51fd\u6570\u4e2d\uff0c # \u5426\u5219\u5c06\u4f1a\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u91cd\u65b0\u52a0\u8f7d # \u6062\u590d\u6a21\u578b model = torchvision . models . resnet18 ( pretrained = True ) num_ftrs = model . fc . in_features model . fc = nn . Linear ( num_ftrs , 2 ) # \u52a0\u8f7d\u6743\u91cd model . load_state_dict ( torch . load ( model_path , map_location = torch . device ( 'cpu' ))) model . eval () # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f, \u8fd9\u91cc\u4f7f\u7528POST\u8bf7\u6c42 @app.route ( '/v1/is_online/' , methods = [ \"POST\" ]) def recogniition (): # \u4f20\u5165\u7684\u53c2\u6570\u662fjson\u683c\u5f0f\u7684\u56fe\u7247\u8def\u5f84 image_path = request . get_json ()[ \"image_path\" ] # \u6839\u636e\u8def\u5f84\u6253\u5f00\u56fe\u7247 im = Image . open ( image_path ) . convert ( 'RGB' ) # \u548c\u4e4b\u524d\u9a8c\u8bc1\u6570\u636e\u96c6\u505a\u76f8\u540c\u7684\u5904\u7406 data_transforms = transforms . Compose ([ transforms . Resize (( 700 , 500 )), # transforms.CenterCrop(224), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) image_tensor = data_transforms ( im ) # \u62d3\u5c55\u4e00\u4e2a\u7ef4\u5ea6\uff08\u56e0\u4e3a\u4e4b\u524d\u6709batch_size\u8fd9\u4e2a\u7ef4\u5ea6\uff09 image_tensor = image_tensor . unsqueeze ( 0 ) # \u6a21\u578b\u9884\u6d4b res = model ( image_tensor ) # \u5f97\u5230\u6700\u5927\u503c\u5bf9\u5e94\u7684\u7d22\u5f15 return str ( torch . argmax ( res ) . item ()) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Pm/resnet_server/app.py \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u6765\u542f\u52a8\u670d\u52a1 # \u53ef\u4ee5\u6dfb\u52a0--chdir\u53c2\u6570\u6765\u6307\u660eapp\u8def\u5f84 gunicorn -w 1 -b 0 .0.0.0:5005 --chdir /data/ItcastBrain/Pm/resnet_server/ app:app \u8f93\u51fa\u6548\u679c: [2020-06-04 17:04:11 +0800] [28276] [INFO] Starting gunicorn 20.0.4 [2020-06-04 17:04:11 +0800] [28276] [INFO] Listening at: http://0.0.0.0:5005 (29276) [2020-06-04 17:04:11 +0800] [28276] [INFO] Using worker: sync [2020-06-04 17:04:11 +0800] [28279] [INFO] Booting worker with pid: 29279 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 import requests import requests url = \"http://0.0.0.0:5005/v1/is_online/\" # \u4f60\u53ef\u4ee5\u81ea\u5df1\u5728\u8be5\u76ee\u5f55\u4e0b\u653e\u7f6e\u4efb\u610f\u56fe\u7247 image_path = \"/data/ItcastBrain/Pm/image/sample.jpg\" # \u4f20\u8f93\u7684\u6570\u636e\u4f53 data = { 'image_path' : image_path } res = requests . post ( url , json = data , timeout = 200 ) print ( res . text ) \u4ee3\u7801\u4f4d\u7f6e: data/ItcastBrain/Pm/resnet_server/test.py \u8f93\u51fa\u6548\u679c: # \u8f93\u51fa0\u6216\u80051\uff0c\u4ee3\u8868online\u6216\u8005offline 0/1 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0 \u5230\u8fd9\u91cc\u8bf4\u660e\u6211\u4eec\u6a21\u578b\u670d\u52a1\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e4b\u540e\u6211\u4eec\u5c06\u542f\u52a8\u4e24\u4e2a\u540c\u6837\u7684\u670d\u52a1\uff0c\u5206\u522b\u4f7f\u75285001\u548c5002\u7aef\u53e3, \u5e76\u5c06\u4e24\u4e2a\u670d\u52a1\u4f7f\u7528Nginx\u4ee3\u7406\u5b9c\u6ee1\u8db3\u70ed\u66f4\u65b0\u3002\u4e0b\u9762\u5bf9nginx\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u4ecb\u7ecd\uff0c\u5e76\u5bf9\u5176\u4e2d\u7684\u914d\u7f6e\u8fdb\u884c\u8bf4\u660e\u3002 Nginx: Nginx\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684HTTP\u548c\u53cd\u5411\u4ee3\u7406web\u670d\u52a1\u5668\uff0c\u4e5f\u662f\u5de5\u4e1a\u754cweb\u670d\u52a1\u6700\u5e38\u4f7f\u7528\u7684\u5916\u5c42\u4ee3\u7406\u3002 Nginx\u70ed\u66f4\u65b0\u90e8\u5206\u914d\u7f6e\u8bf4\u660e: \u8fd9\u4e9b\u914d\u7f6e\u5df2\u7ecf\u4e3a\u5927\u5bb6\u5199\u597d\uff0c\u53ef\u4ee5\u5728/data/ItcastBrain/conf/nginx/nginx.conf\u4e2d\u8fdb\u884c\u67e5\u770b\u3002 ... # \u4ee5\u4e0b\u662f\u4e0e\u70ed\u66f4\u65b0\u6709\u5173\u7684\u914d\u7f6e # \u8fd9\u91cc\u4ee3\u7406\u4e24\u4e2a\u7aef\u53e3\u7684\u670d\u52a1 # \u5176\u4e2d5005\u4e3abackup\uff0c\u5373\u5f535006\u670d\u52a1\u505c\u6b62\u65f6\u88ab\u542f\u7528 # \u8fd9\u91cc\u7684prod\u8981\u4e0e\u4e0b\u9762proxy_pass\u4e2dhttp://\u540e\u7684\u540d\u79f0\u76f8\u540c upstream prod { server 0.0.0.0:5005; server 0.0.0.0:5006 backup; } # nginx\u7684\u5916\u5c42\u670d\u52a1\u4f7f\u75288086\u7aef\u53e3 server { listen 8086; server_name 0.0.0.0; location /static/ { alias /data/ItcastBrain/static/; } # \u8fd9\u91cc\u6ce8\u610fprod\u8981\u4e0e\u4e0a\u9762upstream\u540e\u7684\u540d\u79f0\u76f8\u540c location / { proxy_pass http://prod; include /data/ItcastBrain/conf/nginx/uwsgi_params; proxy_set_header X-Real-IP $remote_addr; } } ... Nginx\u7684\u542f\u52a8\u4e0e\u5173\u95ed: # \u5b9e\u9645\u4e2d\u6211\u4eec\u5e76\u4e0d\u4f1a\u76f4\u63a5\u542f\u52a8Nginx\uff0c\u800c\u662f\u5728\u6574\u4f53\u670d\u52a1\u90e8\u7f72\u65f6\u4f7f\u7528supervisor\u8fdb\u884c\u542f\u52a8\u548c\u5173\u95ed # \u56e0\u6b64\u8fd9\u91cc\u5927\u5bb6\u4e86\u89e3\u4ee5\u4e0b\u542f\u52a8\u547d\u4ee4\u5373\u53ef # -c\u662f\u6307\u5411\u914d\u7f6e\u6587\u4ef6 nginx -c /data/ItcastBrain/conf/nginx/nginx.conf # \u5173\u95ednginx nginx -s stop \u6574\u4f53\u670d\u52a1\u90e8\u7f72\u4e0e\u8054\u8c03\u6d4b\u8bd5 \u4e3a\u4e86\u5b8c\u6210\u6574\u4f53\u670d\u52a1\u90e8\u7f72\uff0c\u6211\u4eec\u9700\u8981\u8ba9AI\u7cfb\u7edf\u4e0e\u54a8\u8be2\u5e08\u540e\u7aef\u7cfb\u7edf\u8fdb\u884c\u5bf9\u63a5\u3002\u4ee5\u5f80AI\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u5728\u5904\u7406\u4e00\u4e9b\u81ea\u5b9a\u4e49\u683c\u5f0f\u7684\u6570\u636e\uff0c\u4f46\u662f\u73b0\u5728\u6211\u4eec\u9700\u8981\u548c\u540e\u7aef\u5de5\u7a0b\u5e08\u4e00\u540c\u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\u7684\u6570\u636e\u683c\u5f0f\uff0c\u4ee5\u65b9\u4fbf\u4ed6\u4eec\u6765\u8bf7\u6c42\u6211\u4eec\u7684\u63a5\u53e3\u548c\u4f7f\u7528\u6570\u636e\u3002\u4f5c\u4e3aREST API\uff0c\u8f93\u5165\u8f93\u51fa\u7684\u57fa\u672c\u683c\u5f0f\u90fd\u5e94\u662fJSON\u3002\u4f46\u73b0\u5728\uff0c\u540e\u7aef\u5de5\u7a0b\u5e08\u9700\u8981\u4f20\u8f93\u7684\u4fe1\u606f\u662f\u56fe\u7247\uff0c\u56fe\u7247\u5982\u4f55\u8868\u793a\u6210json\u5462\uff0c\u8fd9\u91cc\u9700\u8981\u7f16\u7801\u6210base64\u3002 \u8f93\u5165\u7684JSON\u683c\u5f0f\uff1a \u6211\u4eec\u5728\u540e\u9762\u4f1a\u8bb2\u89e3\u5982\u4f55\u5c06\u672c\u5730\u56fe\u7247\u8f6c\u7801\u6210base64_data { \"image_id\" : \"12345\" , \"image_base64\" : str(base 64 _data) } \u6570\u636e\u8bf4\u660e: \u5fc5\u987b\u4e3ajson\u683c\u5f0f image_id: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6 str(image_base64): \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u88abbase64\u7f16\u7801\u540e\u8fd8\u8981\u8f6c\u6210str \u5173\u4e8e\u8f93\u51fa\u5219\u7b80\u5355\u8bb8\u591a\uff0c\u8f93\u51fa\u7684JSON\u683c\u5f0f\u5982\u4e0b: { \"image_id\" : \"12345\" , \"result\" : \"offline\" } \u6570\u636e\u8bf4\u660e: \u5fc5\u987b\u4e3ajson\u683c\u5f0f image_id: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6 result: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u53ea\u53ef\u80fd\u4e3aoffline\u6216\u8005online\uff0c\u4ee3\u8868\u7ebf\u4e0b\u6216\u8005\u7ebf\u4e0a\u5f00\u73ed \u8fd9\u6837\u6211\u4eec\u5c31\u660e\u786e\u4e86AI\u6574\u4f53\u670d\u52a1\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5f00\u59cb\u642d\u5efa\u8fd9\u4e2a\u670d\u52a1\uff0c\u6574\u4e2a\u670d\u52a1\u6846\u67b6\u57fa\u4e8eDjango\uff0c\u8fc7\u7a0b\u53ef\u5206\u4e3a\u4e00\u4e0b\u51e0\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u62f7\u8d1d\u670d\u52a1\u6846\u67b6\u7684\u57fa\u672c\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u7f16\u5199\u4e24\u4e2a\u6838\u5fc3\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u5185\u5bb9 \u7b2c\u4e09\u6b65: \u5b89\u88c5supervisor\u76d1\u63a7\u5b88\u62a4\u5de5\u5177\u5e76\u542f\u52a8\u670d\u52a1 \u7b2c\u56db\u6b65: \u8fdb\u884c\u8054\u8c03\u6d4b\u8bd5 \u7b2c\u4e00\u6b65: \u62f7\u8d1d\u670d\u52a1\u6846\u67b6\u7684\u57fa\u672c\u6587\u4ef6 \u6211\u4eec\u5df2\u7ecf\u4e3a\u5927\u5bb6\u51c6\u5907\u597d\u4e86Django\u670d\u52a1\u7684\u57fa\u672c\u6587\u4ef6 \u6ce8\u610f\uff1a\u9700\u8981\u5728/data/\u76ee\u5f55\u4e0b\u5b89\u88c5Anaconda3 \u6587\u4ef6\u67e5\u770b\u6548\u679c, \u5b83\u4eec\u5e94\u8be5\u5728/data/ItcastBrain/\u8def\u5f84\u4e0b: drwxr-xr-x 4 root root 4096 5\u6708 11 17:21 api drwxr-xr-x 3 root root 4096 5\u6708 28 16:00 conf -rw-r--r-- 1 root root 180224 5\u6708 9 15:30 db.sqlite3 drwxr-xr-x 5 root root 4096 6\u6708 5 13:37 Pm -rw-r--r-- 1 root root 0 1\u6708 26 2019 __init__.py drwxr-xr-x 2 root root 4096 5\u6708 28 16:42 log -rwxr-xr-x 1 root root 1501 1\u6708 26 2019 manage.py -rw-r--r-- 1 root root 1643 1\u6708 26 2019 README.md -rw-r--r-- 1 root root 237 6\u6708 1 16:13 requirements.txt drwxr-xr-x 3 root root 4096 5\u6708 9 15:46 server drwxr-xr-x 12 root root 4096 2\u6708 6 18:43 static -rw-r--r-- 1 root root 10177 5\u6708 28 16:07 supervisord.conf drwxr-xr-x 2 root root 4096 5\u6708 9 15:33 supervisord.conf.d -rw-r--r-- 1 root root 6038 6\u6708 1 17:35 test.py \u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177: # \u786e\u4fdd\u4f60\u7684pip\u662fpython3\u4e0b\u7684pip # \u5728/data/ItcastBrain/\u8def\u5f84\u4e0b\u6267\u884c: pip install -r requirements.txt \u7b2c\u4e8c\u6b65: \u7f16\u5199\u4e24\u4e2a\u6838\u5fc3\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9 \u5148\u6765\u4e86\u89e3\u4e00\u4e0bDjango\u670d\u52a1\u4e2d\u7684\u4e24\u4e2a\u6587\u4ef6: urls.py, \u4f4d\u4e8e/data/ItcastBrain/api/\u76ee\u5f55\u4e0b, \u7528\u4e8e\u5c06\u524d\u7aef\u7684\u8bf7\u6c42url\u8f6c\u53d1\u5230views\u51fd\u6570\u4e2d\u3002 views.py, \u4f4d\u4e8e/data/ItcastBrain/Pm/\u76ee\u5f55\u4e0b, \u7528\u4e8e\u63a5\u6536\u6765\u81ea\u524d\u7aef\u8bf7\u6c42\u7684\u6570\u636e, \u5e76\u8bf7\u6c42\u6a21\u578b\u5fae\u670d\u52a1\u83b7\u5f97\u7ed3\u679c, \u5c01\u88c5\u6210\u54cd\u5e94\u4f53\u8fd4\u56de\u3002 \u7f16\u5199url.py: from django.conf.urls import url from django.contrib import admin # \u5f15\u5165Yxb\u4e2d\u7684views.py from Yxb import views as y_views urlpatterns = [ url ( r '^admin/' , admin . site . urls ), url ( r '^api/v1/get_pm[/]?$' , p_views . get_pm ), ] \u7f16\u5199views.py # coding: utf8 # Copyright 2017 Stephen. All Rights Reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # ============================================================================ from django.http import ( HttpResponse , StreamingHttpResponse , FileResponse , ) from rest_framework import viewsets from rest_framework.response import Response from rest_framework.decorators import api_view from rest_framework.authentication import ( SessionAuthentication , BasicAuthentication , ) from rest_framework.permissions import IsAuthenticated from rest_framework.decorators import authentication_classes from rest_framework.decorators import permission_classes import json from Pm.config import * import base64 import requests @api_view ([ \"POST\" ]) def get_pm ( request ): \"\"\"\u4e3b\u8981\u5904\u7406\u903b\u8f91 Args: request: \u8bf7\u6c42\u4f53, {\"image_id\": \"12345\", \"image_base64\": str(base64_data)} Return: {\"image_id\":\"12345\",\"result\":\"offline\"} \"\"\" # \u83b7\u5f97\u8bf7\u6c42\u6570\u636e content = json . loads ( request . body . decode ()) img_id = content [ \"image_id\" ] # \u83b7\u5f97base64\u7f16\u7801\uff0c\u56e0\u4e3a\u4e4b\u524d\u52a0\u4e86str\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528eval img_base64 = eval ( content [ \"image_base64\" ]) # \u521b\u5efa\u4e00\u4e2a\u8def\u5f84\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u6b21\u7528\u6237\u8bf7\u6c42\u7684\u6570\u636e img_path = \"/data/ItcastBrain/Pm/image/{}.png\" . format ( img_id ) # \u89e3\u7801base64\uff0c\u5b58\u50a8\u8be5\u56fe\u7247 file = open ( img_path , 'wb' ) file . write ( base64 . b64decode ( img_base64 )) file . close () # \u8bf7\u6c42\u6a21\u578b\u670d\u52a1 url = \"http://0.0.0.0:5005/v1/is_online/\" data = { 'image_path' : img_path } res = requests . post ( url , json = data , timeout = 200 ) result = { \"0\" : \"offline\" , \"1\" : \"online\" } return Response ({ \"image_id\" : img_id , \"result\" : result [ str ( res . text )]}) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Pm/views.py \u7b2c\u4e09\u6b65: \u5b89\u88c5supervisor\u76d1\u63a7\u5b88\u62a4\u5de5\u5177\u5e76\u542f\u52a8\u670d\u52a1 Supervisor\u670d\u52a1\u76d1\u63a7: * Supervisor\u662f\u7528Python\u5f00\u53d1\u7684\u4e00\u4e2aclient/server\u670d\u52a1\uff0c\u662fLinux/Unix\u7cfb\u7edf\u4e0b\u7684\u4e00\u4e2a\u8fdb\u7a0b\u7ba1\u7406\u5de5\u5177\u3002\u5b83\u53ef \u4ee5\u5f88\u65b9\u4fbf\u7684\u76d1\u542c\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u91cd\u542f\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b, \u5e76\u5b88\u62a4\u8fd9\u4e9b\u8fdb\u7a0b\u3002 * \u5728\u9879\u76ee\u4e2d, Supervisor\u7528\u4e8e\u76d1\u63a7\u548c\u5b88\u62a4AI\u6574\u4f53\u670d\u52a1\u670d\u52a1\u548c\u6a21\u578b\u670d\u52a1. \u5b89\u88c5\u5e76\u542f\u52a8supervisor: # \u4f7f\u7528yum\u5b89\u88c5supervisor yum install supervisor -y \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u7f16\u8f91\u914d\u7f6e\u6587\u4ef6, \u6307\u660e\u76d1\u63a7\u548c\u5b88\u62a4\u7684\u8fdb\u7a0b\u5f00\u542f\u547d\u4ee4, # \u8bf7\u67e5\u770b/data/ItcastBrain/supervisord.conf\u6587\u4ef6 # \u5f00\u542fsupervisor, -c\u7528\u4e8e\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6 sueprvisord -c /data/ItcastBrain/supervisord.conf # \u67e5\u770b\u76d1\u63a7\u7684\u8fdb\u7a0b\u72b6\u6001: supervisorctl status resnet_server1 RUNNING pid 23836, uptime 8 days, 1:02:59 resnet_server2 RUNNING pid 23893, uptime 8 days, 1:02:57 main_server RUNNING pid 8018, uptime 0:07:54 nginx RUNNING pid 23911, uptime 8 days, 1:02:57 # \u5173\u95edsupervisor supervisorctl shutdown \u5173\u4e8esupervisor.conf\u7684\u7b80\u5355\u5206\u6790: ... ... ; \u4e3b\u670d\u52a1\u914d\u7f6e\u547d\u4ee4\uff0c\u4f7f\u7528/data/anaconda3/bin/\u4e0b\u7684uwsgi\u547d\u4ee4\uff0c ; \u6307\u5411/data/ItcastBrain/conf/uwsgi.ini\u914d\u7f6e ; \u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5df2\u7ecf\u4e3a\u540c\u5b66\u4eec\u51c6\u5907\u5c31\u7eea [ program : main_server ] command =/ data / anaconda3 / bin / uwsgi -- ini / data / ItcastBrain / conf / uwsgi . ini -- close - on - exec ; the program (relative uses PATH, can take args) ;process_name=%(program_name)s ; process_name expr (default %(program_name)s) ;numprocs=1 ; number of processes copies to start (def 1) ;directory=/tmp ; directory to cwd to before exec (def no cwd) ;umask=022 ; umask for process (default None) ;priority=999 ; the relative start priority (default 999) ;autostart=true ; start at supervisord start (default: true) ;startsecs=1 ; # of secs prog must stay up to be running (def. 1) ;startretries=3 ; max # of serial start failures when starting (default 3) ;autorestart=unexpected ; when to restart if exited after running (def: unexpected) ;exitcodes=0,2 ; 'expected' exit codes used with autorestart (default 0,2) stopsignal = QUIT ; signal used to kill process (default TERM) ;stopwaitsecs=10 ; max num secs to wait b4 SIGKILL (default 10) stopasgroup = false ; send stop signal to the UNIX process group (default false) killasgroup = false ; SIGKILL the UNIX process group (def false) ;user=chrism ; setuid to this UNIX account to run the program ;redirect_stderr=true ; redirect proc stderr to stdout (default false) stdout_logfile =/ data / ItcastBrain / log / main_server_out . log ; stdout log path, NONE for none; default AUTO stdout_logfile_maxbytes = 1 MB ; max # logfile bytes b4 rotation (default 50MB) ;stdout_logfile_backups=10 ; # of stdout logfile backups (0 means none, default 10) ;stdout_capture_maxbytes=1MB ; number of bytes in 'capturemode' (default 0) ;stdout_events_enabled=false ; emit events on stdout writes (default false) stderr_logfile =/ data / ItcastBrain / log / main_server_err . log ; stderr log path, NONE for none; default AUTO stderr_logfile_maxbytes = 1 MB ; max # logfile bytes b4 rotation (default 50MB) ;stderr_logfile_backups=10 ; # of stderr logfile backups (0 means none, default 10) ;stderr_capture_maxbytes=1MB ; number of bytes in 'capturemode' (default 0) ;stderr_events_enabled=false ; emit events on stderr writes (default false) ;environment=A=\"1\",B=\"2\" ; process environment additions (def no adds) ;serverurl=AUTO ; override serverurl computation (childutils) ; \u76d1\u63a7\u4ee3\u7406\u6a21\u578b\u670d\u52a1\u7684nginx\uff0c\u914d\u7f6e\u6587\u4ef6\u6307\u5411/data/ItcastBrain/conf/nginx/nginx.conf [ program : nginx ] command =/ usr / sbin / nginx - c / data / ItcastBrain / conf / nginx / nginx . conf - g \" daemon off; \" ; \u4e0b\u9762\u662f\u65e5\u5fd7\u5199\u5165\u4f4d\u7f6e\u548c\u6700\u5927\u9650\u5236 stdout_logfile =/ data / ItcastBrain / log / nginx_out . log stderr_logfile =/ data / ItcastBrain / log / nginx_err . log stdout_logfile_maxbytes = 1 MB stderr_logfile_maxbytes = 1 MB ; \u6a21\u578b\u670d\u52a1 [ program : resnet_server1 ] command = gunicorn - w 4 - b 0 . 0 . 0 . 0 : 5005 -- chdir / data / ItcastBrain / Yxb / resnet_server / app : app stdout_logfile =/ data / ItcastBrain / log / res1_out . log stderr_logfile =/ data / ItcastBrain / log / res1_err . log stdout_logfile_maxbytes = 1 MB stderr_logfile_maxbytes = 1 MB ; \u5907\u7528\u6a21\u578b\u670d\u52a1 [ program : resnet_server2 ] command = gunicorn - w 4 - b 0 . 0 . 0 . 0 : 5006 -- chdir / data / ItcastBrain / Pm / resnet_server / app : app stdout_logfile =/ data / ItcastBrain / log / res2_out . log stderr_logfile =/ data / ItcastBrain / log / res2_err . log stdout_logfile_maxbytes = 1 MB \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u6700\u540e\u4e00\u6b65\uff0c\u5411Django\u6307\u660e\u65b0\u589e\u7684\u5e94\u7528Yxb\uff0c\u5373\u4fee\u6539/data/ItcastBrain/server/settings.py\u6587\u4ef6\uff1a 52 INSTALLED_APPS = [ 53 'django.contrib.admin', 54 'django.contrib.auth', 55 'django.contrib.contenttypes', 56 'django.contrib.sessions', 57 'django.contrib.messages', 58 'django.contrib.staticfiles', 59 'api', 60 'django_celery_beat', 61 'rest_framework', 62 'corsheaders', # pip install django-cors-headers 63 'Info', # \u4e0a\u4e00\u4e2a\u4fe1\u606f\u4e2d\u5fc3\u7684\u5e94\u7528Info\uff0c\u9ed8\u8ba4\u7ed9\u5927\u5bb6\u6dfb\u52a0 64 'Pm', # \u672c\u6b21\u9700\u8981\u6dfb\u52a0\u7684\u5e94\u7528\uff0c\u4e5f\u5c31\u662fPm\u6587\u4ef6\u5939\u540d\u79f0 65 ] ... \u5168\u90e8\u51c6\u5907\u5c31\u7eea\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528supervisor\u91cd\u542f\u670d\u52a1\uff08\u6bcf\u6b21\u4fee\u6539\u4ee3\u7801\u90fd\u9700\u8981\u91cd\u65b0\u542f\u52a8\u670d\u52a1\uff09 # \u5728/data/ItcastBrain/\u76ee\u5f55\u4e0b\u8fd0\u884c supervisord -c supervisord.conf # \u5982\u679c\u4f60\u9700\u8981\u67e5\u770b\u62a5\u9519\u65e5\u5fd7\uff0c\u53ef\u4ee5\u901a\u8fc7/data/ItcastBrain/log\u4e2d\u7684main_server_err.log\u67e5\u770b \u5047\u8bbe\u5df2\u7ecf\u6b63\u5e38\u542f\u52a8\u670d\u52a1\uff0c\u4e0b\u9762\u6211\u4eec\u5c06\u7f16\u5199\u4e00\u4e2a\u6d4b\u8bd5\u811a\u672c\u8fdb\u884c\u6d4b\u8bd5. \u6d4b\u8bd5\u811a\u672c: import requests import base64 # \u5728\u8be5\u8def\u5f84\u4e0b\u51c6\u5907\u4e00\u5f20\u5e26\u8bc6\u522b\u7684\u56fe\u7247 image_path = \"/data/ItcastBrain/Pm/image/sample.jpg\" with open ( image_path , \"rb\" ) as f : # b64encode\uff1a\u7f16\u7801\uff0cb64decode: \u89e3\u7801 base64_data = base64 . b64encode ( f . read ()) data = { \"image_id\" : \"12345\" , \"image_base64\" : str ( base64_data ) } url = \"http://0.0.0.0:8087/api/v1/get_pm/\" res = requests . post ( url , json = data ) print ( res . text ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Pm/test.py \u8f93\u51fa\u6548\u679c: { \"image_id\" : \"12345\" , \"result\" : \"offline\" } \u5f53\u7136\uff0c\u5bf9\u4e8e\u4f7f\u7528\u65b9\u6765\u8bb2\uff0c\u4ed6\u4eec\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u4f1a\u4f7f\u7528\u66f4\u5927\u91cf\u7684\u6570\u636e\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u4ee3\u7801\u80fd\u591f\u8fd0\u884c\u6210\u529f\u3002\u6700\u540e\u6211\u4eec\u5c06\u7ed9\u5bf9\u65b9\u4e00\u4e2aAPI\u6587\u6863\u4f5c\u4e3a\u6700\u7ec8\u4ea4\u4ed8\u7269\uff0c\u5185\u5bb9\u8be6\u89c1 \u9644\u4ef6 \u300a\u6570\u636e\u5206\u6790\u56fe\u7247\u89e3\u6790API\u8bf4\u660e\u300b \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u70ed\u66f4\u65b0\u4e0e\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0 \u5b66\u4e60\u4e86Flask\u670d\u52a1\u7ec4\u4ef6\u7684\u4f7f\u7528 \u5b66\u4e60\u4e86\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0 \u5b66\u4e60\u4e86\u6574\u4f53\u670d\u52a1\u90e8\u7f72\u4e0e\u8054\u8c03\u6d4b\u8bd5 \u7b2c\u4e00\u6b65: \u62f7\u8d1d\u670d\u52a1\u6846\u67b6\u7684\u57fa\u672c\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u7f16\u5199\u4e24\u4e2a\u4e2a\u6838\u5fc3\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u5185\u5bb9 \u7b2c\u4e09\u6b65: \u5b89\u88c5supervisor\u76d1\u63a7\u5b88\u62a4\u5de5\u5177\u5e76\u542f\u52a8\u670d\u52a1 \u7b2c\u56db\u6b65: \u8fdb\u884c\u8054\u8c03\u6d4b\u8bd5","title":"6"},{"location":"6/#61","text":"","title":"6.1 \u80cc\u666f\u9700\u6c42\u4e0e\u5206\u6790"},{"location":"6/#_1","text":"\u4e86\u89e3\u8be5\u7cfb\u7edf\u7684\u80cc\u666f\u9700\u6c42\u3002 \u901a\u8fc7\u5bf9\u9700\u6c42\u5206\u6790\u660e\u786e\u4ea4\u4ed8\u7cfb\u7edf\u8981\u6c42\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"6/#_2","text":"\u8be5\u9700\u6c42\u6765\u81ea\u516c\u53f8\u7684\u6570\u636e\u5206\u6790\u56e2\u961f\uff0c\u4ed6\u4eec\u8d1f\u8d23\u7740\u5168\u56fd\u6559\u80b2\u5e02\u573a\u73b0\u72b6\u7684\u7edf\u8ba1\u5206\u6790\u5de5\u4f5c\uff0c\u5c24\u5176\u5728\u75ab\u60c5\u671f\u95f4\uff0c\u591a\u5c11\u673a\u6784\u4ece\u7ebf\u4e0b\u8f6c\u5230\u7ebf\u4e0a\uff0c\u4e0d\u540c\u673a\u6784\u7ebf\u4e0b\u8f6c\u7ebf\u4e0a\u7684\u901f\u5ea6\u4ee5\u53ca\u4e0d\u540c\u533a\u57df\u53d7\u75ab\u60c5\u5f71\u54cd\u7684\u60c5\u51b5\u3002\u8fd9\u4e9b\u91cd\u8981\u4fe1\u606f\u5c06\u5e2e\u52a9\u51b3\u7b56\u5c42\u628a\u63a7\u5f53\u524d\u516c\u53f8\u53d1\u5c55\u548c\u8c03\u6574\u7684\u65b9\u5411\u3002 \u6570\u636e\u5206\u6790\u56e2\u961f\u7684\u6570\u636e\u6293\u53d6\u5de5\u7a0b\u5e08\u4f1a\u5bf9\u5404\u4e2a\u6559\u80b2\u673a\u6784\u53d1\u5e03\u7684\u5f00\u73ed\u60c5\u51b5\u8fdb\u884c\u6293\u53d6\uff0c\u5305\u62ec\u5f00\u73ed\u6587\u6848\uff08\u6807\u9898\u548c\u6b63\u6587\uff09\uff0c\u5f00\u73ed\u7167\u7247\u7b49\uff0c\u6211\u4eec\u5e0c\u671b\u901a\u8fc7\u8fd9\u4e2a\u6293\u53d6\u4fe1\u606f\u5224\u65ad\u8be5\u5730\u533a\u7684\u73ed\u7ea7\u662f\u5426\u4e3a\u7ebf\u4e0b\u5f00\u73ed\uff08\u5b9e\u9645\u4e0a\uff0c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff0c\u8981\u4e48\u7ebf\u4e0a\u8981\u4e48\u7ebf\u4e0b\uff09\uff0c\u5728\u8fd9\u91cc\uff0cAI\u56e2\u961f\u51b3\u5b9a\u4f7f\u7528\u56fe\u7247\u8bc6\u522b\u6765\u533a\u5206\u5f00\u73ed\u60c5\u51b5\u3002","title":"\u80cc\u666f\u9700\u6c42"},{"location":"6/#_3","text":"\u901a\u8fc7\u4e0a\u8ff0\u80cc\u666f\u9700\u6c42\uff0c\u8be5\u95ee\u9898\u88ab\u8f6c\u6362\u6210\u56fe\u7247\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u6211\u4eec\u9996\u5148\u660e\u786e\u4ee5\u4e0b\u51e0\u70b9: \u7cfb\u7edf\u8f93\u5165: \u4e00\u5f20\u73ed\u7ea7\u5f00\u73ed\u7167\u7247\u3002 \u7cfb\u7edf\u8f93\u51fa: \u662f\u5426\u4e3a\u7ebf\u4e0b\u5f00\u73ed\uff080/1\u7684\u51b3\u7b56\u503c\uff09\u3002 \u5728\u7ebf\u670d\u52a1: \u7ecf\u8fc7\u4e0e\u540e\u7aef\u5de5\u7a0b\u5e08\u7684\u6c9f\u901a\uff0c\u6211\u6700\u7ec8\u5c06\u9700\u8981\u4ea4\u4ed8\u56fe\u7247\u8bc6\u522bAPI\uff0c\u5e76\u4e14\u5c3d\u53ef\u80fd\u7684\u7f29\u77ed\u54cd\u5e94\u65f6\u95f4\u5230ms\u7ea7\u522b\u3002 \u4ee5\u4e0a\u8fd9\u4e9b\u4e5f\u662f\u6211\u4eec\u6700\u7ec8\u9700\u8981\u4ea4\u4ed8\u7cfb\u7edf\u7684\u8981\u6c42\u3002","title":"\u9700\u6c42\u5206\u6790"},{"location":"6/#_4","text":"\u5b66\u4e60\u4e86\u7cfb\u7edf\u80cc\u666f\u9700\u6c42: \u5229\u7528\u4eba\u5de5\u667a\u80fd\u7b49\u76f8\u5173\u6280\u672f\u8bc6\u522b\u56fe\u7247\u4e2d\u5c55\u73b0\u7684\u5f00\u73ed\u60c5\u51b5\uff0c\u7ebf\u4e0a\u5f00\u73ed\u8fd8\u662f\u7ebf\u4e0b\u5f00\u73ed\u3002 \u5b66\u4e60\u4e86\u4ea4\u4ed8\u7cfb\u7edf\u8981\u6c42: \u660e\u786e\u4e86\u8f93\u5165\uff0c\u8f93\u51fa\u548c\u5728\u7ebf\u9700\u6c42\u3002","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"6/#62","text":"","title":"6.2 \u4ea7\u54c1\u5f62\u6001\u4e0e\u6548\u679c\u5c55\u793a"},{"location":"6/#_5","text":"\u4e86\u89e3\u7cfb\u7edf\u7684\u6700\u7ec8\u4ea7\u54c1\u5f62\u6001\u3002 \u4e86\u89e3\u7cfb\u7edf\u7684\u4ea7\u54c1\u8bbe\u8ba1\u903b\u8f91\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"6/#_6","text":"\u6574\u4e2a\u6570\u636e\u5206\u6790\u4ea7\u54c1\u6700\u7ec8\u4ea7\u51fa\u7684\u662f\u6570\u636e\u5206\u6790\u62a5\u8868\uff0c\u91cc\u9762\u5305\u542b\u5728\u75ab\u60c5\u5f71\u54cd\u4e0b\uff0c\u5404\u79cd\u5168\u56fd\u673a\u6784\u7684\u5f00\u73ed\u60c5\u51b5\u3002","title":"\u4ea7\u54c1\u5f62\u6001"},{"location":"6/#_7","text":"","title":"\u4ea7\u54c1\u8bbe\u8ba1\u903b\u8f91"},{"location":"6/#_8","text":"\u5b66\u4e60\u4e86\u4ea7\u54c1\u7684\u6700\u7ec8\u5f62\u6001\u3002 \u5b66\u4e60\u4e86\u7cfb\u7edf\u7684\u8f93\u5165\u8f93\u51fa\u8fc7\u7a0b\uff0c\u8ba9\u6211\u4eec\u5bf9\u7cfb\u7edf\u6709\u4e86\u66f4\u52a0\u76f4\u89c2\u7684\u8ba4\u8bc6\u3002","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"6/#63","text":"","title":"6.3 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u521d\u5b9a"},{"location":"6/#_9","text":"\u4e86\u89e3\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u6b65\u9aa4\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"6/#_10","text":"\u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e09\u6b65: \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0","title":"\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u6b65\u9aa4"},{"location":"6/#_11","text":"\u660e\u786e\u95ee\u9898: \u4ece\u6839\u636e\u7ed9\u5b9a\u7684\u56fe\u7247\u5224\u65ad\u662f\u5426\u4e3a\u7ebf\u4e0b\u5f00\u73ed\u3002 \u6570\u636e\u8981\u6c42: \u6570\u636e\u6293\u53d6\u56e2\u961f\u63d0\u4f9b\u7684\u5168\u56fd\u673a\u6784\u5f00\u73ed\u7167\u7247\u4e0d\u5c11\u4e8e500\u5f20\uff0c\u5e76\u5e0c\u671b\u8fd9\u4e9b\u7167\u7247\u6709\u4e00\u5b9a\u7684\u6807\u6ce8\u4fe1\u606f\uff08\u662f\u5426\u4e3a\u7ebf\u4e0b\u5f00\u73ed\uff09\u3002","title":"\u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42"},{"location":"6/#_12","text":"\u6570\u636e\u5206\u6790\u6307\u6807\uff1a 1\uff0c\u56fe\u7247\u8d28\u91cf\u6216\u683c\u5f0f\u8fc7\u6ee4 \u4f5c\u7528\uff1a \u6ee4\u9664\u56fe\u7247\u4e2d\u7684\u975e\u6cd5\u683c\u5f0f\uff08gif\uff0cmp4\u7b49\u7b49\uff09 2\uff0c\u7edf\u8ba1\u56fe\u7247\u5c3a\u5bf8\u5206\u5e03 \u4f5c\u7528\uff1a \u4e86\u89e3\u5f53\u524d\u56fe\u7247\u96c6\u7684\u56fe\u7247\u5c3a\u5bf8\u6982\u51b5\uff0c\u7528\u4e8e\u540e\u7eed\u7684\u526a\u88c1\u5c3a\u5bf8\u9009\u62e9\u3002","title":"\u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u6570\u636e\u5206\u6790"},{"location":"6/#_13","text":"\u6839\u636e\u5f53\u524d\u7684\u786c\u4ef6\u8bbe\u5907\u548c\u5728\u7ebf\u9700\u6c42\uff0c\u6211\u4eec\u5c06\u5747\u8861\u51c6\u786e\u7387\u548c\u63a8\u65ad\u65f6\u95f4\u6765\u9009\u62e9\u6a21\u578b\uff0c\u7b80\u5355\u8fc7\u7a0b\u5982\u4e0b\uff1a 1\uff0c\u91c7\u96c6\u5e76\u6807\u6ce8\u4e0d\u540c\u7c7b\u578b\u95ee\u9898\u7684\u6837\u672c\u6570\u636e 2\uff0c\u8bad\u7ec3\u5e76\u9a8c\u8bc1Resnet\u7cfb\u5217\u8fdb\u884c\u5206\u7c7b","title":"\u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b"},{"location":"6/#_14","text":"\u603b\u4f53\u670d\u52a1\u67b6\u6784\u8bbe\u8ba1 \u4f7f\u7528\u57fa\u4e8eDjango\u7684\u670d\u52a1\u6846\u67b6\u3002 \u4f7f\u7528nginx\u4f5c\u4e3a\u53cd\u5411\u4ee3\u7406\u548c\u8d1f\u8f7d\u5747\u8861\u3002 \u4f7f\u7528supervisor\u4f5c\u4e3a\u5355\u670d\u52a1\u5b88\u62a4\u4e0e\u76d1\u63a7\u3002 \u4f7f\u7528uwsgi\u4f5c\u4e3a\u9ad8\u6027\u80fdweb server\u3002 \u6a21\u578b\u670d\u52a1\u5c01\u88c5 \u57fa\u4e8etensorflow/keras\u6846\u67b6\u5f00\u53d1\u7684\u6a21\u578b\u4f7f\u7528tf-serving\u8fdb\u884c\u5c01\u88c5\uff0c\u4ee5\u4fdd\u8bc1\u670d\u52a1\u5065\u58ee\u6027\u4ee5\u53ca\u6a21\u578b\u70ed\u66f4\u65b0\u3002 \u57fa\u4e8epytorch\u6846\u67b6\u5f00\u53d1\u7684\u6a21\u578b\u4f7f\u7528flask\u6846\u67b6\u8fdb\u884c\u5c01\u88c5\uff0c\u4f7f\u7528\u4ea4\u66ff\u53cc\u670d\u52a1\u4fdd\u8bc1\u6a21\u578b\u70ed\u66f4\u65b0\u3002 \u7cfb\u7edf\u8054\u8c03\u4e0e\u6d4b\u8bd5 \u4e0e\u5916\u754c\u670d\u52a1\u4f7f\u7528REST API\uff08http\uff09\u8fdb\u884c\u4ea4\u4e92\u3002 \u8f93\u5165\u4e0e\u8f93\u51fa\u4e3a\u89c4\u8303json\u683c\u5f0f\uff08\u56fe\u7247\u6570\u636e\u8fdb\u884c\u7f16\u7801\uff09\u3002 \u6839\u636e\u5b9e\u9645\u63a5\u53e3\u8c03\u7528\u60c5\u51b5\uff0c\u8fdb\u884c\u5e76\u53d1\u538b\u529b\u6d4b\u8bd5\u3002 \u7070\u5ea6\u53d1\u5e03\uff0c\u8fdb\u884c\u53ef\u7528\u6027\u6d4b\u8bd5\u3002 \u670d\u52a1\u5668\u8d44\u6e90 \u6a21\u578b\u8bad\u7ec3\u670d\u52a1\u5668: CPU\uff1a8C\uff0c16G\u5185\u5b58\uff0c100G\u786c\u76d8 \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u5668: CPU\uff1a8C\uff0c16G\u5185\u5b58\uff0c100G\u786c\u76d8\uff0c2M\u5e26\u5bbd","title":"\u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0"},{"location":"6/#_15","text":"\u5b66\u4e60\u4e86\u521d\u59cb\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5404\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u660e\u786e\u95ee\u9898\u5e76\u63d0\u51fa\u6570\u636e\u8981\u6c42 \u7b2c\u4e8c\u6b65: \u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u53ef\u89c6\u5316\u6570\u636e\u5206\u6790 \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u56fe\u50cf\u5206\u7c7b \u7b2c\u56db\u6b65: \u6a21\u578b\u90e8\u7f72\u670d\u52a1\u6982\u8ff0","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"6/#64","text":"","title":"6.4 \u6574\u4f53\u89e3\u51b3\u65b9\u6848\u5b9e\u65bd\u4e0e\u8c03\u6574"},{"location":"6/#_16","text":"\u638c\u63e1\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5b9e\u65bd\u6b65\u9aa4\u548c\u4ee3\u7801\u5b9e\u73b0\u3002 \u638c\u63e1\u6839\u636e\u771f\u5b9e\u6570\u636e\u60c5\u51b5\u4f5c\u51fa\u7684\u4e00\u4e9b\u65b9\u6848\u8c03\u6574\u548c\u4ee3\u7801\u5b9e\u73b0\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"6/#_17","text":"\u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e8c\u6b65: \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u5b9e\u73b0 \u7b2c\u4e09\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u8bad\u7ec3\u901f\u5ea6 \u7b2c\u56db\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u63a8\u65ad\u901f\u5ea6-\u6a21\u578b\u526a\u679d","title":"\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5b9e\u65bd\u6b65\u9aa4"},{"location":"6/#_18","text":"\u6839\u636e\u4e4b\u524d\u7684\"\u6570\u636e\u8981\u6c42\"\uff0c\u6211\u4eec\u5c06\u4ece\u6570\u636e\u6293\u53d6\u5de5\u7a0b\u5e08\u624b\u4e2d\u83b7\u5f97\u6307\u5b9a\u6570\u636e\uff0c\u5927\u7ea62000\u5f20\u56fe\u7247\uff08\u5373\u5305\u542b\u7ebf\u4e0a\u7167\u7247\u4e5f\u5305\u542b\u7ebf\u4e0b\u7684\u7167\u7247\uff09\uff0c\u4f46\u548c\u6211\u4eec\u9884\u8ba1\u7684\u4e0d\u540c\uff0c\u8fd9\u4e9b\u56fe\u7247\u5e76\u6ca1\u6709\u63d0\u4f9b\u7ed9\u6807\u7b7e\uff0c\u610f\u5473\u7740\u9700\u8981\u6211\u4eec\u81ea\u5df1\u8fdb\u884c\u76f8\u5e94\u7684\u6807\u6ce8\u3002 \u8fdb\u884c\u56fe\u7247\u6807\u6ce8 \u8fd9\u4e9b\u56fe\u7247\u88ab\u5b58\u50a8\u5728\u8bad\u7ec3\u670d\u52a1\u5668\u7684/data/ItcastBrain_CV/image/\u8def\u5f84\u4e0b. # \u901a\u8fc7\u4ee5\u4e0bshell\u547d\u4ee4\u83b7\u5f97\u56fe\u7247\u6570\u91cf # \u8003\u8651\u6570\u636e\u5b89\u5168\uff0c\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u63d0\u4f9b\u5168\u90e82132\u5f20\u56fe\u7247\uff0c # \u53ea\u63d0\u4f9b\u4e86\u90e8\u5206\u56fe\u7247\uff0c\u5e76\u8fdb\u884c\u4e86\u6a21\u7cca\u5316 # \u56fe\u50cf\u7684\u540d\u5b57\u5df2\u88ab\u8131\u654f\u6210\u6570\u5b57\uff0c # \u5b9e\u9645\u4e0a\u5b83\u5e94\u8be5\u662f'xxx\u6821\u533axxx\u5b66\u79d1xxx\u671f\u5f00\u73ed\u5408\u7167' cd /data/ItcastBrain_CV/image/ ls | wc -l \u5728\u4eba\u5de5\u6807\u6ce8\u524d\uff0c\u5148\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6\u5939\u5206\u522b\u5b58\u50a8\u5bf9\u5e94\u7684\u56fe\u7247\uff0coffline\u548conline\uff0c\u4ee3\u8868\u7ebf\u4e0b\u548c\u7ebf\u4e0a\u3002 mkdir /data/ItcastBrain_CV/online mkdir /data/ItcastBrain_CV/offline \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5e0c\u671b\u50cf\u672c\u673a\u4e00\u6837\u80fd\u591f\u67e5\u770b\u8fd9\u4e9b\u56fe\u7247\uff0c\u56e0\u6b64\u6211\u4eec\u6765\u5230\u670d\u52a1\u5668\u7684/data/ItcastBrain_CV/\u76ee\u5f55\u4e0b\uff0c\u542f\u52a8\u4e00\u4e2a\u7b80\u5355\u7684\u670d\u52a1\uff1a # \u4f60\u7684\u670d\u52a1\u5668\u9700\u8981\u5f00\u901a8000\u7aef\u53e3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u901a\u8fc7\u6d4f\u89c8\u5668\u8fdb\u884c\u56fe\u7247\u67e5\u770b python -m http.server 8000 \u8f93\u51fa\u6548\u679c: \u8fd9\u6837\u6211\u4eec\u5c31\u901a\u8fc7\u6d4f\u89c8\u5668\u6765\u67e5\u770b\u8be5\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u3002\u67e5\u770b\u6bcf\u4e00\u5f20\u56fe\u7247\uff0c\u5c06\u7ebf\u4e0a\u7684\u56fe\u7247\u901a\u8fc7 mv\u547d\u4ee4 \u8f6c\u5230online\u6587\u4ef6\u5939\u4e2d\uff0c\u8fd9\u6837\u6700\u540eimage\u5c31\u5269\u4e0boffline\u56fe\u7247\uff0c\u540c\u65f6\uff0c\u5728\u6574\u4e2a\u6807\u6ce8\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u4e5f\u5c06\u8fc7\u6ee4\u6389\u6240\u6709\u975e\u6cd5\u683c\u5f0f\u548c\u5df2\u7ecf\u635f\u574f\u7684\u56fe\u7247\uff0c\u5728\u540e\u7eed\u7684\u6570\u636e\u5206\u6790\u5904\u7406\u8fc7\u7a0b\u4e2d\uff0c\u5c06\u4e0d\u518d\u9700\u8981\u8fd9\u4e9b\u6b65\u9aa4\u3002 \u901a\u8fc7\u6570\u636e\u589e\u5f3a\u6765\u5747\u8861\u6570\u636e\u96c6 \u6807\u6ce8\u5b8c\u6210\u540e\uff0c\u6211\u4eec\u9700\u8981\u7edf\u8ba1\u4e24\u79cd\u7c7b\u578b\u56fe\u7247\u7684\u6570\u91cf cd /data/ItcastBrain_CV/online ls | wc -l # \u6309\u7167\u7ed9\u5b9a\u7684\u90e8\u5206\u6570\u636e\uff0conline\u56fe\u7247\u6570\u91cf\u5e94\u8be5\u662f500\u5de6\u53f3 cd /data/ItcastBrain_CV/offline ls | wc -l # \u6309\u7167\u7ed9\u5b9a\u7684\u90e8\u5206\u6570\u636e\uff0coffline\u56fe\u7247\u6570\u91cf\u5e94\u8be5\u662f180\u5de6\u53f3 \u6570\u636e\u4e0d\u5747\u8861\u5bf9\u4e8c\u5206\u7c7b\u7684\u5f71\u54cd\uff1a \u5bf9\u4e8e\u5206\u7c7b\u95ee\u9898\u7684\u8bc4\u4f30\u6307\u6807\uff08\u6bd4\u5982acc\uff09\uff0c\u4e0d\u5747\u8861\u5c06\u5bfc\u81f4acc\u4e0d\u5177\u6709\u4ee3\u8868\u6027\u3002\u6240\u4ee5\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u6570\u636e\u589e\u5f3a\u7684\u65b9\u5f0f\u6765\u62d3\u5c55\u6570\u636e\uff0c\u4f7f\u5176\u8d8b\u4e8e\u5e73\u8861\u3002\u5f53\u7136\u89e3\u51b3\u6570\u636e\u4e0d\u5747\u8861\u4e0d\u4ec5\u4ec5\u4e00\u79cd\u65b9\u5f0f\uff0c\u4fee\u6539\u635f\u5931\u51fd\u6570\u4e2d\u6807\u7b7e\u7684\u6743\u91cd\uff0c\u4f7f\u7528AUC\u6307\u6807\u8fdb\u884c\u8bc4\u4f30\u7b49\u90fd\u662f\u5e38\u89c1\u7684\u9009\u62e9\uff0c\u4f46\u662f\u4f7f\u7528\u6570\u636e\u589e\u5f3a\u7684\u65b9\u5f0f\u5e73\u8861\u6570\u636e\u91cf\u662f\u4e1a\u754c\u516c\u8ba4\u7684\u6548\u679c\u66f4\u597d\u7684\u65b9\u5f0f\u3002 \u5982\u4f55\u505a\u6570\u636e\u589e\u5f3a: \u5bf9\u56fe\u50cf\u8fdb\u884c\u589e\u5f3a\u7684\u65b9\u5f0f\u6709\u5f88\u591a\uff0c\u6bd4\u5982\uff0c\u968f\u673a\u7ffb\u8f6c\uff0c\u4e2d\u5fc3\u526a\u88c1\uff0c\u8c03\u8282\u4eae\u5ea6\uff0c\u8c03\u8282\u9971\u548c\u5ea6\u7b49\u7b49\uff0c\u5728\u8fd9\u91cc\u6211\u4eec\u5c06\u628aonline\u6570\u636e\u589e\u5f3a2\u500d\u6765\u5e73\u8861offline\uff0c\u589e\u5f3a\u540eonline\u6570\u636e\u603b\u6570\u4e3a180 + 2*180=540\u3002\u6211\u4eec\u9009\u62e9\u968f\u673a\u8c03\u6574\u4eae\u5ea6\u548c\u968f\u673a\u8c03\u6574\u9971\u548c\u5ea6\u3002 \u539f\u56e0\uff1a\u5bf9\u4e8e\u54ea\u79cd\u589e\u5f3a\u65b9\u5f0f\u5408\u9002\uff0c\u53ef\u4ee5\u901a\u8fc7\u4efb\u52a1\u7279\u70b9\u8fdb\u884c\u4e00\u5b9a\u7684\u9009\u62e9\uff0c\u5bf9\u4e8e\u8be5\u4efb\u52a1\uff0c\u5373\u4f7f\u4e4b\u540e\u7684\u6570\u636e\u96c6\u8db3\u591f\u5927\uff0c\u5728\u6d4b\u8bd5\u4e2d\u4e5f\u6781\u5c11\u51fa\u73b0\u56fe\u50cf\u7ffb\u8f6c\u7684\u60c5\u51b5\uff0c\u56e0\u4e3a\u6293\u53d6\u7684\u5f00\u73ed\u6587\u6848\u4e00\u822c\u53d1\u5e03\u524d\u90fd\u7ecf\u8fc7\u5ba1\u6838\uff0c\u4e0d\u4f1a\u51fa\u73b0\u7167\u7247\u88ab\u7ffb\u8f6c\u7684\u60c5\u51b5\uff0c\u56e0\u6b64\u8fd9\u65b9\u9762\u7684\u589e\u5f3a\u4e00\u822c\u6700\u540e\u8003\u8651\u3002\u6211\u4eec\u901a\u8fc7\u5bf9\u6570\u636e\u7684\u5ba1\u67e5\uff0c\u8fd9\u4e9b\u7167\u7247\u6765\u81ea\u4e0d\u540c\u7684\u8bbe\u5907\u4e14\u5728\u591a\u53d8\u7684\u73af\u5883\u4e2d\uff0c\u56e0\u6b64\u56fe\u7247\u4eae\u5ea6\u548c\u9971\u548c\u5ea6\u662f\u53d8\u5316\u8f83\u5927\u7684\u65b9\u5f0f\u3002 \u6ce8\u610f\uff1a\u5173\u4e8e\u56fe\u7247\u589e\u5f3a\u5de5\u5177\u7684\u4f7f\u7528\u662f\u6ca1\u6709\u9650\u5b9a\u7684\uff0cpytorch/tensorflow\u6846\u67b6\u90fd\u6709\u5b9e\u73b0\u5de5\u5177\uff0c\u4ed6\u4eec\u7684\u5b9e\u73b0\u4e5f\u7565\u6709\u5dee\u5f02\uff0c\u6211\u4eec\u4f1a\u9009\u62e9\u4e8e\u6211\u4eec\u589e\u5f3a\u8981\u6c42\u6700\u5339\u914d\u7684\u5de5\u5177\uff0c\u8fd9\u91cc\u4f7f\u7528tf.image\u3002\u5982\u679c\u4f60\u60f3\u4f7f\u7528\u66f4\u52a0\u4e13\u4e1a\u7684\u6570\u636e\u589e\u5f3a\u5de5\u5177\uff0c\u53ef\u4ee5\u5b66\u4e60 Albumentations \uff0c\u5b83\u7684\u4f7f\u7528\u5f88\u7b80\u5355\uff0c\u4f46\u80fd\u591f\u589e\u5f3a\u7684\u65b9\u5f0f\u5374\u975e\u5e38\u4e30\u5bcc\u3002 \u4eae\u5ea6\u548c\u9971\u548c\u5ea6\u7684\u533a\u522b\uff1a \u4eae\u5ea6\u5f80\u6697\u8d70\u5c31\u662f\u6574\u4e2a\u8272\u76f8\u504f\u6697\u6700\u6697\u5c31\u4f1a\u53d8\u7eaf\u9ed1\uff0c\u5f80\u4eae\u8d70\u5c31\u662f\u6574\u4e2a\u8272\u76f8\u504f\u767d\u4eae\u6700\u4eae\u5c31\u53d8\u7eaf\u767d\u3002\uff08\u8272\u76f8\u7684\u6df1\u6d45\uff09 \u9971\u548c\u5ea6\u6700\u9ad8\u5c31\u662f\u5f53\u524d\u8272\u5f69\u80fd\u8fbe\u5230\u7684\u6700\u5927\u9971\u548c\u7a0b\u5ea6\u5c31\u662f\u6700\u9c9c\u8273\u7684\u610f\u601d\uff0c\u9971\u548c\u5ea6\u6700\u4f4e\u5c31\u4ee3\u8868\u5df2\u7ecf\u662f\u7070\u8272\u6ca1\u6709\u4efb\u4f55\u9971\u548c\u5ea6\u3002\uff08\u8272\u76f8\u7684\u5f3a\u5f31\uff09 \u4f7f\u7528tf.image\u8fdb\u884c\u6307\u5b9a\u6570\u636e\u589e\u5f3a\u7684\u793a\u4f8b # /data/ItcastBrain_CV/sample.jpg\u662f\u6211\u4eec\u7ed9\u5b9a\u7684\u56fe\u7247 import os # pip install tensorflow==2.3.0 import tensorflow as tf import PIL.Image import matplotlib.pyplot as plt import matplotlib as mpl mpl . rcParams [ \"figure.figsize\" ] = ( 12 , 5 ) import numpy as np image_path = \"./\" image_name = \"sample.jpg\" # \u5c06\u56fe\u7247\u8bfb\u5165\u5185\u5b58\uff0c\u4e0etf.io.decode_image\u914d\u5408\u4f7f\u7528 image_string = tf . io . read_file ( os . path . join ( image_path , image_name )) # \u5c06\u5176\u8f6c\u6362\u6210\u5f20\u91cf\uff0c\u4fdd\u7559\u989c\u8272\u901a\u9053 image = tf . io . decode_image ( image_string , channels = 3 ) # \u63a5\u4e0b\u6765\u6211\u4eec\u770b\u4e00\u4e0b\u589e\u5f3a\u7684\u6548\u679c # \u9971\u548c\u5ea6\u8c03\u8282 saturation_image = tf . image . random_saturation ( image , 5 , 10 ) saturation_image = tf . io . encode_jpeg ( saturation_image ) filepath = os . path . join ( image_path , \"saturation_\" + image_name ) tf . io . write_file ( filepath , saturation_image ) # \u4eae\u5ea6\u8c03\u8282 brightness_image = tf . image . random_brightness ( image , 0.2 ) brightness_image = tf . io . encode_jpeg ( brightness_image ) filepath = filepath = os . path . join ( image_path , \"brightness_\" + image_name ) tf . io . write_file ( filepath , brightness_image ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: \u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210brightness_sample.jpg\u548csaturation_sample.jpg \u901a\u8fc7\u6d4f\u89c8\u5668\u67e5\u770b\u539f\u56fe\uff0c\u4eae\u5ea6\u589e\u5f3a\u56fe\uff0c\u9971\u548c\u5ea6\u589e\u5f3a\u56fe \u5bf9online\u4e2d\u7684\u56fe\u7247\u8fdb\u884c\u589e\u5f3a # \u8bfb\u53d6\u6240\u6709\u56fe\u7247 online_image_path = \"./online/\" online_image_names = os . listdir ( online_image_path ) # \u4e0e\u521a\u521a\u7684\u65b9\u5f0f\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u9700\u8981\u5faa\u73af for image_name in online_image_names : image_string = tf . io . read_file ( os . path . join ( online_image_path , image_name )) image = tf . io . decode_image ( image_string , channels = 3 ) ## \u9971\u548c\u5ea6\u8c03\u8282 saturation_image = tf . image . random_saturation ( image , 5 , 10 ) saturation_image = tf . io . encode_jpeg ( saturation_image ) filepath = os . path . join ( online_image_path , \"saturation_\" + image_name ) tf . io . write_file ( filepath , saturation_image ) ## \u4eae\u5ea6\u8c03\u8282 brightness_image = tf . image . random_brightness ( image , 0.2 ) brightness_image = tf . io . encode_jpeg ( brightness_image ) filepath = filepath = os . path . join ( online_image_path , \"brightness_\" + image_name ) tf . io . write_file ( filepath , brightness_image ) print ( \"Finished!\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: \u5728/data/ItcastBrain_CV/online/\u8def\u5f84\u4e0b\uff0c\u56fe\u7247\u6570\u91cf\u589e\u81f3500+ \u5728\u8be5\u8def\u5f84\u4e0b\u4f7f\u7528 ls | wc -l \u67e5\u770b\u6587\u4ef6\u6570\u91cf \u7edf\u8ba1\u56fe\u7247\u5bbd-\u9ad8\u5206\u5e03 \u56e0\u4e3a\u56fe\u7247\u662f\u6211\u4eec\u4eba\u5de5\u6807\u6ce8\u7684\uff0c\u56e0\u6b64\u4e0d\u9700\u8981\u5728\u8fdb\u884c\u683c\u5f0f\u8fc7\u6ee4\u3002 \u4f46\u67e5\u770b\u5bbd-\u9ad8\u5206\u5e03\u662f\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3a\u4e4b\u540e\u5728\u8f93\u5165\u6a21\u578b\u524d\u9700\u8981\u89c4\u8303\u56fe\u7247\u5c3a\u5bf8\uff0c\u901a\u8fc7\u8be5\u5206\u5e03\uff0c\u53ef\u4ee5\u83b7\u5f97\u6bd4\u8f83\u5408\u9002\u7684\u4e2d\u95f4\u503c\u3002 import seaborn as sns # \u51c6\u5907online\u548coffline\u8def\u5f84\u4e0b\u7684\u56fe\u7247\u540d\u5b57 online_image_path = \"./online/\" online_image_names = os . listdir ( online_image_path ) offline_image_path = \"./offline/\" offline_image_names = os . listdir ( offline_image_path ) # \u521d\u59cb\u5316\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5217\u8868 w_list = [] h_list = [] # \u5bf9\u6240\u6709\u7684\u56fe\u7247\uff08\u5305\u62econline\u548coffline\uff09\u540d\u5b57\u8fdb\u884c\u904d\u5386 for image_name in online_image_names + offline_image_names : # \u8fd9\u91cc\u4f7f\u7528try\u6765\u533a\u5206\u6253\u5f00\u56fe\u7247\uff0c\u56e0\u4e3a\u8fd9\u4e9b\u56fe\u7247\u540d\u5b57\u65e2\u6709online\u53c8\u6709offline # \u5728online\u8def\u5f84\u4e0b\u6253\u5f00\u51fa\u9519\uff0c\u5219\u5728offline\u8def\u5f84\u4e0b\u6253\u5f00 try : im = Image . open ( os . path . join ( online_image_path , image_name )) except : im = Image . open ( os . path . join ( offline_image_path , image_name )) # \u5c06\u6bcf\u5f20\u56fe\u7247\u7684\u5bbd\u9ad8\u5b58\u5165\u5217\u8868 w_list . append ( im . size [ 0 ]) h_list . append ( im . size [ 1 ]) # \u63a5\u4e0b\u6765\u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( w_list ) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . savefig ( \"./w_distribu.png\" ) plt . close () # \u7ed8\u5236\u5b66\u5458\u5bf9\u8bdd\u53e5\u5b50\u7684\u957f\u5ea6\u5206\u5e03\u56fe sns . distplot ( h_list ) # \u4e3b\u8981\u5173\u6ce8dist\u957f\u5ea6\u5206\u5e03\u6a2a\u5750\u6807, \u4e0d\u9700\u8981\u7ed8\u5236\u7eb5\u5750\u6807 plt . yticks ([]) plt . savefig ( \"./h_distribu.png\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: \u5728/data/ItcastBrain_CV/\u8def\u5f84\u4e0b\u751f\u6210w_distribu.png\u548ch_distribu.png\u4e24\u5f20\u56fe\u7247\u3002 \u5206\u6790: \u4ece\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u5230\u6240\u6709\u56fe\u7247\u7684\u5bbd\u5ea6\u8303\u56f4\u5927\u6982\u4e3a\uff1a500-2000\uff0c\u5bc6\u5ea6\u8f83\u9ad8\u5728500-1000\u4e4b\u95f4\uff1b\u9ad8\u5ea6\u8303\u56f4\u5927\u6982\u4e3a\uff1a250-2000\uff0c\u5bc6\u5ea6\u8f83\u9ad8\u5728250-750\u4e4b\u95f4\uff0c\u56e0\u6b64\u8f83\u5408\u7406\u7684\u89c4\u8303\u88c1\u526a\u5bbd\u5ea6\u4e3a(500 + 1000)/2 = 750, \u526a\u88c1\u9ad8\u5ea6\u4e3a(250 + 750)/2 = 500\u3002\u8fd9\u5728\u8bad\u7ec3\u524d\u5904\u7406\u65f6\u5c06\u4f1a\u4f7f\u7528\u3002 \u5212\u5206\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6 \u5728\u8fd9\u91cc\u6211\u4eec\u5212\u5206\u6bd4\u4f8b\u5e76\u4e0d\u662f\u4e4b\u524d\u76840.2\u6216\u80050.3\uff0c\u800c\u662f\u9009\u62e9\u4e86\u66f4\u5927\u76840.7\uff0870%\u662f\u9a8c\u8bc1\u96c6\uff0c\u53ea\u670930%\u662f\u8bad\u7ec3\u96c6\uff09 \u539f\u56e0\uff1a\u56e0\u4e3a\u603b\u4f53\u4e0a\uff0c\u8bad\u7ec3\u6570\u636e\u603b\u91cf\u5e76\u4e0d\u5927\uff0c\u56e0\u6b64\u8fc7\u5c0f\u7684\u9a8c\u8bc1\u96c6\u53ef\u80fd\u4e0d\u5177\u6709\u4ee3\u8868\u6027\uff0c\u56e0\u6b64\u4e00\u5b9a\u8981\u52a0\u5927\u9a8c\u8bc1\u96c6\u90e8\u5206\u7684\u6bd4\u4f8b\uff0c\u540c\u65f6\uff0c\u4f60\u53ef\u80fd\u62c5\u5fc3\u8fd9\u4f1a\u9020\u6210\u8bad\u7ec3\u6570\u636e\u8fc7\u5c11\uff0c\u800c\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u7684\u8bad\u7ec3\u65b9\u6cd5\u662f\u5728\u9884\u8bad\u7ec3\u6a21\u578b\u4e0a\u8fdb\u884c\u5fae\u8c03\uff0c\u5b9e\u9a8c\u8868\u660e\u5fae\u8c03\u80fd\u591f\u5728\u5f88\u5c0f\u7684\u6570\u636e\u96c6\u4e0a\u53d6\u5f97\u6548\u679c\uff08\u751a\u81f3\u4ec5\u6709100\u5f20\u56fe\u7247\uff09\u3002 # \u4f7f\u7528shell\u547d\u4ee4\uff0c\u521b\u5efatrain\u548cval\u8def\u5f84, \u5728train\u548cval\u5185\u518d\u521b\u5efaonline\u548coffline\u6587\u4ef6\u5939 mkdir /data/ItcastBrain_CV/train/ mkdir /data/ItcastBrain_CV/train/online/ mkdir /data/ItcastBrain_CV/train/offline/ mkdir /data/ItcastBrain_CV/val/ mkdir /data/ItcastBrain_CV/val/online/ mkdir /data/ItcastBrain_CV/val/offline/ # \u5b9a\u4e49\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u5b58\u50a8\u8def\u5f84 train_online_image_path = \"./train/online/\" train_offline_image_path = \"./train/offline/\" val_online_image_path = \"./val/online/\" val_offline_image_path = \"./val/offline/\" # \u8fdb\u884c\u6bd4\u4f8b\u5212\u5206 online_train_num = int ( len ( online_image_names ) * 0.3 ) online_val_num = len ( online_image_names ) - online_train_num offline_train_num = int ( len ( offline_image_names ) * 0.3 ) offline_val_num = len ( offline_image_names ) - offline_train_num # \u67e5\u770bonline\u548coffline\u4e2d\u5212\u5206\u7684\u8bad\u7ec3\u548c\u9a8c\u8bc1\u56fe\u7247\u6570\u91cf print ( online_train_num , online_val_num ) print ( offline_train_num , offline_val_num ) # \u4f7f\u7528\u8be5\u5de5\u5177\u4e2d\u7684copyfile\u65b9\u6cd5\u590d\u5236\u7c98\u8d34\u529f\u80fd import shutil # \u5c06online\u6570\u636e\u5206\u5230train/online\u548cval/online\u4e2d for image_name in online_image_names [: online_train_num ]: shutil . copyfile ( os . path . join ( online_image_path , image_name ), os . path . join ( train_online_image_path , image_name )) for image_name in online_image_names [ online_train_num :]: shutil . copyfile ( os . path . join ( online_image_path , image_name ), os . path . join ( val_online_image_path , image_name )) # \u5c06offline\u6570\u636e\u5206\u5230train/offline\u548cval/offline\u4e2d for image_name in offline_image_names [: offline_train_num ]: shutil . copyfile ( os . path . join ( offline_image_path , image_name ), os . path . join ( train_offline_image_path , image_name )) for image_name in offline_image_names [ offline_train_num :]: shutil . copyfile ( os . path . join ( offline_image_path , image_name ), os . path . join ( val_offline_image_path , image_name )) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: # online\u5212\u5206\u6570\u91cf 165 387 # offline\u5212\u5206\u6570\u91cf 152 356 \u5728/data/ItcastBrain_CV/train/online/\uff0c /data/ItcastBrain_CV/train/offline/\uff0c /data/ItcastBrain_CV/val/online/\uff0c /data/ItcastBrain_CV/val/offline/\u8def\u5f84\u4e0b\u90fd\u6709\u5bf9\u5e94\u7684\u56fe\u7247\u6587\u4ef6\u3002","title":"\u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790"},{"location":"6/#_19","text":"\u5728\u6a21\u578b\u8bad\u7ec3\u524d\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6a21\u578b\u7684\u9009\u62e9\uff0cCV\u53d1\u5c55\u81f3\u4eca\uff0c\u5df2\u7ecf\u79ef\u7d2f\u4e86\u5927\u91cf\u7684\u7528\u4e8e\u5206\u7c7b\u4efb\u52a1\u7684\u6a21\u578b\uff0c\u5b83\u4eec\u5728\u6807\u51c6\u4efb\u52a1\u4e0a\u90fd\u6709\u4e0d\u9519\u7684\u8868\u73b0\uff0c\u540c\u65f6\uff0c\u8fd9\u4e9b\u6a21\u578b\u4e5f\u5728pytorch\u6846\u67b6\u4e2d\u6709\u4e86\u6807\u51c6\u5b9e\u73b0\uff0c\u8fd9\u5bf9\u4e8e\u6211\u4eec\u8fdb\u884c\u5feb\u901f\u5e94\u7528\u5177\u6709\u91cd\u8981\u610f\u4e49\u3002 \u4e0b\u9762\u6211\u4eec\u770b\u4e00\u4e0bpytorch\u5b9e\u73b0\u768429\u4e2a\u4e3b\u6d41\u9884\u8bad\u7ec3\u6a21\u578b\u5728\u6807\u51c6\u6570\u636e\u96c6ImageNet\u4e0a\u7684\u8868\u73b0\uff1a \u5206\u6790\uff1a top-N error\u662f\u56fe\u50cf\u591a\u5206\u7c7b\u95ee\u9898\u91cd\u8981\u7684\u6307\u6807\uff0c\u56e0\u4e3a\u8be5\u6307\u6807\u4ee3\u8868\u9519\u8bef\u7387\uff0c\u56e0\u6b64\u8be5\u503c\u8d8a\u5c0f\u6a21\u578b\u6548\u679c\u8d8a\u597d\u3002\u4ece\u56fe\u4e2d\u53ef\u4ee5\u770b\u51fa\uff0cResNet\u7cfb\u5217\u6a21\u578b\u5728\u5206\u7c7b\u4efb\u52a1\u4e0a\u5177\u6709\u975e\u5e38\u4e0d\u9519\u7684\u8868\u73b0\uff0c\u65e0\u8bba\u662ftop-1 error\u8fd8\u662ftop-5 error\u90fd\u6709\u6700\u4f73\u6210\u7ee9\uff0c\u8fd9\u662f\u6211\u4eec\u9009\u5b9a\u8be5\u7cfb\u5217\u6a21\u578b\u7684\u539f\u56e0\u3002\u9009\u5b9a\u6a21\u578b\u7cfb\u5217\u540e\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u6bd4\u5bf9\u6574\u4e2aResnet\u7cfb\u5217\u4e2d\u82e5\u5e72\u6a21\u578b\u5728\u5b9e\u9645\u6570\u636e\u96c6\u4e0a\u7684\u6548\u679c\u3002 \u5c01\u88c5\u6570\u636e\u6210\u4e3apytorch\u4e2d\u7684datasets\u5bf9\u8c61 ## torch-1.6.0 torchvision-0.7.0 import torch import torch.nn as nn import torch.optim as optim from torch.optim import lr_scheduler import numpy as np import torchvision from torchvision import datasets , models , transforms import time import os import copy # \u8be5\u811a\u672c\u5c06\u5199\u5728/data/ItcastBrain_CV/\u8def\u5f84\u4e0b data_dir = './' # \u6839\u636e\u4e4b\u524d\u7684\u6570\u636e\u5206\u6790\u83b7\u5f97 gold_size = ( 700 , 500 ) # \u4f7f\u6a21\u578b\u8f93\u5165\u5f20\u91cf\u670d\u4ece\u6807\u51c6\u6b63\u6001\u5206\u5e03\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u5747\u503c\u5217\u8868\uff0c\u4ee3\u8868\u5404\u4e2a\u901a\u9053\u7684\u5747\u503c\uff0c # \u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u6807\u51c6\u5dee\u5217\u8868\uff0c\u4ee3\u8868\u5404\u4e2a\u901a\u9053\u7684\u6807\u51c6\u5dee\u3002\u8fd9\u91cc\u7684\u56fe\u7247\u90fd\u662f\u6709\u4e09\u4e2a\u901a\u9053\u3002 # \u5176\u4e2d\u5747\u503c\u548c\u6807\u51c6\u5dee\u5217\u8868\u4e2d\u7684\u6570\u503c\u6765\u81ea\u5bf9ImageNet\u7684\u5168\u5c40\u91c7\u6837\u7ed3\u679c\u3002 # gold_normalize = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]) # \u5b9a\u4e49\u4e00\u7cfb\u5217\u6807\u51c6\u5904\u7406\u6d41\u7a0b\uff0cResize\uff0c\u5f20\u91cf\u5316\uff0c\u89c4\u8303\u5316 # Resize\u548c\u5f20\u91cf\u5316\u7528\u4e8e\u7edf\u4e00\u56fe\u7247\u5c3a\u5bf8\u548c\u6ee1\u8db3\u6846\u67b6\u8981\u6c42 # \u89c4\u8303\u5316\u4fbf\u4e8e\u6a21\u578b\u5feb\u901f\u6536\u655b data_transforms = { 'train' : transforms . Compose ([ transforms . RandomResizedCrop ( gold_size ), transforms . ToTensor (), transforms . Normalize ( gold_normalize [ 0 ], gold_normalize [ 1 ]) ]), 'val' : transforms . Compose ([ transforms . Resize ( gold_size ), transforms . ToTensor (), transforms . Normalize ( gold_normalize [ 0 ], gold_normalize [ 1 ]) ]), } # \u4f7f\u7528datasets\u7684ImageFolder\u65b9\u6cd5\u8fdb\u884c\u6570\u636e\u8bfb\u53d6\uff0c\u5e76\u901a\u8fc7data_transforms\u5904\u7406 image_datasets = { x : datasets . ImageFolder ( os . path . join ( data_dir , x ), data_transforms [ x ]) for x in [ 'train' , 'val' ]} # \u4e4b\u540e\u4f7f\u7528DataLoader\u8fdb\u884c\u5c01\u88c5\uff0c\u4f7f\u5176\u6bcf\u4e2a\u6279\u6b21\u80fd\u591f\u4f7f\u7528\u8fed\u4ee3\u5668\u4ee5\u4fbf\u51cf\u5c0f\u5185\u5b58\uff0c # \u8fd9\u91cc\u8bbe\u7f6e\u6279\u6b21\u5927\u5c0f\u4e3a8\uff0c\u5e76\u6253\u4e71\u987a\u5e8f\uff0c\u6bcf\u6b21\u542f\u75284\u4e2a\u5b50\u8fdb\u7a0b\u6765\u4e00\u540c\u52a0\u8f7d\u5bf9\u5e94\u6279\u6b21\u7684\u6570\u636e\u3002 dataloaders = { x : torch . utils . data . DataLoader ( image_datasets [ x ], batch_size = 8 , shuffle = True , num_workers = 4 ) for x in [ 'train' , 'val' ]} print ( dataloaders ) dataset_sizes = { x : len ( image_datasets [ x ]) for x in [ 'train' , 'val' ]} print ( dataset_sizes ) # \u5982\u679c\u6709GPU\u6211\u4eec\u5c06\u4f7f\u7528\u8be5\u8bbe\u5907\u8bad\u7ec3 # \u6211\u4eec\u5c06\u5728\u4e00\u53f0Tesla T4\u4e0a\u8fdb\u884c\u8bad\u7ec3\uff0c\u5355\u7cbe\u5ea6\u5cf0\u503c\u7b97\u529b8.1TFLOPS device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/data_analysis.py \u8f93\u51fa\u6548\u679c: {'train': <torch.utils.data.dataloader.DataLoader object at 0x7f620d4d2550>, 'val': <torch.utils.data.dataloader.DataLoader object at 0x7f620d4d2390>} {'train': 317, 'val': 743} \u6a21\u578b\u8bad\u7ec3\u4e0e\u9a8c\u8bc1\u7684\u5b9e\u73b0 def train_and_eval_model ( model , criterion , optimizer , scheduler , num_epochs = 25 ): \"\"\"\u8bad\u7ec3\u5e76\u9a8c\u8bc1\u6a21\u578b Args: model: \u6a21\u578b\u5bf9\u8c61\uff0c\u8fd9\u91cc\u5c06\u4f20\u5165\u9884\u8bad\u7ec3\u6a21\u578b criterion: \u635f\u5931\u8ba1\u7b97\u65b9\u6cd5 optimizer: \u4f18\u5316\u5668 sheduler: \u5b66\u4e60\u7387\u8c03\u8282\u5668 num_epochs: \u8bad\u7ec3\u8f6e\u6570 Return: \u8bad\u7ec3\u540e\u7684\u6a21\u578b \"\"\" # \u83b7\u5f97\u8bad\u7ec3\u5f00\u59cb\u65f6\u95f4 since = time . time () # \u83b7\u5f97\u6700\u521d\u7684model\u72b6\u6001\u5b57\u5178(\u53c2\u6570)\uff0c\u4f7f\u7528\u6df1\u62f7\u8d1d\u4f7fbest_model_wts\u503c\u7a33\u5b9a best_model_wts = copy . deepcopy ( model . state_dict ()) # \u521d\u59cb\u5316\u6a21\u578b\u51c6\u786e\u7387 best_acc = 0.0 # \u5faa\u73af\u8f6e\u6570\u8bad\u7ec3 for epoch in range ( num_epochs ): # \u6253\u5370\u8f6e\u6570 print ( 'Epoch {}/{}' . format ( epoch + 1 , num_epochs )) print ( '-' * 10 ) # \u4f9d\u6b21\u8fdb\u5165\u8bad\u7ec3\u548c\u9a8c\u8bc1\u9636\u6bb5\uff0c\u5904\u7406\u65b9\u5f0f\u6709\u6240\u4e0d\u540c for phase in [ 'train' , 'val' ]: # \u5f00\u542f\u8bad\u7ec3\u6a21\u5f0f\u6216\u9a8c\u8bc1\u6a21\u5f0f model . train () if phase == 'train' else model . eval () # \u521d\u59cb\u5316\u8be5\u8f6e\u6b21\u7684\u635f\u5931\u548c\u51c6\u786e\u7387 running_loss = 0.0 running_corrects = 0 # \u5728\u8be5\u8f6e\u6b21\u4e2d\u8fed\u4ee3\u6279\u6b21\u6570\u636e for inputs , labels in dataloaders [ phase ]: inputs = inputs . to ( device ) labels = labels . to ( device ) # \u68af\u5ea6\u521d\u59cb\u5316 optimizer . zero_grad () # \u81ea\u52a8\u68af\u5ea6\u8ba1\u7b97\u662f\u5426\u5f00\u542f\uff0c\u8bad\u7ec3\u5219\u5f00\u542f\uff0c\u9a8c\u8bc1\u5219\u4e0d\u5f00\u542f with torch . set_grad_enabled ( phase == 'train' ): # \u4f7f\u7528\u6a21\u578b\u83b7\u5f97\u8f93\u51fa\u5206\u5e03 outputs = model ( inputs ) # \u4ece\u5206\u5e03\u4e2d\u83b7\u53d6\u6982\u7387\u6700\u5927\u7684\u7ed3\u679c _ , preds = torch . max ( outputs , 1 ) # \u8ba1\u7b97\u5f53\u524d\u635f\u5931 loss = criterion ( outputs , labels ) if phase == 'train' : # \u5982\u679c\u662f\u8bad\u7ec3\u9636\u6bb5\uff0c\u8bef\u5dee\u53cd\u5411\u4f20\u64ad loss . backward () # \u66f4\u65b0\u53c2\u6570 optimizer . step () # \u8ba1\u7b97\u5e73\u5747\u635f\u5931\u548c\u51c6\u786e\u7387 running_loss += loss . item () * inputs . size ( 0 ) running_corrects += torch . sum ( preds == labels . data ) # \u6bcf\u4e00\u8f6e\u8c03\u6574\u4e00\u6b21\u5b66\u4e60\u7387 if phase == 'train' : scheduler . step () # \u8ba1\u7b97\u6bcf\u8f6e\u7684\u5e73\u5747\u635f\u5931\u548c\u51c6\u786e\u7387 epoch_loss = running_loss / dataset_sizes [ phase ] epoch_acc = running_corrects . double () / dataset_sizes [ phase ] # \u6253\u5370\u6bcf\u8f6e\u7684\u7ed3\u679c print ( '{} Loss: {:.4f} Acc: {:.4f}' . format ( phase , epoch_loss , epoch_acc )) # \u5728\u9a8c\u8bc1\u8fc7\u7a0b\u4e2d\uff0c\u627e\u5230\u51c6\u786e\u7387\u6700\u9ad8\u7684\u7ed3\u679c\u5e76\u4fdd\u5b58\u8be5\u6b21\u6a21\u578b\u7684\u53c2\u6570 if phase == 'val' and epoch_acc > best_acc : best_acc = epoch_acc best_model_wts = copy . deepcopy ( model . state_dict ()) # \u83b7\u5f97\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u7ed3\u675f\u65f6\u95f4 time_elapsed = time . time () - since # \u6253\u5370\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8017\u65f6\u6700\u4f73\u51c6\u786e\u7387 print ( 'Training complete in {:.0f}m {:.0f}s' . format ( time_elapsed // 60 , time_elapsed % 60 )) print ( 'Best val Acc: {:4f}' . format ( best_acc )) # \u6a21\u578b\u91cd\u8f7d\u6700\u4f73\u53c2\u6570 model . load_state_dict ( best_model_wts ) # \u8fd4\u56de\u7ed3\u679c return model \u8c03\u7528\uff1a # \u52a0\u8f7dresnet18\u6a21\u578b\u548c\u5168\u90e8\u9884\u8bad\u7ec3\u53c2\u6570 model = models . resnet18 ( pretrained = True ) # \u53d6resnet18\u539f\u6709\u7684\u6700\u540e\u4e00\u5c42(\u5168\u8fde\u63a5\u5c42)\u8f93\u5165\u7279\u5f81(in_features)\u7ef4\u5ea6 num_ftrs = model . fc . in_features # \u66ff\u6362\u539f\u6709\u7684\u6700\u540e\u4e00\u5c42\uff0c\u8f93\u5165\u7ef4\u5ea6\u4e0d\u53d8\uff0c\u8f93\u51fa\u7ef4\u5ea6\u53d8\u4e3a2 model . fc = nn . Linear ( num_ftrs , 2 ) # \u5c06\u4fee\u6539\u540e\u7684\u6a21\u578b\u53d1\u5230\u6307\u5b9a\u8bbe\u5907\u4e0a model = model . to ( device ) # \u5b9a\u4e49\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570 criterion = nn . CrossEntropyLoss () # \u5b9a\u4e49SGD\u4f18\u5316\u5668 optimizer = optim . SGD ( model . parameters (), lr = 0.001 , momentum = 0.9 ) # \u5b9a\u4e49\u5b66\u4e60\u7387\u8c03\u8282\u5668 scheduler = lr_scheduler . StepLR ( optimizer , step_size = 7 , gamma = 0.1 ) # \u8c03\u7528train_model\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 model_ft = train_model ( model , criterion , optimizer , scheduler , num_epochs = 5 ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/train.py \u8f93\u51fa\u6548\u679c: Epoch 1/5 ---------- train Loss: 0.3131 Acc: 0.8770 val Loss: 0.0840 Acc: 0.9865 Epoch 2/5 ---------- train Loss: 0.1194 Acc: 0.9558 val Loss: 0.0083 Acc: 1.0000 Epoch 3/5 ---------- train Loss: 0.0925 Acc: 0.9621 val Loss: 0.0093 Acc: 1.0000 Epoch 4/5 ---------- train Loss: 0.1181 Acc: 0.9495 val Loss: 0.0039 Acc: 1.0000 Epoch 5/5 ---------- train Loss: 0.0852 Acc: 0.9621 val Loss: 0.0068 Acc: 1.0000 Training complete in 1m 5s Best val Acc: 1.000000 \u7ed3\u8bba\uff1a \u6211\u4eec\u53d1\u73b0\uff0c\u4f7f\u7528\u5c11\u91cf\u5fae\u8c03\u6570\u636e\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528resnet18\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8fbe\u5230\u8fd1100%\u7684\u51c6\u786e\u7387\uff0c\u53ef\u89c1\u8fc1\u79fb\u5b66\u4e60\u7684\u201c\u529f\u529b\u201d\u6240\u5728\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u73b0\u5728\u8fc1\u79fb\u5b66\u4e60\u98ce\u9761\u7684\u91cd\u8981\u539f\u56e0\u3002\u6700\u7ec85\u4e2a\u8f6e\u6b21\u5728Tesla T4\u4e0a\u8bad\u7ec3\u8017\u65f6\u4ec5\u4e3a1m5s\u3002 \u5982\u4f55\u5728\u5176\u4ed6Resnet\u7cfb\u5217\u6a21\u578b\u4e0a\u8bad\u7ec3 # \u53ea\u9700\u4fee\u6539\u6a21\u578b\u540d\u79f0\u5373\u53ef, \u4fee\u6539\u4e0a\u8ff0\u4ee3\u7801 model = models . resnet18 ( pretrained = True ) # \u4fee\u6539\u4e3a\u4ee5\u4e0b\u6a21\u578b\uff0c\u53ef\u4ee5\u9010\u4e2a\u8fdb\u884c\u5c1d\u8bd5 model = models . resnet34 ( pretrained = True ) model = models . resnet50 ( pretrained = True ) model = models . resnet101 ( pretrained = True ) model = models . resnet152 ( pretrained = True ) \u5bf9\u6bd4\u7ed3\u679c \u6240\u6709\u6a21\u578b\u5747\u53ef\u8fbe\u5230\u9a8c\u8bc1\u51c6\u786e\u7387\u8fd1100%\uff0cTelas T4\u4e0a\u76845\u8f6e\u8bad\u7ec3\u65f6\u95f4\u5982\u4e0b\u8868\uff1a resnet18 resnet34 resnet50 resnet101 resnet152 1m5s 1m55s 2m32s 5m2s 9m17s \u4fdd\u5b58\u6a21\u578b PATH_ = \"./18_model_ft_params.pth\" torch . save ( model_ft . state_dict (), PATH_ ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/ItcastBrain_CV/train.py \u8f93\u51fa\u6548\u679c\uff1a \u5728\u8be5\u76ee\u5f55\u4e0b\u5c06\u5f97\u523018_model_ft_params.pth\u53c2\u6570\u6587\u4ef6\u3002","title":"\u7b2c\u4e8c\u6b65: \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u5b9e\u73b0"},{"location":"6/#_20","text":"\u5f53\u524d\u6211\u4eec\u7684\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u7684\u51c6\u786e\u7387\u5df2\u7ecf\u975e\u5e38\u9ad8\uff0c\u6211\u4eec\u4e0d\u518d\u9700\u8981\u4f18\u5316\u51c6\u786e\u7387\uff0c\u4f46\u6211\u4eec\u5e0c\u671b\u6a21\u578b\u8bad\u7ec3\u7684\u901f\u5ea6\u80fd\u591f\u8fdb\u4e00\u6b65\u63d0\u5347\uff0c\u8fd9\u6837\u5c31\u80fd\u591f\u6839\u636e\u6bcf\u4e00\u6279\u65b0\u6765\u7684\u6570\u636e\u5feb\u901f\u7684\u8fed\u4ee3\u6a21\u578b\uff0c\u4ee5\u9002\u5e94\u6700\u65b0\u7684\u6570\u636e\u89c4\u5f8b\u3002 \u51bb\u7ed3\u5927\u90e8\u5206\u53c2\u6570\u7684\u65b9\u5f0f\u8fdb\u884c\u5fae\u8c03 # \u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u52a0\u8f7dresnet18\u7684\u6a21\u578b\u548c\u53c2\u6570 model_conv = torchvision . models . resnet18 ( pretrained = True ) # \u51bb\u7ed3\u6307\u5b9a\u7f51\u7edc\u7684\u53c2\u6570\uff0c # \u8fd9\u91cc\u5c06resnet18\u7279\u5f81\u63d0\u53d6\u90e8\u5206\u7684\u6240\u6709\u53c2\u6570\u51bb\u7ed3(\u4e0d\u6c42\u68af\u5ea6) for param in model_conv . parameters (): param . requires_grad = False # \u76f8\u5f53\u4e8e\u53ea\u53bb\u5fae\u8c03\u6700\u540e\u9762\u7684\u8f93\u51fa\u5c42 num_ftrs = model_conv . fc . in_features model_conv . fc = nn . Linear ( num_ftrs , 2 ) model_conv = model_conv . to ( device ) criterion = nn . CrossEntropyLoss () optimizer_conv = optim . SGD ( model_conv . fc . parameters (), lr = 0.001 , momentum = 0.9 ) exp_lr_scheduler = lr_scheduler . StepLR ( optimizer_conv , step_size = 7 , gamma = 0.1 ) # \u8c03\u7528train_model\u8fdb\u884c\u6a21\u578b\u8bad\u7ec3 model_ft = train_model ( model_conv , criterion , optimizer_conv , exp_lr_scheduler , num_epochs = 5 ) \u4ee3\u7801\u4f4d\u7f6e\uff1a /data/ItcastBrain_CV/train.py \u8f93\u51fa\u6548\u679c: Epoch 1/5 ---------- train Loss: 0.4970 Acc: 0.7161 val Loss: 0.1035 Acc: 1.0000 Epoch 2/5 ---------- train Loss: 0.2245 Acc: 0.9085 val Loss: 0.0733 Acc: 0.9919 Epoch 3/5 ---------- train Loss: 0.2272 Acc: 0.9274 val Loss: 0.0376 Acc: 1.0000 Epoch 4/5 ---------- train Loss: 0.1374 Acc: 0.9653 val Loss: 0.0747 Acc: 0.9812 Epoch 5/5 ---------- train Loss: 0.1624 Acc: 0.9369 val Loss: 0.0262 Acc: 1.0000 Training complete in 0m 43s Best val Acc: 1.000000 \u7ed3\u8bba\uff1a \u8be5\u79cd\u5fae\u8c03\u65b9\u5f0f\u4ecd\u80fd\u4fdd\u8bc1\u9a8c\u8bc1\u51c6\u786e\u7387\uff0c\u540c\u65f6\u5c065\u8f6e\u8bad\u7ec3\u65f6\u95f4\u7f29\u77ed\u4e3a43s\uff08\u4e4b\u524d\u4e3a1m5s\uff09\uff0c\u540c\u5b66\u4eec\u53ef\u4ee5\u81ea\u6d4b\u8be5\u79cd\u65b9\u5f0f\u4e0b\u5176\u5b83Resnet\u7cfb\u5217\u6a21\u578b\u7684\u8bad\u7ec3\u65f6\u95f4\u3002 \u4e0d\u540c\u5fae\u8c03\u65b9\u5f0f\u4e0b\u6a21\u578b\u7684\u53c2\u6570\u60c5\u51b5 \u901a\u8fc7summary\u5de5\u5177\u5305\u67e5\u770b\u6a21\u578b\u53c2\u6570\u3002 pip install torchsummary == 1 .5.1 import os import torch import torch.nn as nn import torchvision from torchvision import datasets , models , transforms from torchsummary import summary device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) # \u6062\u590d\u6a21\u578b\u7ed3\u6784 model = torchvision . models . resnet18 ( pretrained = True ) num_ftrs = model . fc . in_features model . fc = nn . Linear ( num_ftrs , 2 ) # \u53c2\u6570\u8def\u5f84 PATH = \"18_model_ft_params.pth\" # \u6062\u590d\u53c2\u6570 model . load_state_dict ( torch . load ( PATH )) model . eval () # \u67e5\u770b\u5f53\u524d\u6a21\u578b\u60c5\u51b5 summary ( model , ( 3 , 700 , 500 ), device = \"cpu\" ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/test.py \u8f93\u51fa\u6548\u679c: ---------------------------------------------------------------- Layer (type) Output Shape Param # ================================================================ Conv2d-1 [-1, 64, 112, 112] 9,408 BatchNorm2d-2 [-1, 64, 112, 112] 128 ReLU-3 [-1, 64, 112, 112] 0 MaxPool2d-4 [-1, 64, 56, 56] 0 Conv2d-5 [-1, 64, 56, 56] 36,864 BatchNorm2d-6 [-1, 64, 56, 56] 128 ReLU-7 [-1, 64, 56, 56] 0 Conv2d-8 [-1, 64, 56, 56] 36,864 BatchNorm2d-9 [-1, 64, 56, 56] 128 ReLU-10 [-1, 64, 56, 56] 0 BasicBlock-11 [-1, 64, 56, 56] 0 Conv2d-12 [-1, 64, 56, 56] 36,864 BatchNorm2d-13 [-1, 64, 56, 56] 128 ReLU-14 [-1, 64, 56, 56] 0 Conv2d-15 [-1, 64, 56, 56] 36,864 BatchNorm2d-16 [-1, 64, 56, 56] 128 ReLU-17 [-1, 64, 56, 56] 0 BasicBlock-18 [-1, 64, 56, 56] 0 Conv2d-19 [-1, 128, 28, 28] 73,728 BatchNorm2d-20 [-1, 128, 28, 28] 256 ReLU-21 [-1, 128, 28, 28] 0 Conv2d-22 [-1, 128, 28, 28] 147,456 BatchNorm2d-23 [-1, 128, 28, 28] 256 Conv2d-24 [-1, 128, 28, 28] 8,192 BatchNorm2d-25 [-1, 128, 28, 28] 256 ReLU-26 [-1, 128, 28, 28] 0 BasicBlock-27 [-1, 128, 28, 28] 0 Conv2d-28 [-1, 128, 28, 28] 147,456 BatchNorm2d-29 [-1, 128, 28, 28] 256 ReLU-30 [-1, 128, 28, 28] 0 Conv2d-31 [-1, 128, 28, 28] 147,456 BatchNorm2d-32 [-1, 128, 28, 28] 256 ReLU-33 [-1, 128, 28, 28] 0 BasicBlock-34 [-1, 128, 28, 28] 0 Conv2d-35 [-1, 256, 14, 14] 294,912 BatchNorm2d-36 [-1, 256, 14, 14] 512 ReLU-37 [-1, 256, 14, 14] 0 Conv2d-38 [-1, 256, 14, 14] 589,824 BatchNorm2d-39 [-1, 256, 14, 14] 512 Conv2d-40 [-1, 256, 14, 14] 32,768 BatchNorm2d-41 [-1, 256, 14, 14] 512 ReLU-42 [-1, 256, 14, 14] 0 BasicBlock-43 [-1, 256, 14, 14] 0 Conv2d-44 [-1, 256, 14, 14] 589,824 BatchNorm2d-45 [-1, 256, 14, 14] 512 ReLU-46 [-1, 256, 14, 14] 0 Conv2d-47 [-1, 256, 14, 14] 589,824 BatchNorm2d-48 [-1, 256, 14, 14] 512 ReLU-49 [-1, 256, 14, 14] 0 BasicBlock-50 [-1, 256, 14, 14] 0 Conv2d-51 [-1, 512, 7, 7] 1,179,648 BatchNorm2d-52 [-1, 512, 7, 7] 1,024 ReLU-53 [-1, 512, 7, 7] 0 Conv2d-54 [-1, 512, 7, 7] 2,359,296 BatchNorm2d-55 [-1, 512, 7, 7] 1,024 Conv2d-56 [-1, 512, 7, 7] 131,072 BatchNorm2d-57 [-1, 512, 7, 7] 1,024 ReLU-58 [-1, 512, 7, 7] 0 BasicBlock-59 [-1, 512, 7, 7] 0 Conv2d-60 [-1, 512, 7, 7] 2,359,296 BatchNorm2d-61 [-1, 512, 7, 7] 1,024 ReLU-62 [-1, 512, 7, 7] 0 Conv2d-63 [-1, 512, 7, 7] 2,359,296 BatchNorm2d-64 [-1, 512, 7, 7] 1,024 ReLU-65 [-1, 512, 7, 7] 0 BasicBlock-66 [-1, 512, 7, 7] 0 AdaptiveAvgPool2d-67 [-1, 512, 1, 1] 0 Linear-68 [-1, 2] 1,026 ================================================================ Total params: 11,177,538 Trainable params: 1,026 Non-trainable params: 11,176,512 ---------------------------------------------------------------- Input size (MB): 0.57 Forward/backward pass size (MB): 62.79 ## \u8be5\u6a21\u578b\u5b8c\u6210\u6b63\u5411/\u53cd\u5411\u4f20\u64ad\u65f6\u9700\u8981\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4 Params size (MB): 42.64 Estimated Total Size (MB): 106.00 ---------------------------------------------------------------- \u7ed3\u8bba\uff1a \u901a\u8fc7\u7b2c\u4e8c\u79cd\u5fae\u8c03\u65b9\u5f0f\uff0c\u8be5\u6a21\u578b\u53ea\u8bad\u7ec3\u4e861026\u4e2a\u53ef\u8c03\u53c2\u6570\uff0c\u800c\u4f7f\u7528\u7b2c\u4e00\u79cd\u5fae\u8c03\u65b9\u5f0f\uff0c\u5219\u662f\u4e0b\u9762\u7684\u53c2\u6570\u91cf\uff0c\u8fd9\u4e5f\u662f\u8bad\u7ec3\u901f\u5ea6\u7684\u5dee\u5f02\u6240\u5728\u3002 ================================================================ Total params: 11,177,538 Trainable params: 11,177,538 Non-trainable params: 0 ---------------------------------------------------------------- Input size (MB): 4.01 Forward/backward pass size (MB): 441.02 Params size (MB): 42.64 Estimated Total Size (MB): 487.66 ---------------------------------------------------------------- \u4f7f\u7528\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\u5e76\u8ba1\u7b97\u5355\u6761\u63a8\u65ad\u65f6\u95f4 from PIL import Image import time # \u4ee5sample.jpg\u4e3a\u4f8b\uff0c\u5b83\u662f\u4e00\u5f20offline\uff08\u7ebf\u4e0b\u5f00\u73ed\uff09\u7684\u56fe\u7247 data_dir = \"./\" image = \"sample.jpg\" # \u4f7f\u7528GPU\u65f6\u4f7f\u7528 # model.to(device) def singe_predict ( data_dir , image ): # \u8bfb\u53d6\u56fe\u7247 im = Image . open ( os . path . join ( data_dir , image )) . convert ( 'RGB' ) # \u56fe\u7247\u9884\u5904\u7406 data_transforms = transforms . Compose ([ transforms . Resize (( 700 , 500 )), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) image_tensor = data_transforms ( im ) # \u62d3\u5c55\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u4e4b\u524d\u8bad\u7ec3\u65f6\u6709batch_size\u8fd9\u4e2a\u7ef4\u5ea6 image_tensor = image_tensor . unsqueeze ( 0 ) # \u4f7f\u7528GPU\u65f6\u4f7f\u7528 # image_tensor = image_tensor.to(device) res = model ( image_tensor ) return torch . argmax ( res ) . item () if __name__ == \"__main__\" : start = time . time () res = singe_predict ( data_dir , image ) end = time . time () # \u6253\u5370\u5355\u6761\u9884\u6d4b\u65f6\u95f4 print ( \"Interval:\" , end - start ) # \u6253\u5370\u9884\u6d4b\u7ed3\u679c print ( res ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/test.py \u8f93\u51fa\u6548\u679c: # \u5728CPU\u4e0a\u5355\u6761\u63a8\u65ad\u65f6\u95f4\u5728125ms\u5de6\u53f3 Interval: 0.12526451587677002 # \u5728GPU\uff08Tesla T4\uff09\u4e0a\u5355\u6761\u63a8\u65ad\u65f6\u95f4\u572844ms\u5de6\u53f3 Interval: 0.4454502123531231 # 0\u8868\u793aoffline\uff0c1\u8868\u793aonline 0 \u66f4\u591a\u7684\u6d4b\u8bd5 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7684\u56fe\u7247\uff0c\u5982image_dir = \"./offline/77.jpg\"\u7b49\u8fdb\u884c\u6d4b\u8bd5\u6548\u679c\u3002","title":"\u7b2c\u4e09\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u8bad\u7ec3\u901f\u5ea6"},{"location":"6/#-","text":"\u5173\u4e8e\u526a\u679d\u6280\u672f\u539f\u7406\u53ef\u53c2\u89c1 \u7b2c\u4e03\u7ae0\uff1a\u6a21\u578b\u526a\u679d\u6280\u672f \uff0c\u4e0b\u9762\u662f\u6709\u5173\u526a\u679d\u6280\u672f\u7684\u76f4\u63a5\u5e94\u7528\u3002 \u4f7f\u7528\u526a\u679d\u6280\u672f\u7684\u539f\u56e0\uff1a \u6211\u4eecCPU\u8bbe\u5907\uff0816C\uff09\u4e0a\u7684\u5355\u6761\u63a8\u65ad\u65f6\u95f4\uff0c\u5305\u62ec\u56fe\u7247\u9884\u5904\u7406\u548c\u6a21\u578b\u63a8\u65ad\u65f6\u95f4\uff0c\u5171\u8ba1125ms\u5de6\u53f3\uff08\u5176\u4e2d\u4ec5\u6a21\u578b\u63a8\u65ad\u65f6\u95f4\u7ea695ms\uff09\uff0c\u6211\u4eec\u5e0c\u671b\u5c06\u5355\u6761\u63a8\u65ad\u65f6\u95f4\u7531125ms\u63a7\u5236\u523090ms\u5de6\u53f3\uff0c\u5373100ms\u5185\uff0c\u540c\u65f6\u51c6\u786e\u7387\u4e0d\u53ef\u4ee5\u4e0b\u964d\u4f4e\u4e8e95%\uff0c\u8fd9\u91cc\u9009\u62e9\u4e86\u526a\u679d\u6280\u672f\u6765\u5b9e\u73b0\u3002 \u4f7f\u7528\u526a\u679d\u6280\u672f\u7684\u6b65\u9aa4\uff1a 1\uff1a\u52a0\u8f7d\u672a\u526a\u679d\u6a21\u578b 2\uff1a\u8fdb\u884c\u5168\u5c40\u526a\u679d 3\uff1a\u67e5\u770b\u5f53\u524d\u63a8\u65ad\u65f6\u95f4 4\uff1a\u67e5\u770b\u5f53\u524d\u51c6\u786e\u7387 1\uff1a\u52a0\u8f7d\u672a\u526a\u679d\u6a21\u578b # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import os import torch from torch import nn import torch.nn.utils.prune as prune import torch.nn.functional as F import torchvision from torchvision import transforms device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) # \u4fdd\u5b58\u7684\u6a21\u578b\u53c2\u6570\u5730\u5740 PATH = \"./18_model_ft_params.pth\" # \u91cd\u73b0\u6a21\u578b\u7ed3\u6784 model = torchvision . models . resnet18 ( pretrained = True ) num_ftrs = model . fc . in_features model . fc = nn . Linear ( num_ftrs , 2 ) # \u52a0\u8f7d\u53c2\u6570 model . load_state_dict ( torch . load ( PATH )) model . eval () # \u6253\u5370\u6a21\u578b\u7ed3\u6784\uff0c\u4ee5\u786e\u5b9a\u526a\u679d\u540d\u79f0 print ( model ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/pruned.py \u8f93\u51fa\u6548\u679c: # \u4e4b\u540e\u6211\u4eec\u7684\u526a\u679d\u65f6\u5c06\u6307\u5b9a\u8be5\u7ed3\u6784\u4e2d\u7684\u5c42\u540d\u79f0 ResNet( (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False) (layer1): Sequential( (0): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) (1): BasicBlock( (conv1): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (layer2): Sequential( (0): BasicBlock( (conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(64, 128, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (layer3): Sequential( (0): BasicBlock( (conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(128, 256, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (layer4): Sequential( (0): BasicBlock( (conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (downsample): Sequential( (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False) (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (1): BasicBlock( (conv1): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) (relu): ReLU(inplace=True) (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False) (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True) ) ) (avgpool): AdaptiveAvgPool2d(output_size=(1, 1)) (fc): Linear(in_features=512, out_features=2, bias=True) ) 2\uff1a\u8fdb\u884c\u5168\u5c40\u526a\u679d # \u7528\u5143\u7ec4\u6307\u5b9a\u9700\u8981\u526a\u679d\u7684\u5c42\u548c\u53c2\u6570\u7c7b\u578b parameters_to_prune = ( ( model . conv1 , 'weight' ), ( model . bn1 , 'weight' ), ( model . layer1 [ 0 ] . conv1 , 'weight' ), ( model . layer1 [ 0 ] . conv2 , 'weight' ), ( model . layer1 [ 0 ] . bn1 , 'weight' ), ( model . layer1 [ 0 ] . bn2 , 'weight' ), ( model . layer1 [ 1 ] . bn1 , 'weight' ), ( model . layer1 [ 1 ] . bn2 , 'weight' ), ( model . layer1 [ 1 ] . conv1 , 'weight' ), ( model . layer1 [ 1 ] . conv2 , 'weight' ), ( model . layer2 [ 0 ] . conv1 , 'weight' ), ( model . layer2 [ 0 ] . conv2 , 'weight' ), ( model . layer2 [ 0 ] . bn1 , 'weight' ), ( model . layer2 [ 0 ] . bn2 , 'weight' ), ( model . layer2 [ 1 ] . bn1 , 'weight' ), ( model . layer2 [ 1 ] . bn2 , 'weight' ), ( model . layer2 [ 1 ] . conv1 , 'weight' ), ( model . layer2 [ 1 ] . conv2 , 'weight' ), ( model . layer3 [ 0 ] . conv1 , 'weight' ), ( model . layer3 [ 0 ] . conv2 , 'weight' ), ( model . layer3 [ 0 ] . bn1 , 'weight' ), ( model . layer3 [ 0 ] . bn2 , 'weight' ), ( model . layer3 [ 1 ] . bn1 , 'weight' ), ( model . layer3 [ 1 ] . bn2 , 'weight' ), ( model . layer3 [ 1 ] . conv1 , 'weight' ), ( model . layer3 [ 1 ] . conv2 , 'weight' ), ( model . layer4 [ 0 ] . conv1 , 'weight' ), ( model . layer4 [ 0 ] . conv2 , 'weight' ), ( model . layer4 [ 1 ] . conv1 , 'weight' ), ( model . layer4 [ 1 ] . conv2 , 'weight' ), ) # \u8fdb\u884c\u5168\u5c40\u526a\u679d\uff0c\u53c2\u6570\u5206\u522b\u662f\u9700\u8981\u526a\u679d\u7684\u5c42\u548c\u53c2\u6570\u7c7b\u578b\uff0c\u526a\u679d\u65b9\u6cd5\uff0c\u526a\u679d\u6bd4\u4f8b # \u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u526a\u679d\u540e\u7684\u6a21\u578b\uff0c\u8fd9\u91cc\u76840.45\u662f\u6574\u4f53\u768445%\uff0c\u5404\u4e2a\u90e8\u5206\u526a\u679d\u572845%\u5de6\u53f3 # \u8fd9\u91cc\u4f7f\u7528\u4e86L1\u526a\u679d prune . global_unstructured ( parameters_to_prune , # pruning_method=prune.RandomUnstructured, pruning_method = prune . L1Unstructured , amount = 0.45 , ) # \u6c38\u4e45\u5316\u53c2\u6570 for module , name in parameters_to_prune : prune . remove ( module , name ) # \u67e5\u770b\u4efb\u610f\u5c42\u7684\u53c2\u6570\u60c5\u51b5\uff0c\u4ee5\u786e\u4fdd\u526a\u679d\u6210\u529f print ( model . layer4 [ 1 ] . conv2 . weight ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/pruned.py \u8f93\u51fa\u6548\u679c: # \u6839\u636e0\u7684\u60c5\u51b5\u5c31\u8bf4\u660e\u526a\u679d\u6210\u529f Parameter containing: tensor([[[[ 0.0000, 0.0000, -0.0000], [ 0.0000, 0.0000, -0.0000], [ 0.0000, 0.0000, 0.0000]], [[-0.0113, -0.0132, -0.0103], [-0.0000, -0.0000, -0.0000], [-0.0000, -0.0000, -0.0000]], [[-0.0119, -0.0121, -0.0102], [-0.0121, -0.0116, -0.0000], [-0.0125, -0.0000, -0.0000]], ..., [[[ 0.0000, 0.0000, 0.0000], [-0.0000, -0.0000, -0.0000], [-0.0000, -0.0000, -0.0000]], [[-0.0146, -0.0123, -0.0145], [-0.0000, -0.0000, -0.0111], [-0.0000, -0.0000, -0.0000]], [[ 0.0000, 0.0000, -0.0000], [-0.0000, 0.0000, -0.0000], [ 0.0000, 0.0000, 0.0000]], ..., [[-0.0164, -0.0169, -0.0190], [-0.0000, -0.0113, -0.0103], [-0.0123, -0.0159, -0.0142]], [[ 0.0000, -0.0000, 0.0000], [ 0.0000, -0.0000, -0.0000], [-0.0000, -0.0000, -0.0000]], [[-0.0144, -0.0135, -0.0114], [-0.0000, -0.0000, -0.0000], [ 0.0000, 0.0000, 0.0000]]]], requires_grad=True) 3\uff1a\u67e5\u770b\u5f53\u524d\u63a8\u65ad\u65f6\u95f4 # \u4e0e\u4e4b\u524d\u76f8\u540c\uff0c\u8ba1\u7b97\u5355\u6761\u7684\u63a8\u65ad\u65f6\u95f4 from PIL import Image import time # \u4ee5sample.jpg\u4e3a\u4f8b\uff0c\u5b83\u662f\u4e00\u5f20offline\uff08\u7ebf\u4e0b\u5f00\u73ed\uff09\u7684\u56fe\u7247 data_dir = \"./\" image = \"sample.jpg\" # \u4f7f\u7528GPU\u65f6\u4f7f\u7528 # model.to(device) def singe_predict ( data_dir , image ): # \u8bfb\u53d6\u56fe\u7247 im = Image . open ( os . path . join ( data_dir , image )) . convert ( 'RGB' ) # \u56fe\u7247\u9884\u5904\u7406 data_transforms = transforms . Compose ([ transforms . Resize (( 700 , 500 )), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) image_tensor = data_transforms ( im ) # \u62d3\u5c55\u7ef4\u5ea6\uff0c\u56e0\u4e3a\u4e4b\u524d\u8bad\u7ec3\u65f6\u6709batch_size\u8fd9\u4e2a\u7ef4\u5ea6 image_tensor = image_tensor . unsqueeze ( 0 ) # \u4f7f\u7528GPU\u65f6\u4f7f\u7528 # image_tensor = image_tensor.to(device) res = model ( image_tensor ) return torch . argmax ( res ) . item () start = time . time () res = singe_predict ( data_dir , image )) end = time . time () print ( \"Interval:\" , end - start ) print ( res ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/pruned.py \u8f93\u51fa\u6548\u679c: # \u63a8\u65ad\u65f6\u95f4\u964d\u81f3100ms\u4ee5\u5185 Interval: 0.09217426109313965 0 4\uff1a\u67e5\u770b\u5f53\u524d\u51c6\u786e\u7387 # \u5b9a\u4e49\u9a8c\u8bc1\u96c6\u8def\u5f84 off_data_dir = \"./val/offline/\" on_data_dir = \"./val/online/\" def calc_acc ( data_dir , label ): \"\"\"\u8ba1\u7b97\u6307\u5b9a\u8def\u5f84\u4e0b\u7edf\u4e00\u6807\u7b7e\u7684\u51c6\u786e\u7387\"\"\" # \u9884\u6d4b\u6b63\u786e\u7684\u8ba1\u6570 score = 0 # \u8be5\u8def\u5f84\u4e0b\u7684\u56fe\u7247\u540d data = os . listdir ( data_dir ) for image in data : res = singe_predict ( data_dir , image ) if str ( res ) == label : score += 1 return score / len ( data ) # offline\u6570\u636e\u7684\u9884\u6d4b\u51c6\u786e\u7387 off_acc = calc_acc ( off_data_dir , \"0\" ) # online\u6570\u636e\u7684\u9884\u6d4b\u51c6\u786e\u7387 on_acc = calc_acc ( on_data_dir , \"1\" ) # \u5e73\u5747\u51c6\u786e\u7387 acc = ( off_acc + on_acc ) / 2 print ( \"ACC:\" , acc ) # \u4fdd\u5b58\u6a21\u578b\u53c2\u6570 PATH_ = \"./pruned_18_model_ft_params.pth\" torch . save ( model_ft . state_dict (), PATH_ ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain_CV/pruned.py \u8f93\u51fa\u6548\u679c: # \u6700\u7ec8\u51c6\u786e\u7387\u4ecd\u80fd\u4fdd\u6301\u572899%\u5de6\u53f3 ACC: 0.9943820224719101","title":"\u7b2c\u56db\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u63a8\u65ad\u901f\u5ea6-\u6a21\u578b\u526a\u679d"},{"location":"6/#_21","text":"\u5b66\u4e60\u4e86\u6574\u4f53\u89e3\u51b3\u65b9\u6848\u7684\u5b9e\u65bd\u6b65\u9aa4 \u7b2c\u4e00\u6b65: \u83b7\u53d6\u6307\u5b9a\u6570\u636e\u5e76\u8fdb\u884c\u6570\u636e\u5206\u6790 \u7b2c\u4e8c\u6b65: \u8fdb\u884c\u6a21\u578b\u8bad\u7ec3\u548c\u9a8c\u8bc1\u8fc7\u7a0b\u7684\u5b9e\u73b0 \u7b2c\u4e09\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u8bad\u7ec3\u901f\u5ea6 \u7b2c\u56db\u6b65: \u63d0\u5347\u6a21\u578b\u7684\u63a8\u65ad\u901f\u5ea6-\u6a21\u578b\u526a\u679d 1\uff1a\u52a0\u8f7d\u672a\u526a\u679d\u6a21\u578b 2\uff1a\u8fdb\u884c\u5168\u5c40\u526a\u679d 3\uff1a\u67e5\u770b\u5f53\u524d\u63a8\u65ad\u65f6\u95f4 4\uff1a\u67e5\u770b\u5f53\u524d\u51c6\u786e\u7387","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"6/#65","text":"","title":"6.5 \u6a21\u578b\u670d\u52a1\u7684\u90e8\u7f72"},{"location":"6/#_22","text":"\u4e86\u89e3\u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u4ee5\u53ca\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0\u3002 \u4e86\u89e3Flask\u6846\u67b6\u53ca\u5176\u76f8\u5173\u7684\u670d\u52a1\u7ec4\u4ef6\u3002 \u638c\u63e1\u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u3002 \u6574\u4f53\u670d\u52a1\u90e8\u7f72\u4e0e\u8054\u8c03\u6d4b\u8bd5\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"6/#_23","text":"\u56e0\u4e3a\u8bad\u7ec3AI\u6a21\u578b\u5f80\u5f80\u662f\u8f83\u5927\u7684\u6587\u4ef6\uff0c\u5728\u6bcf\u6b21IO\u65f6\u5f80\u5f80\u6bd4\u8f83\u8017\u65f6\uff0c\u56e0\u6b64\u4f1a\u9009\u62e9\u5728\u670d\u52a1\u5f00\u542f\u65f6\u8bfb\u5165\u5185\u5b58\uff0c\u907f\u514dIO\u64cd\u4f5c\u3002\u800c\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u610f\u5473\u7740\u5f53\u6211\u4eec\u66f4\u65b0\u6a21\u578b\u65f6\u9700\u8981\u6682\u505c\u670d\u52a1\uff0c \u8fd9\u5bf9\u4e8e\u5728\u7ebf\u4efb\u52a1\u662f\u975e\u5e38\u4e0d\u53ef\u53d6\u7684\u884c\u4e3a\uff1b\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65e2\u80fd\u907f\u514dIO\u53c8\u80fd\u4f7f\u7528\u6237\u65e0\u611f\u77e5\u7684\u65b9\u5f0f\uff0c\u8fd9\u79cd\u7684\u8981\u6c42\u5c31\u662f\u6a21\u578b\u70ed\u66f4\u65b0\u8981\u6c42\u3002","title":"\u4ec0\u4e48\u662f\u6a21\u578b\u70ed\u66f4\u65b0"},{"location":"6/#_24","text":"\u6700\u5e38\u89c1\u7684\u6ee1\u8db3\u70ed\u66f4\u65b0\u8981\u6c42\u7684\u65b9\u6cd5\u5c31\u662f\u4e00\u540c\u5f00\u542f\u4e24\u4e2a\u6a21\u578b\u670d\u52a1\uff0c\u4e00\u4e2a\u4f5c\u4e3a\u6b63\u5f0f\u4f7f\u7528\uff0c\u4e00\u4e2a\u4f5c\u4e3abackup(\u5907\u7528)\uff0c\u5f53\u6211\u4eec\u6709\u66f4\u65b0\u9700\u6c42\u65f6\uff0c\u5c06\u6b63\u5f0f\u670d\u52a1\u6682\u505c\u8fdb\u884c\u6a21\u578b\u66f4\u6362\uff0c\u800c\u6b64\u65f6\u5907\u7528\u670d\u52a1\u5c06\u7ee7\u7eed\u4e3a\u7528\u6237\u670d\u52a1\uff0c\u76f4\u5230\u6b63\u5f0f\u670d\u52a1\u91cd\u65b0\u4e0a\u7ebf\u3002\u5728\u6b63\u5f0f\u670d\u52a1\u8fd0\u8f6c\u6b63\u5e38\u540e\uff0c\u518d\u4e3a\u5907\u7528\u670d\u52a1\u66f4\u6362\u6a21\u578b\u3002","title":"\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0"},{"location":"6/#flask","text":"web\u6846\u67b6FLask\uff1a Flask\u6846\u67b6\u662f\u5f53\u4e0b\u6700\u53d7\u6b22\u8fce\u7684python\u8f7b\u91cf\u7ea7\u6846\u67b6, \u4e5f\u662fpytorch\u5b98\u7f51\u6307\u5b9a\u7684\u90e8\u7f72\u6846\u67b6. Flask\u7684\u57fa\u672c\u6a21\u5f0f\u4e3a\u5728\u7a0b\u5e8f\u91cc\u5c06\u4e00\u4e2a\u89c6\u56fe\u51fd\u6570\u5206\u914d\u7ed9\u4e00\u4e2aURL\uff0c\u6bcf\u5f53\u7528\u6237\u8bbf\u95ee\u8fd9\u4e2aURL\u65f6\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6267\u884c\u7ed9\u8be5URL\u5206\u914d\u597d\u7684\u89c6\u56fe\u51fd\u6570\uff0c\u83b7\u53d6\u51fd\u6570\u7684\u8fd4\u56de\u503c. \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Flask\u6846\u67b6\u662f\u4e3b\u903b\u8f91\u670d\u52a1\u548c\u53e5\u5b50\u76f8\u5173\u6a21\u578b\u670d\u52a1\u4f7f\u7528\u7684\u670d\u52a1\u6846\u67b6. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5Flask pip install Flask == 1 .1.1 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u5bfc\u5165Flask\u7c7b from flask import Flask # \u521b\u5efa\u4e00\u4e2a\u8be5\u7c7b\u7684\u5b9e\u4f8bapp, \u53c2\u6570\u4e3a__name__, \u8fd9\u4e2a\u53c2\u6570\u662f\u5fc5\u9700\u7684\uff0c # \u8fd9\u6837Flask\u624d\u80fd\u77e5\u9053\u5728\u54ea\u91cc\u53ef\u627e\u5230\u6a21\u677f\u548c\u9759\u6001\u6587\u4ef6\u7b49\u4e1c\u897f. app = Flask ( __name__ ) # \u4f7f\u7528route()\u88c5\u9970\u5668\u6765\u544a\u8bc9Flask\u89e6\u53d1\u51fd\u6570\u7684URL @app.route ( '/' ) def hello_world (): \"\"\"\u8bf7\u6c42\u6307\u5b9a\u7684url\u540e\uff0c\u6267\u884c\u7684\u4e3b\u8981\u903b\u8f91\u51fd\u6570\"\"\" # \u5728\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u663e\u793a\u4fe1\u606f:'Hello, World!' return 'Hello, World!' if __name__ == '__main__' : app . run ( host = \"0.0.0.0\" , port = 5005 ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Pm/resnet_server/app.py \u542f\u52a8\u670d\u52a1: python app.py \u67e5\u770b\u6548\u679c: \u901a\u8fc7\u6d4f\u89c8\u5668\u6253\u5f00\u5730\u5740http://0.0.0.0:5001\u53ef\u770b\u89c1\u6253\u5370\u4e86'Hello, World'. web\u7ec4\u4ef6Gunicorn: Gunicorn\u662f\u4e00\u4e2a\u88ab\u5e7f\u6cdb\u4f7f\u7528\u7684\u9ad8\u6027\u80fd\u7684Python WSGI UNIX HTTP\u670d\u52a1\u7ec4\u4ef6(WSGI: Web Server Gateway Interface)\uff0c\u79fb\u690d\u81eaRuby\u7684\u72ec\u89d2\u517d\uff08Unicorn \uff09\u9879\u76ee\uff0c\u5177\u6709\u4f7f\u7528\u975e\u5e38\u7b80\u5355\uff0c\u8f7b\u91cf\u7ea7\u7684\u8d44\u6e90\u6d88\u8017\uff0c\u4ee5\u53ca\u9ad8\u6027\u80fd\u7b49\u7279\u70b9\u3002 \u4f5c\u7528: \u5728\u9879\u76ee\u4e2d, Gunicorn\u548cFlask\u6846\u67b6\u4e00\u540c\u4f7f\u7528, \u5904\u7406\u8bf7\u6c42, \u56e0\u5176\u9ad8\u6027\u80fd\u7684\u7279\u70b9\u80fd\u591f\u6709\u6548\u51cf\u5c11\u670d\u52a1\u4e22\u5305\u7387. \u5b89\u88c5: # \u4f7f\u7528pip\u5b89\u88c5gunicorn pip install gunicorn == 20 .0.4 \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u6ce8\u610f\uff1akill\u6389\u4e4b\u524d\u76845001\u7aef\u53e3\u670d\u52a1\uff0c\u4e0d\u518d\u4f7f\u7528\u539f\u751f\u7684\u542f\u52a8\u65b9\u5f0f # \u800c\u662f\u4f7f\u7528gunicorn\u542f\u52a8Flask\u670d\u52a1: gunicorn -w 1 -b 0 .0.0.0:5005 app:app # -w \u4ee3\u8868\u5f00\u542f\u7684\u8fdb\u7a0b\u6570, \u6211\u4eec\u53ea\u5f00\u542f\u4e00\u4e2a\u8fdb\u7a0b # -b \u670d\u52a1\u7684IP\u5730\u5740\u548c\u7aef\u53e3 # app:app \u662f\u6307\u6267\u884c\u7684\u4e3b\u8981\u5bf9\u8c61\u4f4d\u7f6e, \u5728app.py\u4e2d\u7684app\u5bf9\u8c61","title":"Flask\u670d\u52a1\u7ec4\u4ef6"},{"location":"6/#flask_1","text":"\u6211\u4eec\u53ef\u4ee5\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b\u5206\u4e3a\u4e09\u6b65: \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0","title":"\u4f7f\u7528Flask\u6846\u67b6\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1"},{"location":"6/#apppy","text":"# Flask\u6846\u67b6\u56fa\u5b9a\u5de5\u5177 from flask import Flask from flask import request app = Flask ( __name__ ) import torch import torch.nn as nn import torchvision from torchvision import datasets , models , transforms from PIL import Image # \u6700\u65b0\u7684\u6a21\u578b\uff0c\u5927\u5bb6\u6839\u636e\u81ea\u5df1\u4e4b\u524d\u8bad\u7ec3\u7684\u6a21\u578b\u540d\u5b57\u8fdb\u884c\u4fee\u6539 model_name = \"18_model_ft_params.pth\" # \u6700\u65b0\u6a21\u578b\u7684\u5168\u8def\u5f84 model_path = \"/data/ItcastBrain/Pm/resnet_model/\" + model_name # \u52a0\u8f7d\u5df2\u8bad\u7ec3\u7684\u6a21\u578b\uff0c\u6ce8\u610f: \u8fd9\u6bb5\u52a0\u8f7d\u8bed\u53e5\u4e0d\u80fd\u5199\u5165\u4e0b\u65b9\u7684\u51fd\u6570\u4e2d\uff0c # \u5426\u5219\u5c06\u4f1a\u6bcf\u6b21\u8bf7\u6c42\u90fd\u4f1a\u91cd\u65b0\u52a0\u8f7d # \u6062\u590d\u6a21\u578b model = torchvision . models . resnet18 ( pretrained = True ) num_ftrs = model . fc . in_features model . fc = nn . Linear ( num_ftrs , 2 ) # \u52a0\u8f7d\u6743\u91cd model . load_state_dict ( torch . load ( model_path , map_location = torch . device ( 'cpu' ))) model . eval () # \u5b9a\u4e49\u670d\u52a1\u8bf7\u6c42\u8def\u5f84\u548c\u65b9\u5f0f, \u8fd9\u91cc\u4f7f\u7528POST\u8bf7\u6c42 @app.route ( '/v1/is_online/' , methods = [ \"POST\" ]) def recogniition (): # \u4f20\u5165\u7684\u53c2\u6570\u662fjson\u683c\u5f0f\u7684\u56fe\u7247\u8def\u5f84 image_path = request . get_json ()[ \"image_path\" ] # \u6839\u636e\u8def\u5f84\u6253\u5f00\u56fe\u7247 im = Image . open ( image_path ) . convert ( 'RGB' ) # \u548c\u4e4b\u524d\u9a8c\u8bc1\u6570\u636e\u96c6\u505a\u76f8\u540c\u7684\u5904\u7406 data_transforms = transforms . Compose ([ transforms . Resize (( 700 , 500 )), # transforms.CenterCrop(224), transforms . ToTensor (), transforms . Normalize ([ 0.485 , 0.456 , 0.406 ], [ 0.229 , 0.224 , 0.225 ]) ]) image_tensor = data_transforms ( im ) # \u62d3\u5c55\u4e00\u4e2a\u7ef4\u5ea6\uff08\u56e0\u4e3a\u4e4b\u524d\u6709batch_size\u8fd9\u4e2a\u7ef4\u5ea6\uff09 image_tensor = image_tensor . unsqueeze ( 0 ) # \u6a21\u578b\u9884\u6d4b res = model ( image_tensor ) # \u5f97\u5230\u6700\u5927\u503c\u5bf9\u5e94\u7684\u7d22\u5f15 return str ( torch . argmax ( res ) . item ()) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Pm/resnet_server/app.py","title":"\u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6\uff0c\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b:"},{"location":"6/#gunicorn","text":"# \u53ef\u4ee5\u6dfb\u52a0--chdir\u53c2\u6570\u6765\u6307\u660eapp\u8def\u5f84 gunicorn -w 1 -b 0 .0.0.0:5005 --chdir /data/ItcastBrain/Pm/resnet_server/ app:app \u8f93\u51fa\u6548\u679c: [2020-06-04 17:04:11 +0800] [28276] [INFO] Starting gunicorn 20.0.4 [2020-06-04 17:04:11 +0800] [28276] [INFO] Listening at: http://0.0.0.0:5005 (29276) [2020-06-04 17:04:11 +0800] [28276] [INFO] Using worker: sync [2020-06-04 17:04:11 +0800] [28279] [INFO] Booting worker with pid: 29279","title":"\u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u6765\u542f\u52a8\u670d\u52a1"},{"location":"6/#testpy","text":"import requests import requests url = \"http://0.0.0.0:5005/v1/is_online/\" # \u4f60\u53ef\u4ee5\u81ea\u5df1\u5728\u8be5\u76ee\u5f55\u4e0b\u653e\u7f6e\u4efb\u610f\u56fe\u7247 image_path = \"/data/ItcastBrain/Pm/image/sample.jpg\" # \u4f20\u8f93\u7684\u6570\u636e\u4f53 data = { 'image_path' : image_path } res = requests . post ( url , json = data , timeout = 200 ) print ( res . text ) \u4ee3\u7801\u4f4d\u7f6e: data/ItcastBrain/Pm/resnet_server/test.py \u8f93\u51fa\u6548\u679c: # \u8f93\u51fa0\u6216\u80051\uff0c\u4ee3\u8868online\u6216\u8005offline 0/1","title":"\u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5"},{"location":"6/#nginx","text":"\u5230\u8fd9\u91cc\u8bf4\u660e\u6211\u4eec\u6a21\u578b\u670d\u52a1\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u4e4b\u540e\u6211\u4eec\u5c06\u542f\u52a8\u4e24\u4e2a\u540c\u6837\u7684\u670d\u52a1\uff0c\u5206\u522b\u4f7f\u75285001\u548c5002\u7aef\u53e3, \u5e76\u5c06\u4e24\u4e2a\u670d\u52a1\u4f7f\u7528Nginx\u4ee3\u7406\u5b9c\u6ee1\u8db3\u70ed\u66f4\u65b0\u3002\u4e0b\u9762\u5bf9nginx\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u4ecb\u7ecd\uff0c\u5e76\u5bf9\u5176\u4e2d\u7684\u914d\u7f6e\u8fdb\u884c\u8bf4\u660e\u3002 Nginx: Nginx\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u7684HTTP\u548c\u53cd\u5411\u4ee3\u7406web\u670d\u52a1\u5668\uff0c\u4e5f\u662f\u5de5\u4e1a\u754cweb\u670d\u52a1\u6700\u5e38\u4f7f\u7528\u7684\u5916\u5c42\u4ee3\u7406\u3002 Nginx\u70ed\u66f4\u65b0\u90e8\u5206\u914d\u7f6e\u8bf4\u660e: \u8fd9\u4e9b\u914d\u7f6e\u5df2\u7ecf\u4e3a\u5927\u5bb6\u5199\u597d\uff0c\u53ef\u4ee5\u5728/data/ItcastBrain/conf/nginx/nginx.conf\u4e2d\u8fdb\u884c\u67e5\u770b\u3002 ... # \u4ee5\u4e0b\u662f\u4e0e\u70ed\u66f4\u65b0\u6709\u5173\u7684\u914d\u7f6e # \u8fd9\u91cc\u4ee3\u7406\u4e24\u4e2a\u7aef\u53e3\u7684\u670d\u52a1 # \u5176\u4e2d5005\u4e3abackup\uff0c\u5373\u5f535006\u670d\u52a1\u505c\u6b62\u65f6\u88ab\u542f\u7528 # \u8fd9\u91cc\u7684prod\u8981\u4e0e\u4e0b\u9762proxy_pass\u4e2dhttp://\u540e\u7684\u540d\u79f0\u76f8\u540c upstream prod { server 0.0.0.0:5005; server 0.0.0.0:5006 backup; } # nginx\u7684\u5916\u5c42\u670d\u52a1\u4f7f\u75288086\u7aef\u53e3 server { listen 8086; server_name 0.0.0.0; location /static/ { alias /data/ItcastBrain/static/; } # \u8fd9\u91cc\u6ce8\u610fprod\u8981\u4e0e\u4e0a\u9762upstream\u540e\u7684\u540d\u79f0\u76f8\u540c location / { proxy_pass http://prod; include /data/ItcastBrain/conf/nginx/uwsgi_params; proxy_set_header X-Real-IP $remote_addr; } } ... Nginx\u7684\u542f\u52a8\u4e0e\u5173\u95ed: # \u5b9e\u9645\u4e2d\u6211\u4eec\u5e76\u4e0d\u4f1a\u76f4\u63a5\u542f\u52a8Nginx\uff0c\u800c\u662f\u5728\u6574\u4f53\u670d\u52a1\u90e8\u7f72\u65f6\u4f7f\u7528supervisor\u8fdb\u884c\u542f\u52a8\u548c\u5173\u95ed # \u56e0\u6b64\u8fd9\u91cc\u5927\u5bb6\u4e86\u89e3\u4ee5\u4e0b\u542f\u52a8\u547d\u4ee4\u5373\u53ef # -c\u662f\u6307\u5411\u914d\u7f6e\u6587\u4ef6 nginx -c /data/ItcastBrain/conf/nginx/nginx.conf # \u5173\u95ednginx nginx -s stop","title":"\u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0"},{"location":"6/#_25","text":"\u4e3a\u4e86\u5b8c\u6210\u6574\u4f53\u670d\u52a1\u90e8\u7f72\uff0c\u6211\u4eec\u9700\u8981\u8ba9AI\u7cfb\u7edf\u4e0e\u54a8\u8be2\u5e08\u540e\u7aef\u7cfb\u7edf\u8fdb\u884c\u5bf9\u63a5\u3002\u4ee5\u5f80AI\u4e2d\u7684\u51fd\u6570\u90fd\u662f\u5728\u5904\u7406\u4e00\u4e9b\u81ea\u5b9a\u4e49\u683c\u5f0f\u7684\u6570\u636e\uff0c\u4f46\u662f\u73b0\u5728\u6211\u4eec\u9700\u8981\u548c\u540e\u7aef\u5de5\u7a0b\u5e08\u4e00\u540c\u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\u7684\u6570\u636e\u683c\u5f0f\uff0c\u4ee5\u65b9\u4fbf\u4ed6\u4eec\u6765\u8bf7\u6c42\u6211\u4eec\u7684\u63a5\u53e3\u548c\u4f7f\u7528\u6570\u636e\u3002\u4f5c\u4e3aREST API\uff0c\u8f93\u5165\u8f93\u51fa\u7684\u57fa\u672c\u683c\u5f0f\u90fd\u5e94\u662fJSON\u3002\u4f46\u73b0\u5728\uff0c\u540e\u7aef\u5de5\u7a0b\u5e08\u9700\u8981\u4f20\u8f93\u7684\u4fe1\u606f\u662f\u56fe\u7247\uff0c\u56fe\u7247\u5982\u4f55\u8868\u793a\u6210json\u5462\uff0c\u8fd9\u91cc\u9700\u8981\u7f16\u7801\u6210base64\u3002 \u8f93\u5165\u7684JSON\u683c\u5f0f\uff1a \u6211\u4eec\u5728\u540e\u9762\u4f1a\u8bb2\u89e3\u5982\u4f55\u5c06\u672c\u5730\u56fe\u7247\u8f6c\u7801\u6210base64_data { \"image_id\" : \"12345\" , \"image_base64\" : str(base 64 _data) } \u6570\u636e\u8bf4\u660e: \u5fc5\u987b\u4e3ajson\u683c\u5f0f image_id: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6 str(image_base64): \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u88abbase64\u7f16\u7801\u540e\u8fd8\u8981\u8f6c\u6210str \u5173\u4e8e\u8f93\u51fa\u5219\u7b80\u5355\u8bb8\u591a\uff0c\u8f93\u51fa\u7684JSON\u683c\u5f0f\u5982\u4e0b: { \"image_id\" : \"12345\" , \"result\" : \"offline\" } \u6570\u636e\u8bf4\u660e: \u5fc5\u987b\u4e3ajson\u683c\u5f0f image_id: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6 result: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u53ea\u53ef\u80fd\u4e3aoffline\u6216\u8005online\uff0c\u4ee3\u8868\u7ebf\u4e0b\u6216\u8005\u7ebf\u4e0a\u5f00\u73ed \u8fd9\u6837\u6211\u4eec\u5c31\u660e\u786e\u4e86AI\u6574\u4f53\u670d\u52a1\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5f00\u59cb\u642d\u5efa\u8fd9\u4e2a\u670d\u52a1\uff0c\u6574\u4e2a\u670d\u52a1\u6846\u67b6\u57fa\u4e8eDjango\uff0c\u8fc7\u7a0b\u53ef\u5206\u4e3a\u4e00\u4e0b\u51e0\u4e2a\u6b65\u9aa4: \u7b2c\u4e00\u6b65: \u62f7\u8d1d\u670d\u52a1\u6846\u67b6\u7684\u57fa\u672c\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u7f16\u5199\u4e24\u4e2a\u6838\u5fc3\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u5185\u5bb9 \u7b2c\u4e09\u6b65: \u5b89\u88c5supervisor\u76d1\u63a7\u5b88\u62a4\u5de5\u5177\u5e76\u542f\u52a8\u670d\u52a1 \u7b2c\u56db\u6b65: \u8fdb\u884c\u8054\u8c03\u6d4b\u8bd5 \u7b2c\u4e00\u6b65: \u62f7\u8d1d\u670d\u52a1\u6846\u67b6\u7684\u57fa\u672c\u6587\u4ef6 \u6211\u4eec\u5df2\u7ecf\u4e3a\u5927\u5bb6\u51c6\u5907\u597d\u4e86Django\u670d\u52a1\u7684\u57fa\u672c\u6587\u4ef6 \u6ce8\u610f\uff1a\u9700\u8981\u5728/data/\u76ee\u5f55\u4e0b\u5b89\u88c5Anaconda3 \u6587\u4ef6\u67e5\u770b\u6548\u679c, \u5b83\u4eec\u5e94\u8be5\u5728/data/ItcastBrain/\u8def\u5f84\u4e0b: drwxr-xr-x 4 root root 4096 5\u6708 11 17:21 api drwxr-xr-x 3 root root 4096 5\u6708 28 16:00 conf -rw-r--r-- 1 root root 180224 5\u6708 9 15:30 db.sqlite3 drwxr-xr-x 5 root root 4096 6\u6708 5 13:37 Pm -rw-r--r-- 1 root root 0 1\u6708 26 2019 __init__.py drwxr-xr-x 2 root root 4096 5\u6708 28 16:42 log -rwxr-xr-x 1 root root 1501 1\u6708 26 2019 manage.py -rw-r--r-- 1 root root 1643 1\u6708 26 2019 README.md -rw-r--r-- 1 root root 237 6\u6708 1 16:13 requirements.txt drwxr-xr-x 3 root root 4096 5\u6708 9 15:46 server drwxr-xr-x 12 root root 4096 2\u6708 6 18:43 static -rw-r--r-- 1 root root 10177 5\u6708 28 16:07 supervisord.conf drwxr-xr-x 2 root root 4096 5\u6708 9 15:33 supervisord.conf.d -rw-r--r-- 1 root root 6038 6\u6708 1 17:35 test.py \u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177: # \u786e\u4fdd\u4f60\u7684pip\u662fpython3\u4e0b\u7684pip # \u5728/data/ItcastBrain/\u8def\u5f84\u4e0b\u6267\u884c: pip install -r requirements.txt \u7b2c\u4e8c\u6b65: \u7f16\u5199\u4e24\u4e2a\u6838\u5fc3\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9 \u5148\u6765\u4e86\u89e3\u4e00\u4e0bDjango\u670d\u52a1\u4e2d\u7684\u4e24\u4e2a\u6587\u4ef6: urls.py, \u4f4d\u4e8e/data/ItcastBrain/api/\u76ee\u5f55\u4e0b, \u7528\u4e8e\u5c06\u524d\u7aef\u7684\u8bf7\u6c42url\u8f6c\u53d1\u5230views\u51fd\u6570\u4e2d\u3002 views.py, \u4f4d\u4e8e/data/ItcastBrain/Pm/\u76ee\u5f55\u4e0b, \u7528\u4e8e\u63a5\u6536\u6765\u81ea\u524d\u7aef\u8bf7\u6c42\u7684\u6570\u636e, \u5e76\u8bf7\u6c42\u6a21\u578b\u5fae\u670d\u52a1\u83b7\u5f97\u7ed3\u679c, \u5c01\u88c5\u6210\u54cd\u5e94\u4f53\u8fd4\u56de\u3002 \u7f16\u5199url.py: from django.conf.urls import url from django.contrib import admin # \u5f15\u5165Yxb\u4e2d\u7684views.py from Yxb import views as y_views urlpatterns = [ url ( r '^admin/' , admin . site . urls ), url ( r '^api/v1/get_pm[/]?$' , p_views . get_pm ), ] \u7f16\u5199views.py # coding: utf8 # Copyright 2017 Stephen. All Rights Reserved. # # Licensed under the Apache License, Version 2.0 (the \"License\"); # you may not use this file except in compliance with the License. # You may obtain a copy of the License at # # http://www.apache.org/licenses/LICENSE-2.0 # # Unless required by applicable law or agreed to in writing, software # distributed under the License is distributed on an \"AS IS\" BASIS, # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. # See the License for the specific language governing permissions and # limitations under the License. # ============================================================================ from django.http import ( HttpResponse , StreamingHttpResponse , FileResponse , ) from rest_framework import viewsets from rest_framework.response import Response from rest_framework.decorators import api_view from rest_framework.authentication import ( SessionAuthentication , BasicAuthentication , ) from rest_framework.permissions import IsAuthenticated from rest_framework.decorators import authentication_classes from rest_framework.decorators import permission_classes import json from Pm.config import * import base64 import requests @api_view ([ \"POST\" ]) def get_pm ( request ): \"\"\"\u4e3b\u8981\u5904\u7406\u903b\u8f91 Args: request: \u8bf7\u6c42\u4f53, {\"image_id\": \"12345\", \"image_base64\": str(base64_data)} Return: {\"image_id\":\"12345\",\"result\":\"offline\"} \"\"\" # \u83b7\u5f97\u8bf7\u6c42\u6570\u636e content = json . loads ( request . body . decode ()) img_id = content [ \"image_id\" ] # \u83b7\u5f97base64\u7f16\u7801\uff0c\u56e0\u4e3a\u4e4b\u524d\u52a0\u4e86str\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f7f\u7528eval img_base64 = eval ( content [ \"image_base64\" ]) # \u521b\u5efa\u4e00\u4e2a\u8def\u5f84\uff0c\u7528\u4e8e\u5b58\u50a8\u6bcf\u6b21\u7528\u6237\u8bf7\u6c42\u7684\u6570\u636e img_path = \"/data/ItcastBrain/Pm/image/{}.png\" . format ( img_id ) # \u89e3\u7801base64\uff0c\u5b58\u50a8\u8be5\u56fe\u7247 file = open ( img_path , 'wb' ) file . write ( base64 . b64decode ( img_base64 )) file . close () # \u8bf7\u6c42\u6a21\u578b\u670d\u52a1 url = \"http://0.0.0.0:5005/v1/is_online/\" data = { 'image_path' : img_path } res = requests . post ( url , json = data , timeout = 200 ) result = { \"0\" : \"offline\" , \"1\" : \"online\" } return Response ({ \"image_id\" : img_id , \"result\" : result [ str ( res . text )]}) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Pm/views.py \u7b2c\u4e09\u6b65: \u5b89\u88c5supervisor\u76d1\u63a7\u5b88\u62a4\u5de5\u5177\u5e76\u542f\u52a8\u670d\u52a1 Supervisor\u670d\u52a1\u76d1\u63a7: * Supervisor\u662f\u7528Python\u5f00\u53d1\u7684\u4e00\u4e2aclient/server\u670d\u52a1\uff0c\u662fLinux/Unix\u7cfb\u7edf\u4e0b\u7684\u4e00\u4e2a\u8fdb\u7a0b\u7ba1\u7406\u5de5\u5177\u3002\u5b83\u53ef \u4ee5\u5f88\u65b9\u4fbf\u7684\u76d1\u542c\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u91cd\u542f\u4e00\u4e2a\u6216\u591a\u4e2a\u8fdb\u7a0b, \u5e76\u5b88\u62a4\u8fd9\u4e9b\u8fdb\u7a0b\u3002 * \u5728\u9879\u76ee\u4e2d, Supervisor\u7528\u4e8e\u76d1\u63a7\u548c\u5b88\u62a4AI\u6574\u4f53\u670d\u52a1\u670d\u52a1\u548c\u6a21\u578b\u670d\u52a1. \u5b89\u88c5\u5e76\u542f\u52a8supervisor: # \u4f7f\u7528yum\u5b89\u88c5supervisor yum install supervisor -y \u57fa\u672c\u4f7f\u7528\u65b9\u6cd5: # \u7f16\u8f91\u914d\u7f6e\u6587\u4ef6, \u6307\u660e\u76d1\u63a7\u548c\u5b88\u62a4\u7684\u8fdb\u7a0b\u5f00\u542f\u547d\u4ee4, # \u8bf7\u67e5\u770b/data/ItcastBrain/supervisord.conf\u6587\u4ef6 # \u5f00\u542fsupervisor, -c\u7528\u4e8e\u6307\u5b9a\u914d\u7f6e\u6587\u4ef6 sueprvisord -c /data/ItcastBrain/supervisord.conf # \u67e5\u770b\u76d1\u63a7\u7684\u8fdb\u7a0b\u72b6\u6001: supervisorctl status resnet_server1 RUNNING pid 23836, uptime 8 days, 1:02:59 resnet_server2 RUNNING pid 23893, uptime 8 days, 1:02:57 main_server RUNNING pid 8018, uptime 0:07:54 nginx RUNNING pid 23911, uptime 8 days, 1:02:57 # \u5173\u95edsupervisor supervisorctl shutdown \u5173\u4e8esupervisor.conf\u7684\u7b80\u5355\u5206\u6790: ... ... ; \u4e3b\u670d\u52a1\u914d\u7f6e\u547d\u4ee4\uff0c\u4f7f\u7528/data/anaconda3/bin/\u4e0b\u7684uwsgi\u547d\u4ee4\uff0c ; \u6307\u5411/data/ItcastBrain/conf/uwsgi.ini\u914d\u7f6e ; \u8fd9\u4e9b\u914d\u7f6e\u6587\u4ef6\u5df2\u7ecf\u4e3a\u540c\u5b66\u4eec\u51c6\u5907\u5c31\u7eea [ program : main_server ] command =/ data / anaconda3 / bin / uwsgi -- ini / data / ItcastBrain / conf / uwsgi . ini -- close - on - exec ; the program (relative uses PATH, can take args) ;process_name=%(program_name)s ; process_name expr (default %(program_name)s) ;numprocs=1 ; number of processes copies to start (def 1) ;directory=/tmp ; directory to cwd to before exec (def no cwd) ;umask=022 ; umask for process (default None) ;priority=999 ; the relative start priority (default 999) ;autostart=true ; start at supervisord start (default: true) ;startsecs=1 ; # of secs prog must stay up to be running (def. 1) ;startretries=3 ; max # of serial start failures when starting (default 3) ;autorestart=unexpected ; when to restart if exited after running (def: unexpected) ;exitcodes=0,2 ; 'expected' exit codes used with autorestart (default 0,2) stopsignal = QUIT ; signal used to kill process (default TERM) ;stopwaitsecs=10 ; max num secs to wait b4 SIGKILL (default 10) stopasgroup = false ; send stop signal to the UNIX process group (default false) killasgroup = false ; SIGKILL the UNIX process group (def false) ;user=chrism ; setuid to this UNIX account to run the program ;redirect_stderr=true ; redirect proc stderr to stdout (default false) stdout_logfile =/ data / ItcastBrain / log / main_server_out . log ; stdout log path, NONE for none; default AUTO stdout_logfile_maxbytes = 1 MB ; max # logfile bytes b4 rotation (default 50MB) ;stdout_logfile_backups=10 ; # of stdout logfile backups (0 means none, default 10) ;stdout_capture_maxbytes=1MB ; number of bytes in 'capturemode' (default 0) ;stdout_events_enabled=false ; emit events on stdout writes (default false) stderr_logfile =/ data / ItcastBrain / log / main_server_err . log ; stderr log path, NONE for none; default AUTO stderr_logfile_maxbytes = 1 MB ; max # logfile bytes b4 rotation (default 50MB) ;stderr_logfile_backups=10 ; # of stderr logfile backups (0 means none, default 10) ;stderr_capture_maxbytes=1MB ; number of bytes in 'capturemode' (default 0) ;stderr_events_enabled=false ; emit events on stderr writes (default false) ;environment=A=\"1\",B=\"2\" ; process environment additions (def no adds) ;serverurl=AUTO ; override serverurl computation (childutils) ; \u76d1\u63a7\u4ee3\u7406\u6a21\u578b\u670d\u52a1\u7684nginx\uff0c\u914d\u7f6e\u6587\u4ef6\u6307\u5411/data/ItcastBrain/conf/nginx/nginx.conf [ program : nginx ] command =/ usr / sbin / nginx - c / data / ItcastBrain / conf / nginx / nginx . conf - g \" daemon off; \" ; \u4e0b\u9762\u662f\u65e5\u5fd7\u5199\u5165\u4f4d\u7f6e\u548c\u6700\u5927\u9650\u5236 stdout_logfile =/ data / ItcastBrain / log / nginx_out . log stderr_logfile =/ data / ItcastBrain / log / nginx_err . log stdout_logfile_maxbytes = 1 MB stderr_logfile_maxbytes = 1 MB ; \u6a21\u578b\u670d\u52a1 [ program : resnet_server1 ] command = gunicorn - w 4 - b 0 . 0 . 0 . 0 : 5005 -- chdir / data / ItcastBrain / Yxb / resnet_server / app : app stdout_logfile =/ data / ItcastBrain / log / res1_out . log stderr_logfile =/ data / ItcastBrain / log / res1_err . log stdout_logfile_maxbytes = 1 MB stderr_logfile_maxbytes = 1 MB ; \u5907\u7528\u6a21\u578b\u670d\u52a1 [ program : resnet_server2 ] command = gunicorn - w 4 - b 0 . 0 . 0 . 0 : 5006 -- chdir / data / ItcastBrain / Pm / resnet_server / app : app stdout_logfile =/ data / ItcastBrain / log / res2_out . log stderr_logfile =/ data / ItcastBrain / log / res2_err . log stdout_logfile_maxbytes = 1 MB \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u6700\u540e\u4e00\u6b65\uff0c\u5411Django\u6307\u660e\u65b0\u589e\u7684\u5e94\u7528Yxb\uff0c\u5373\u4fee\u6539/data/ItcastBrain/server/settings.py\u6587\u4ef6\uff1a 52 INSTALLED_APPS = [ 53 'django.contrib.admin', 54 'django.contrib.auth', 55 'django.contrib.contenttypes', 56 'django.contrib.sessions', 57 'django.contrib.messages', 58 'django.contrib.staticfiles', 59 'api', 60 'django_celery_beat', 61 'rest_framework', 62 'corsheaders', # pip install django-cors-headers 63 'Info', # \u4e0a\u4e00\u4e2a\u4fe1\u606f\u4e2d\u5fc3\u7684\u5e94\u7528Info\uff0c\u9ed8\u8ba4\u7ed9\u5927\u5bb6\u6dfb\u52a0 64 'Pm', # \u672c\u6b21\u9700\u8981\u6dfb\u52a0\u7684\u5e94\u7528\uff0c\u4e5f\u5c31\u662fPm\u6587\u4ef6\u5939\u540d\u79f0 65 ] ... \u5168\u90e8\u51c6\u5907\u5c31\u7eea\uff0c\u6211\u4eec\u9700\u8981\u4f7f\u7528supervisor\u91cd\u542f\u670d\u52a1\uff08\u6bcf\u6b21\u4fee\u6539\u4ee3\u7801\u90fd\u9700\u8981\u91cd\u65b0\u542f\u52a8\u670d\u52a1\uff09 # \u5728/data/ItcastBrain/\u76ee\u5f55\u4e0b\u8fd0\u884c supervisord -c supervisord.conf # \u5982\u679c\u4f60\u9700\u8981\u67e5\u770b\u62a5\u9519\u65e5\u5fd7\uff0c\u53ef\u4ee5\u901a\u8fc7/data/ItcastBrain/log\u4e2d\u7684main_server_err.log\u67e5\u770b \u5047\u8bbe\u5df2\u7ecf\u6b63\u5e38\u542f\u52a8\u670d\u52a1\uff0c\u4e0b\u9762\u6211\u4eec\u5c06\u7f16\u5199\u4e00\u4e2a\u6d4b\u8bd5\u811a\u672c\u8fdb\u884c\u6d4b\u8bd5. \u6d4b\u8bd5\u811a\u672c: import requests import base64 # \u5728\u8be5\u8def\u5f84\u4e0b\u51c6\u5907\u4e00\u5f20\u5e26\u8bc6\u522b\u7684\u56fe\u7247 image_path = \"/data/ItcastBrain/Pm/image/sample.jpg\" with open ( image_path , \"rb\" ) as f : # b64encode\uff1a\u7f16\u7801\uff0cb64decode: \u89e3\u7801 base64_data = base64 . b64encode ( f . read ()) data = { \"image_id\" : \"12345\" , \"image_base64\" : str ( base64_data ) } url = \"http://0.0.0.0:8087/api/v1/get_pm/\" res = requests . post ( url , json = data ) print ( res . text ) \u4ee3\u7801\u4f4d\u7f6e: /data/ItcastBrain/Pm/test.py \u8f93\u51fa\u6548\u679c: { \"image_id\" : \"12345\" , \"result\" : \"offline\" } \u5f53\u7136\uff0c\u5bf9\u4e8e\u4f7f\u7528\u65b9\u6765\u8bb2\uff0c\u4ed6\u4eec\u5728\u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u4f1a\u4f7f\u7528\u66f4\u5927\u91cf\u7684\u6570\u636e\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u6240\u6709\u4ee3\u7801\u80fd\u591f\u8fd0\u884c\u6210\u529f\u3002\u6700\u540e\u6211\u4eec\u5c06\u7ed9\u5bf9\u65b9\u4e00\u4e2aAPI\u6587\u6863\u4f5c\u4e3a\u6700\u7ec8\u4ea4\u4ed8\u7269\uff0c\u5185\u5bb9\u8be6\u89c1 \u9644\u4ef6 \u300a\u6570\u636e\u5206\u6790\u56fe\u7247\u89e3\u6790API\u8bf4\u660e\u300b","title":"\u6574\u4f53\u670d\u52a1\u90e8\u7f72\u4e0e\u8054\u8c03\u6d4b\u8bd5"},{"location":"6/#_26","text":"\u5b66\u4e60\u4e86\u4ec0\u4e48\u662f\u70ed\u66f4\u65b0\u4e0e\u5982\u4f55\u505a\u5230\u70ed\u66f4\u65b0 \u5b66\u4e60\u4e86Flask\u670d\u52a1\u7ec4\u4ef6\u7684\u4f7f\u7528 \u5b66\u4e60\u4e86\u5c06\u6a21\u578b\u5c01\u88c5\u6210\u670d\u52a1\u7684\u6d41\u7a0b \u7b2c\u4e00\u6b65: \u7f16\u5199app.py\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u4f7f\u7528gunicorn\u542f\u52a8\u670d\u52a1 \u7b2c\u4e09\u6b65: \u7f16\u5199test.py\u8fdb\u884c\u63a5\u53e3\u6d4b\u8bd5 \u7b2c\u56db\u6b65: \u4f7f\u7528Nginx\u4ee3\u7406\u4e24\u4e2a\u670d\u52a1\u6ee1\u8db3\u70ed\u66f4\u65b0 \u5b66\u4e60\u4e86\u6574\u4f53\u670d\u52a1\u90e8\u7f72\u4e0e\u8054\u8c03\u6d4b\u8bd5 \u7b2c\u4e00\u6b65: \u62f7\u8d1d\u670d\u52a1\u6846\u67b6\u7684\u57fa\u672c\u6587\u4ef6 \u7b2c\u4e8c\u6b65: \u7f16\u5199\u4e24\u4e2a\u4e2a\u6838\u5fc3\u6587\u4ef6\u4e2d\u7684\u4ee3\u7801\u5185\u5bb9 \u7b2c\u4e09\u6b65: \u5b89\u88c5supervisor\u76d1\u63a7\u5b88\u62a4\u5de5\u5177\u5e76\u542f\u52a8\u670d\u52a1 \u7b2c\u56db\u6b65: \u8fdb\u884c\u8054\u8c03\u6d4b\u8bd5","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"7/","text":"7.1 \u6a21\u578b\u91cf\u5316\u6280\u672f \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u6a21\u578b\u538b\u7f29\u6280\u672f\u4e2d\u7684\u52a8\u6001\u91cf\u5316\u4e0e\u9759\u6001\u91cf\u5316\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u638c\u63e1\u4f7f\u7528huggingface\u4e2d\u7684\u9884\u8bad\u7ec3BERT\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\u3002 \u638c\u63e1\u4f7f\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f\u5bf9\u8bad\u7ec3\u540e\u7684bert\u6a21\u578b\u8fdb\u884c\u538b\u7f29\u3002 \u76f8\u5173\u77e5\u8bc6 \u6a21\u578b\u538b\u7f29: \u6a21\u578b\u538b\u7f29\u662f\u4e00\u79cd\u9488\u5bf9\u5927\u578b\u6a21\u578b(\u53c2\u6570\u91cf\u5de8\u5927)\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4f18\u5316\u7684\u4e00\u79cd\u5e38\u7528\u63aa\u65bd\u3002\u5b83\u5f80\u5f80\u80fd\u591f\u4f7f\u6a21\u578b\u4f53\u79ef\u7f29\u5c0f\uff0c\u7b80\u5316\u8ba1\u7b97\uff0c\u589e\u5feb\u63a8\u65ad\u901f\u5ea6\uff0c\u6ee1\u8db3\u6a21\u578b\u5728\u7279\u5b9a\u573a\u5408(\u5982: \u79fb\u52a8\u7aef)\u7684\u9700\u6c42\u3002\u76ee\u524d\uff0c\u6a21\u578b\u538b\u7f29\u53ef\u4ee5\u4ece\u591a\u65b9\u9762\u8003\u8651\uff0c\u5982\u526a\u679d\u65b9\u6cd5(\u7b80\u5316\u6a21\u578b\u67b6\u6784)\uff0c\u53c2\u6570\u91cf\u5316\u65b9\u6cd5(\u7b80\u5316\u6a21\u578b\u53c2\u6570)\uff0c\u77e5\u8bc6\u84b8\u998f\u7b49\u3002\u672c\u6848\u4f8b\u5c06\u7740\u91cd\u8bb2\u89e3\u6a21\u578b\u53c2\u6570\u91cf\u5316\u65b9\u6cd5\u3002 \u6a21\u578b\u53c2\u6570\u91cf\u5316: \u5728\u673a\u5668\u5b66\u4e60\uff08\u6df1\u5ea6\u5b66\u4e60\uff09\u9886\u57df\uff0c\u6a21\u578b\u91cf\u5316\u4e00\u822c\u662f\u6307\u5c06\u6a21\u578b\u53c2\u6570\u7531\u7c7b\u578bFP32\u8f6c\u6362\u4e3aINT8\u7684\u8fc7\u7a0b\uff0c\u8f6c\u6362\u4e4b\u540e\u7684\u6a21\u578b\u5927\u5c0f\u88ab\u538b\u7f29\u4e3a\u539f\u6765\u76841/4\uff0c\u6240\u9700\u5185\u5b58\u548c\u5e26\u5bbd\u51cf\u5c0f4\u500d\uff0c\u540c\u65f6\uff0c\u8ba1\u7b97\u91cf\u51cf\u5c0f\u7ea6\u4e3a2-4\u500d\u3002\u6a21\u578b\u53c8\u53ef\u5206\u4e3a\u52a8\u6001\u91cf\u5316\u548c\u9759\u6001\u91cf\u5316\u3002 \u6a21\u578b\u52a8\u6001\u91cf\u5316\uff1a \u64cd\u4f5c\u6700\u7b80\u5355\u4e5f\u662f\u538b\u7f29\u6548\u679c\u6700\u597d\u7684\u91cf\u5316\u65b9\u5f0f\uff0c\u91cf\u5316\u8fc7\u7a0b\u53d1\u751f\u5728\u6a21\u578b\u8bad\u7ec3\u540e\uff0c\u9488\u5bf9\u6a21\u578b\u6743\u91cd\u91c7\u53d6\u91cf\u5316\uff0c\u4e4b\u540e\u4f1a\u5728\u6a21\u578b\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u518d\u51b3\u5b9a\u662f\u5426\u9488\u5bf9\u6fc0\u6d3b\u503c\u91c7\u53d6\u91cf\u5316\uff0c\u56e0\u6b64\u79f0\u4f5c\u52a8\u6001\u91cf\u5316\uff08\u5728\u9884\u6d4b\u65f6\u53ef\u80fd\u53d1\u751f\u91cf\u5316\uff09\u3002\u8fd9\u662f\u6211\u4eec\u672c\u6848\u4f8b\u5c06\u4f1a\u4f7f\u7528\u7684\u91cf\u5316\u65b9\u5f0f\u3002 \u6a21\u578b\u9759\u6001\u91cf\u5316\uff1a \u8003\u8651\u5230\u52a8\u6001\u91cf\u5316\u8fd9\u79cd\u201c\u4e00\u5200\u5207\u201d\u7684\u91cf\u5316\u65b9\u5f0f\u6709\u65f6\u4f1a\u5e26\u6765\u6a21\u578b\u9884\u6d4b\u6548\u679c\u7684\u5927\u5e45\u5ea6\u4e0b\u964d\uff0c\u56e0\u6b64\u5f15\u5165\u9759\u6001\u91cf\u5316\uff0c\u5b83\u540c\u6837\u53d1\u751f\u5728\u6a21\u578b\u8bad\u7ec3\u540e\uff0c\u4e3a\u4e86\u5224\u65ad\u54ea\u4e9b\u6743\u91cd\u6216\u6fc0\u6d3b\u503c\u5e94\u8be5\u88ab\u91cf\u5316\uff0c\u54ea\u4e9b\u5e94\u8be5\u4fdd\u7559\u6216\u5c0f\u5e45\u5ea6\u91cf\u5316\uff0c\u5728\u9884\u6d4b\u8fc7\u7a0b\u5f00\u59cb\u524d\uff0c\u5728\u6a21\u578b\u4e2d\u8282\u70b9\u63d2\u5165\u201c\u89c2\u6d4b\u8005\u201d\uff08\u8861\u91cf\u8282\u70b9\u4f7f\u7528\u60c5\u51b5\u7684\u4e00\u4e9b\u8ba1\u7b97\u65b9\u6cd5\uff09\uff0c\u4ed6\u4eec\u5c06\u5728\u4e00\u4e9b\u5b9e\u9a8c\u6570\u636e\u4e2d\u8bc4\u4f30\u8282\u70b9\u4f7f\u7528\u60c5\u51b5\uff0c\u6765\u51b3\u5b9a\u662f\u5426\u5c06\u5176\u6743\u91cd\u6216\u6fc0\u6d3b\u503c\u8fdb\u884c\u91cf\u5316\uff0c\u56e0\u4e3a\u5728\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u8282\u70b9\u662f\u5426\u88ab\u91cf\u5316\u5df2\u7ecf\u786e\u5b9a\uff0c\u56e0\u6b64\u79f0\u4f5c\u9759\u6001\u91cf\u5316\u3002 \uff08\u6269\u5c55\u77e5\u8bc6\uff09\u91cf\u5316\u610f\u8bc6\u8bad\u7ec3\uff1a \u8fd9\u662f\u4e00\u79cd\u64cd\u4f5c\u76f8\u5bf9\u590d\u6742\u7684\u6a21\u578b\u91cf\u5316\u65b9\u6cd5\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u5b83\uff0c\u539f\u7406\u4e0e\u9759\u6001\u91cf\u5316\u7c7b\u4f3c\uff0c\u90fd\u9700\u8981\u50cf\u6a21\u578b\u4e2d\u63d2\u5165\u201c\u89c2\u6d4b\u8005\u201d\uff0c\u540c\u65f6\u5b83\u8fd8\u9700\u8981\u63d2\u5165\u91cf\u5316\u8ba1\u7b97\u64cd\u4f5c\uff0c\u4f7f\u5f97\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u9664\u4e86\u8fdb\u884c\u539f\u6709\u7684\u6d6e\u70b9\u578b\u8ba1\u7b97\uff0c\u8fd8\u8981\u8fdb\u884c\u91cf\u5316\u8ba1\u7b97\uff0c\u4f46\u6a21\u578b\u53c2\u6570\u7684\u66f4\u65b0\u8fd8\u662f\u4f7f\u7528\u6d6e\u70b9\u578b\uff0c\u800c\u91cf\u5316\u8ba1\u7b97\u7684\u4f5c\u7528\u5c31\u662f\u8ba9\u6a21\u578b\u201c\u610f\u8bc6\u201d\u5230\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u901a\u8fc7\u201c\u89c2\u6d4b\u8005\u201d\u8bc4\u4f30\u6bcf\u6b21\u91cf\u5316\u7ed3\u679c\u4e0e\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53c2\u6570\u66f4\u65b0\u7a0b\u5ea6\uff0c\u4e3a\u4e4b\u540e\u6a21\u578b\u5982\u4f55\u8fdb\u884c\u91cf\u5316\u8fd8\u80fd\u4fdd\u8bc1\u51c6\u786e\u7387\u63d0\u4f9b\u8861\u91cf\u6307\u6807\u3002\uff08\u7c7b\u4f3c\u4e8e\uff0c\u4eba\u5728\u63a5\u53d7\u8bad\u7ec3\u65f6\uff0c\u610f\u8bc6\u5230\u81ea\u5df1\u63a5\u4e0b\u6765\u53ef\u80fd\u9664\u4e86\u8bad\u7ec3\u5185\u5bb9\u5916\uff0c\u8fd8\u4f1a\u63a5\u53d7\u5176\u4ed6\u201c\u64cd\u4f5c\u201d\uff08\u91cf\u5316\uff09\uff0c\u56e0\u6b64\u4e5f\u4f1a\u51c6\u5907\u4e00\u4e9b\u5982\u679c\u8fdb\u884c\u91cf\u5316\u4ecd\u80fd\u8fbe\u6210\u76ee\u6807\u7684\u63aa\u65bd\uff09 BERT\u6a21\u578b: \u8fd9\u91cc\u4f7f\u7528bert-base-uncased\uff0c\u5b83\u7684\u7f16\u7801\u5668\u5177\u670912\u4e2a\u9690\u5c42, \u8f93\u51fa768\u7ef4\u5f20\u91cf, 12\u4e2a\u81ea\u6ce8\u610f\u529b\u5934, \u5171110M\u53c2\u6570\u91cf, \u5728\u5c0f\u5199\u7684\u82f1\u6587\u6587\u672c\u4e0a\u8fdb\u884c\u8bad\u7ec3\u800c\u5f97\u5230\u3002 \u6570\u636e\u96c6\u8bf4\u660e GLUE\u6570\u636e\u96c6\u5408\u7684\u4ecb\u7ecd\uff1a GLUE\u7531\u7ebd\u7ea6\u5927\u5b66\uff0c\u534e\u76db\u987f\u5927\u5b66\uff0cGoogle\u8054\u5408\u63a8\u51fa\uff0c\u6db5\u76d6\u4e0d\u540c\u7684NLP\u4efb\u52a1\u7c7b\u578b\uff0c\u6301\u7eed\u81f32020\u5e741\u6708\uff0c\u5176\u4e2d\u5305\u62ec11\u4e2a\u5b50\u4efb\u52a1\u6570\u636e\u96c6\uff0c\u6210\u4e3aNLP\u7814\u7a76\u53d1\u5c55\u7684\u6807\u51c6\u3002\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u5176\u5b9eMRPC\u6570\u636e\u96c6\u3002 \u6570\u636e\u4e0b\u8f7d\u5730\u5740: \u6807\u51c6\u6570\u636e\u96c6\u4e00\u822c\u4f7f\u7528\u4e0b\u8f7d\u811a\u672c\u8fdb\u884c\u4e0b\u8f7d\uff0c\u4f1a\u5728\u4e4b\u540e\u7684\u4ee3\u7801\u4e2d\u6f14\u793a\u3002 MRPC\u6570\u636e\u96c6\u7684\u4efb\u52a1\u7c7b\u578b\uff1a \u53e5\u5b50\u5bf9\u4e8c\u5206\u7c7b\u4efb\u52a1 \u8bad\u7ec3\u96c6\u4e0a\u6b63\u6837\u672c\u536068%\uff0c\u8d1f\u6837\u672c\u536032% \u8bc4\u4f30\u6307\u6807\u8fd9\u91cc\u4f7f\u7528\uff1aF1 \u8bc4\u4f30\u6307\u6807\u8ba1\u7b97\u65b9\u5f0f\uff1aF1=2\u2217(precision\u2217recall)/(precision+recall) \u6570\u636e\u96c6\u9884\u89c8: MRPC\u6570\u636e\u96c6\u6587\u4ef6\u6837\u5f0f\uff1a - MRPC / - dev . tsv - test . tsv - train . tsv - dev_ids . tsv - msr_paraphrase_test . txt - msr_paraphrase_train . txt \u6587\u4ef6\u6837\u5f0f\u8bf4\u660e\uff1a \u5728\u4f7f\u7528\u4e2d\u5e38\u7528\u5230\u7684\u6587\u4ef6\u662ftrain.tsv\uff0cdev.tsv\uff0ctest.tsv\uff0c\u5206\u522b\u4ee3\u8868\u8bad\u7ec3\u96c6\uff0c\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002\u5176\u4e2dtrain.tsv\u4e0edev.tsv\u6570\u636e\u6837\u5f0f\u76f8\u540c\uff0c\u90fd\u662f\u5e26\u6709\u6807\u7b7e\u7684\u6570\u636e\uff0c\u5176\u4e2dtest.tsv\u662f\u4e0d\u5e26\u6709\u6807\u7b7e\u7684\u6570\u636e\u3002 train.tsv\u6570\u636e\u6837\u5f0f\uff1a Quality #1 ID #2 ID #1 String #2 String 1 702876 702977 Amrozi accused his brother , whom he called \" the witness \" , of deliberately distorting his evidence . Referring to him as only \" the witness \" , Amrozi accused his brother of deliberately distorting his evidence . 0 2108705 2108831 Yucaipa owned Dominick ' s before selling the chain to Safeway in 1998 for $ 2.5 billion . Yucaipa bought Dominick ' s in 1995 for $ 693 million and sold it to Safeway for $ 1 . 8 billion in 1998 . 1 1330381 1330521 They had published an advertisement on the Internet on June 10 , offering the cargo for sale , he added . On June 10 , the ship ' s owners had published an advertisement on the Internet , offering the explosives for sale . 0 3344667 3344648 Around 0335 GMT , Tab shares were up 19 cents , or 4 . 4 % , at A $ 4 . 56 , having earlier set a record high of A $ 4 . 57 . Tab shares jumped 20 cents , or 4 . 6 % , to set a record closing high at A $ 4 . 57 . 1 1236820 1236712 The stock rose $ 2 . 11 , or about 11 percent , to close Friday at $ 21 . 51 on the New York Stock Exchange . PG & E Corp . shares jumped $ 1 . 63 or 8 percent to $ 21 . 03 on the New York Stock Exchange on Friday . 1 738533 737951 Revenue in the first quarter of the year dropped 15 percent from the same period a year earlier . With the scandal hanging over Stewart ' s company , revenue the first quarter of the year dropped 15 percent from the same period a year earlier . 0 264589 264502 The Nasdaq had a weekly gain of 17 . 27 , or 1 . 2 percent , closing at 1 , 520 . 15 on Friday . The tech - laced Nasdaq Composite . IXIC rallied 30 . 46 points , or 2 . 04 percent , to 1 , 520 . 15 . 1 579975 579810 The DVD - CCA then appealed to the state Supreme Court . The DVD CCA appealed that decision to the U . S . Supreme Court . ... train.tsv\u6570\u636e\u6837\u5f0f\u8bf4\u660e\uff1a train.tsv\u4e2d\u7684\u6570\u636e\u5185\u5bb9\u5171\u5206\u4e3a5\u5217\uff0c\u7b2c\u4e00\u5217\u6570\u636e\uff0c0\u62161\uff0c\u4ee3\u8868\u6bcf\u5bf9\u53e5\u5b50\u662f\u5426\u5177\u6709\u76f8\u540c\u7684\u542b\u4e49\uff0c0\u4ee3\u8868\u542b\u4e49\u4e0d\u76f8\u540c\uff0c1\u4ee3\u8868\u542b\u4e49\u76f8\u540c\u3002\u7b2c\u4e8c\u5217\u548c\u7b2c\u4e09\u5217\u5206\u522b\u4ee3\u8868\u6bcf\u5bf9\u53e5\u5b50\u7684id\uff0c\u7b2c\u56db\u5217\u548c\u7b2c\u4e94\u5217\u5206\u522b\u5177\u6709\u76f8\u540c/\u4e0d\u540c\u542b\u4e49\u7684\u53e5\u5b50\u5bf9\u3002 test.tsv\u6570\u636e\u6837\u5f0f\uff1a index #1 ID #2 ID #1 String #2 String 0 1089874 1089925 PCCW ' s chief operating officer , Mike Butcher , and Alex Arena , the chief financial officer , will report directly to Mr So . Current Chief Operating Officer Mike Butcher and Group Chief Financial Officer Alex Arena will report to So . 1 3019446 3019327 The world ' s two largest automakers said their U.S. sales declined more than predicted last month as a late summer sales frenzy caused more of an industry backlash than expected . Domestic sales at both GM and No. 2 Ford Motor Co. declined more than predicted as a late summer sales frenzy prompted a larger-than-expected industry backlash . 2 1945605 1945824 According to the federal Centers for Disease Control and Prevention ( news - web sites ) , there were 19 reported cases of measles in the United States in 2002 . The Centers for Disease Control and Prevention said there were 19 reported cases of measles in the United States in 2002 . 3 1430402 1430329 A tropical storm rapidly developed in the Gulf of Mexico Sunday and was expected to hit somewhere along the Texas or Louisiana coasts by Monday night . A tropical storm rapidly developed in the Gulf of Mexico on Sunday and could have hurricane - force winds when it hits land somewhere along the Louisiana coast Monday night . 4 3354381 3354396 The company didn ' t detail the costs of the replacement and repairs . But company officials expect the costs of the replacement work to run into the millions of dollars . 5 1390995 1391183 The settling companies would also assign their possible claims against the underwriters to the investor plaintiffs , he added . Under the agreement , the settling companies will also assign their potential claims against the underwriters to the investors , he added . 6 2201401 2201285 Air Commodore Quaife said the Hornets remained on three - minute alert throughout the operation . Air Commodore John Quaife said the security operation was unprecedented . 7 2453843 2453998 A Washington County man may have the countys first human case of West Nile virus , the health department said Friday . The countys first and only human case of West Nile this year was confirmed by health officials on Sept . 8 . ... test.tsv\u6570\u636e\u6837\u5f0f\u8bf4\u660e\uff1a test.tsv\u4e2d\u7684\u6570\u636e\u5185\u5bb9\u5171\u5206\u4e3a5\u5217\uff0c\u7b2c\u4e00\u5217\u6570\u636e\u4ee3\u8868\u6bcf\u6761\u6587\u672c\u6570\u636e\u7684\u7d22\u5f15\uff1b\u5176\u4f59\u5217\u7684\u542b\u4e49\u4e0etrain.tsv\u4e2d\u76f8\u540c\u3002 \u4f7f\u7528huggingface\u4e2d\u7684\u9884\u8bad\u7ec3BERT\u6a21\u578b\u8fdb\u884c\u5fae\u8c03 \u7b2c\u4e00\u6b65: \u5b89\u88c5\u5fc5\u8981\u7684\u5de5\u5177\u5305\u5e76\u5bfc\u5165 \u7b2c\u4e8c\u6b65: \u4e0b\u8f7d\u6570\u636e\u96c6\u5e76\u4f7f\u7528\u811a\u672c\u8fdb\u884c\u5fae\u8c03 \u7b2c\u4e09\u6b65: \u8bbe\u5b9a\u5168\u5c40\u914d\u7f6e\u5e76\u52a0\u8f7d\u5fae\u8c03\u6a21\u578b \u7b2c\u56db\u6b65: \u7f16\u5199\u7528\u4e8e\u6a21\u578b\u4f7f\u7528\u7684\u8bc4\u4f30\u51fd\u6570 \u7b2c\u4e00\u6b65: \u5b89\u88c5\u6838\u5fc3\u7684\u5de5\u5177\u5305\u5e76\u5bfc\u5165 \u5b89\u88c5\u6838\u5fc3\u5de5\u5177\u5305: # \u8fd9\u662f\u7531 huggingface\u63d0\u4f9b\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u4f7f\u7528\u5de5\u5177\u5305 pip install transformers == 2 . 3 . 0 \u5de5\u5177\u5305\u5bfc\u5165 from __future__ import absolute_import , division , print_function import logging import numpy as np import os import random import sys import time import torch # \u7528\u4e8e\u8bbe\u5b9a\u5168\u5c40\u914d\u7f6e\u7684\u547d\u540d\u7a7a\u95f4 from argparse import Namespace # \u4ecetorch.utils.data\u4e2d\u5bfc\u5165\u5e38\u7528\u7684\u6a21\u578b\u5904\u7406\u5de5\u5177\uff0c\u4f1a\u5728\u4ee3\u7801\u4f7f\u7528\u4e2d\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd from torch.utils.data import ( DataLoader , RandomSampler , SequentialSampler , TensorDataset ) # \u6a21\u578b\u8fdb\u5ea6\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u5728\u8bc4\u4f30\u8fc7\u7a0b\u4e2d\uff0c\u5e2e\u52a9\u6253\u5370\u8fdb\u5ea6\u6761 from tqdm import tqdm # \u4ecetransformers\u4e2d\u5bfc\u5165BERT\u6a21\u578b\u7684\u76f8\u5173\u5de5\u5177 from transformers import ( BertConfig , BertForSequenceClassification , BertTokenizer ,) # \u4ecetransformers\u4e2d\u5bfc\u5165GLUE\u6570\u636e\u96c6\u7684\u8bc4\u4f30\u6307\u6807\u8ba1\u7b97\u65b9\u6cd5 from transformers import glue_compute_metrics as compute_metrics # \u4ecetransformers\u4e2d\u5bfc\u5165GLUE\u6570\u636e\u96c6\u7684\u8f93\u51fa\u6a21\u5f0f(\u56de\u5f52/\u5206\u7c7b) from transformers import glue_output_modes as output_modes # \u4ecetransformers\u4e2d\u5bfc\u5165GLUE\u6570\u636e\u96c6\u7684\u9884\u5904\u7406\u5668processors # processors\u662f\u5c06\u6301\u4e45\u5316\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u8fc7\u7a0b\uff0c\u5373\u8f93\u5165\u4e00\u822c\u4e3a\u6587\u4ef6\u8def\u5f84\uff0c\u8f93\u51fa\u662f\u8bad\u7ec3\u6570\u636e\u548c\u5bf9\u5e94\u6807\u7b7e\u7684\u67d0\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5982\u5217\u8868\u8868\u793a\u3002 from transformers import glue_processors as processors # \u4ecetransformers\u4e2d\u5bfc\u5165GLUE\u6570\u636e\u96c6\u7684\u7279\u5f81\u5904\u7406\u5668convert_examples_to_features # convert_examples_to_features\u662f\u5c06processor\u7684\u8f93\u51fa\u5904\u7406\u6210\u6a21\u578b\u9700\u8981\u7684\u8f93\u5165\uff0cNLP\u5b9a\u4e2d\u7684\u4e00\u822c\u6d41\u7a0b\u4e3a\u6570\u503c\u6620\u5c04\uff0c\u6307\u5b9a\u957f\u5ea6\u7684\u622a\u65ad\u8865\u9f50\u7b49 # \u5728BERT\u6a21\u578b\u4e0a\u5904\u7406\u53e5\u5b50\u5bf9\u65f6\uff0c\u8fd8\u9700\u8981\u5728\u53e5\u5b50\u524d\u63d2\u5165[CLS]\u5f00\u59cb\u6807\u8bb0\uff0c\u5728\u4e24\u4e2a\u53e5\u5b50\u4e2d\u95f4\u548c\u7b2c\u4e8c\u4e2a\u53e5\u5b50\u672b\u7aef\u63d2\u5165[SEP]\u5206\u5272/\u7ed3\u675f\u6807\u8bb0 from transformers import glue_convert_examples_to_features as convert_examples_to_features # \u8bbe\u5b9a\u4e0e\u65e5\u5fd7\u6253\u5370\u6709\u5173\u7684\u914d\u7f6e logger = logging . getLogger ( __name__ ) logging . basicConfig ( format = ' %(asctime)s - %(levelname)s - %(name)s - %(message)s ' , datefmt = '%m/ %d /%Y %H:%M:%S' , level = logging . WARN ) logging . getLogger ( \"transformers.modeling_utils\" ) . setLevel ( logging . WARN ) # Reduce logging print ( \"torch version:\" , torch . __version__ ) # \u8bbe\u7f6etorch\u5141\u8bb8\u542f\u52a8\u7684\u7ebf\u7a0b\u6570, \u56e0\u4e3a\u4e4b\u540e\u4f1a\u5bf9\u6bd4\u538b\u7f29\u6a21\u578b\u7684\u8017\u65f6\uff0c\u56e0\u6b64\u9632\u6b62\u8be5\u53d8\u91cf\u4ea7\u751f\u5f71\u54cd torch . set_num_threads ( 1 ) print ( torch . __config__ . parallel_info ()) \u8f93\u51fa\u6548\u679c: torch version: 1.3.1 ATen/Parallel: at::get_num_threads() : 1 at::get_num_interop_threads() : 8 OpenMP 201511 (a.k.a. OpenMP 4.5) omp_get_max_threads() : 1 Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications mkl_get_max_threads() : 1 Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e) std::thread::hardware_concurrency() : 16 Environment variables: OMP_NUM_THREADS : [not set] MKL_NUM_THREADS : [not set] ATen parallel backend: OpenMP \u7b2c\u4e8c\u6b65: \u4e0b\u8f7d\u6570\u636e\u96c6\u5e76\u4f7f\u7528\u811a\u672c\u8fdb\u884c\u5fae\u8c03 \u4e0b\u8f7dGLUE\u4e2d\u7684MRPC\u6570\u636e\u96c6: python download_glue_data.py --data_dir = './glue_data' --tasks = 'MRPC' \u4f7f\u7528 run_glue.py[\u5177\u4f53\u4ee3\u7801\u5185\u5bb9\u89c1\u9644\u5f55] \u8fdb\u884c\u6a21\u578b\u5fae\u8c03: # \u6ce8\u610f: \u8fd9\u662f\u4e00\u6bb5\u4f7f\u7528shell\u8fd0\u884c\u7684\u811a\u672c, \u8fd0\u884c\u8fc7\u7a0b\u4e2d\u9700\u8981\u8bf7\u6c42AWS\u7684S3\u8fdb\u884c\u9884\u8bad\u7ec3\u6a21\u578b\u4e0b\u8f7d # \u5b9a\u4e49GLUE_DIR: \u5fae\u8c03\u6570\u636e\u6240\u5728\u8def\u5f84, \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528glue_data\u4e2d\u7684\u6570\u636e\u4f5c\u4e3a\u5fae\u8c03\u6570\u636e export GLUE_DIR = ./glue_data # \u5b9a\u4e49OUT_DIR: \u6a21\u578b\u7684\u4fdd\u5b58\u8def\u5f84, \u6211\u4eec\u5c06\u6a21\u578b\u4fdd\u5b58\u5728\u5f53\u524d\u76ee\u5f55\u7684bert_finetuning_test\u6587\u4ef6\u4e2d export OUT_DIR = ./bert_finetuning_test/ python ./run_glue.py \\ --model_type bert \\ --model_name_or_path bert-base-uncased \\ --task_name MRPC \\ --do_train \\ --do_eval \\ --do_lower_case \\ --data_dir $GLUE_DIR /MRPC \\ --max_seq_length 128 \\ --per_gpu_eval_batch_size = 8 \\ --per_gpu_train_batch_size = 8 \\ --learning_rate 2e-5 \\ --num_train_epochs 1 .0 \\ --output_dir $OUT_DIR # \u4f7f\u7528python\u8fd0\u884c\u5fae\u8c03\u811a\u672c # --model_type: \u9009\u62e9\u9700\u8981\u5fae\u8c03\u7684\u6a21\u578b\u7c7b\u578b, \u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9BERT, XLNET, XLM, roBERTa, distilBERT, ALBERT # --model_name_or_path: \u9009\u62e9\u5177\u4f53\u7684\u6a21\u578b\u6216\u8005\u53d8\u4f53, \u8fd9\u91cc\u662f\u5728\u82f1\u6587\u8bed\u6599\u4e0a\u5fae\u8c03, \u56e0\u6b64\u9009\u62e9bert-base-uncased # --task_name: \u5b83\u5c06\u4ee3\u8868\u5bf9\u5e94\u7684\u4efb\u52a1\u7c7b\u578b, \u5982MRPC\u4ee3\u8868\u53e5\u5b50\u5bf9\u4e8c\u5206\u7c7b\u4efb\u52a1 # --do_train: \u4f7f\u7528\u5fae\u8c03\u811a\u672c\u8fdb\u884c\u8bad\u7ec3 # --do_eval: \u4f7f\u7528\u5fae\u8c03\u811a\u672c\u8fdb\u884c\u9a8c\u8bc1 # --data_dir: \u8bad\u7ec3\u96c6\u53ca\u5176\u9a8c\u8bc1\u96c6\u6240\u5728\u8def\u5f84, \u5c06\u81ea\u52a8\u5bfb\u627e\u8be5\u8def\u5f84\u4e0b\u7684train.tsv\u548cdev.tsv\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6 # --max_seq_length: \u8f93\u5165\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6, \u8d85\u8fc7\u5219\u622a\u65ad, \u4e0d\u8db3\u5219\u8865\u9f50 # --learning_rate: \u5b66\u4e60\u7387 # --num_train_epochs: \u8bad\u7ec3\u8f6e\u6570 # --output_dir $OUT_DIR: \u8bad\u7ec3\u540e\u7684\u6a21\u578b\u4fdd\u5b58\u8def\u5f84 \u8f93\u51fa\u6548\u679c: ... 03/18/2020 00:55:17 - INFO - __main__ - Loading features from cached file ./glue_data/MRPC/cached_train_bert-base-uncased_128_mrpc 03/18/2020 00:55:17 - INFO - __main__ - ***** Running training ***** 03/18/2020 00:55:17 - INFO - __main__ - Num examples = 3668 03/18/2020 00:55:17 - INFO - __main__ - Num Epochs = 1 03/18/2020 00:55:17 - INFO - __main__ - Instantaneous batch size per GPU = 8 03/18/2020 00:55:17 - INFO - __main__ - Total train batch size (w. parallel, distributed & accumulation) = 8 03/18/2020 00:55:17 - INFO - __main__ - Gradient Accumulation steps = 1 03/18/2020 00:55:17 - INFO - __main__ - Total optimization steps = 459 Epoch: 0%| | 0/1 [00:00<?, ?it/s] Iteration: 2%| | 8/459 [00:13<12:42, 1.69s/it] \u8fd0\u884c\u6210\u529f\u540e\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210 ./bert_finetuning_test\u6587\u4ef6\u5939\uff0c\u5185\u90e8\u6587\u4ef6\u5982\u4e0b: added_tokens . json checkpoint - 200 checkpoint - 350 eval_results . txt tokenizer_config . json checkpoint - 100 checkpoint - 250 checkpoint - 50 pytorch_model . bin training_args . bin checkpoint - 150 checkpoint - 300 config . json special_tokens_map . json vocab . txt \u7b2c\u4e09\u6b65: \u8bbe\u5b9a\u5168\u5c40\u914d\u7f6e\u5e76\u52a0\u8f7d\u5fae\u8c03\u6a21\u578b \u8bbe\u5b9a\u5168\u5c40\u914d\u7f6e: # \u8fd9\u4e9b\u914d\u7f6e\u5c06\u5728\u8c03\u7528\u5fae\u8c03\u6a21\u578b\u65f6\u8fdb\u884c\u4f7f\u7528 # \u5b9e\u4f8b\u5316\u4e00\u4e2a\u914d\u7f6e\u7684\u547d\u540d\u7a7a\u95f4 configs = Namespace () # \u6a21\u578b\u7684\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 configs . output_dir = \"./bert_finetuning_test/\" # \u9a8c\u8bc1\u6570\u636e\u96c6\u6240\u5728\u8def\u5f84(\u4e0e\u8bad\u7ec3\u96c6\u76f8\u540c) configs . data_dir = \"./glue_data/MRPC\" # \u9884\u8bad\u7ec3\u6a21\u578b\u7684\u540d\u5b57 configs . model_name_or_path = \"bert-base-uncased\" # \u6587\u672c\u7684\u6700\u5927\u5bf9\u9f50\u957f\u5ea6 configs . max_seq_length = 128 # GLUE\u4e2d\u7684\u4efb\u52a1\u540d(\u9700\u8981\u5c0f\u5199) configs . task_name = \"MRPC\" . lower () # \u6839\u636e\u4efb\u52a1\u540d\u4eceGLUE\u6570\u636e\u96c6\u5904\u7406\u5de5\u5177\u5305\u4e2d\u53d6\u51fa\u5bf9\u5e94\u7684\u9884\u5904\u7406\u5de5\u5177 configs . processor = processors [ configs . task_name ]() # \u5f97\u5230\u5bf9\u5e94\u6a21\u578b\u8f93\u51fa\u6a21\u5f0f(MRPC\u4e3a\u5206\u7c7b) configs . output_mode = output_modes [ configs . task_name ] # \u5f97\u5230\u8be5\u4efb\u52a1\u7684\u5bf9\u5e94\u7684\u6807\u7b7e\u79cd\u7c7b\u5217\u8868 configs . label_list = configs . processor . get_labels () # \u5b9a\u4e49\u6a21\u578b\u7c7b\u578b configs . model_type = \"bert\" . lower () # \u662f\u5426\u5168\u90e8\u4f7f\u7528\u5c0f\u5199\u6587\u672c configs . do_lower_case = True # \u4f7f\u7528\u7684\u8bbe\u5907 configs . device = \"cpu\" # \u6bcf\u6b21\u9a8c\u8bc1\u7684\u6279\u6b21\u5927\u5c0f configs . per_eval_batch_size = 8 # gpu\u7684\u6570\u91cf configs . n_gpu = 0 # \u662f\u5426\u9700\u8981\u91cd\u5199\u6570\u636e\u7f13\u5b58 configs . overwrite_cache = False \u52a0\u8f7d\u5fae\u8c03\u6a21\u578b: # \u56e0\u4e3a\u5728\u6a21\u578b\u4f7f\u7528\u4e2d\uff0c\u4f1a\u4f7f\u7528\u4e00\u4e9b\u968f\u673a\u65b9\u6cd5\uff0c\u4e3a\u4e86\u4f7f\u6bcf\u6b21\u8fd0\u884c\u7684\u7ed3\u679c\u53ef\u4ee5\u590d\u73b0 # \u9700\u8981\u8bbe\u5b9a\u786e\u5b9a\u7684\u968f\u673a\u79cd\u5b50\uff0c\u4fdd\u8bc1\u6bcf\u6b21\u968f\u673a\u5316\u7684\u6570\u5b57\u5728\u8303\u56f4\u5185\u6d6e\u52a8 def set_seed ( seed ) : random . seed ( seed ) np . random . seed ( seed ) torch . manual_seed ( seed ) set_seed ( 42 ) ## \u52a0\u8f7d\u5fae\u8c03\u6a21\u578b # \u52a0\u8f7d BERT \u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6570\u503c\u6620\u5c04\u5668 tokenizer = BertTokenizer . from_pretrained ( configs . output_dir , do_lower_case = configs . do_lower_case ) # \u52a0\u8f7d\u5e26\u6709\u6587\u672c\u5206\u7c7b\u5934\u7684 BERT \u6a21\u578b model = BertForSequenceClassification . from_pretrained ( configs . output_dir ) # \u5c06\u6a21\u578b\u4f20\u5230\u5236\u5b9a\u8bbe\u5907\u4e0a model . to ( configs . device ) \u7b2c\u56db\u6b65: \u7f16\u5199\u7528\u4e8e\u6a21\u578b\u4f7f\u7528\u7684\u8bc4\u4f30\u51fd\u6570 def evaluate ( args , model , tokenizer ): \"\"\" \u6a21\u578b\u8bc4\u4f30\u51fd\u6570 :param args: \u6a21\u578b\u7684\u5168\u5c40\u914d\u7f6e\u5bf9\u8c61\uff0c\u91cc\u9762\u5305\u542b\u6a21\u578b\u7684\u5404\u79cd\u914d\u7f6e\u4fe1\u606f :param model: \u4f7f\u7528\u7684\u6a21\u578b :param tokenizer: \u6587\u672c\u6570\u636e\u7684\u6570\u503c\u6620\u5c04\u5668 \"\"\" # \u56e0\u4e3a\u4e4b\u540e\u4f1a\u591a\u6b21\u7528\u5230\u4efb\u52a1\u540d\u548c\u8f93\u51fa\u8def\u5f84 # \u6240\u4ee5\u5c06\u5176\u4ece\u53c2\u6570\u4e2d\u53d6\u51fa eval_task = args . task_name eval_output_dir = args . output_dir try : # \u8c03\u7528load_and_cache_examples\u52a0\u8f7d\u539f\u59cb\u6216\u8005\u5df2\u7ecf\u7f13\u5b58\u7684\u6570\u636e # \u5f97\u5230\u4e00\u4e2a\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61 eval_dataset = load_and_cache_examples ( args , eval_task , tokenizer ) # \u5224\u65ad\u6a21\u578b\u8f93\u51fa\u8def\u5f84\u662f\u5426\u5b58\u5728 if not os . path . exists ( eval_output_dir ): # \u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u521b\u5efa\u8be5\u8def\u5f84 os . makedirs ( eval_output_dir ) # \u4f7f\u7528SequentialSampler\u5c01\u88c5\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61 # SequentialSampler\u662f\u91c7\u6837\u5668\u5bf9\u8c61\uff0c\u4e00\u822c\u5728Dataloader\u6570\u636e\u52a0\u8f7d\u5668\u4e2d\u4f7f\u7528\uff0c # \u56e0\u4e3a\u6570\u636e\u52a0\u8f7d\u5668\u662f\u4ee5\u8fed\u4ee3\u7684\u65b9\u5f0f\u4ea7\u751f\u6570\u636e\uff0c\u56e0\u6b64\u6bcf\u4e2a\u6279\u6b21\u6570\u636e\u53ef\u4ee5\u6307\u5b9a\u91c7\u6837\u89c4\u5219\uff0c # SequentialSampler\u662f\u987a\u5e8f\u91c7\u6837\u5668\uff0c\u4e0d\u6539\u53d8\u539f\u6709\u6570\u636e\u96c6\u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u53d6\u51fa\u6570\u636e\u3002 eval_sampler = SequentialSampler ( eval_dataset ) # \u4f7f\u7528Dataloader\u6570\u636e\u52a0\u8f7d\u5668\uff0c\u53c2\u6570\u5206\u522b\u662f\u6570\u636e\u96c6\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u91c7\u96c6\u5668\u5bf9\u8c61\uff0c\u6279\u6b21\u5927\u5c0f eval_dataloader = DataLoader ( eval_dataset , sampler = eval_sampler , batch_size = args . per_eval_batch_size ) # \u5f00\u59cb\u8bc4\u4f30 logger . info ( \"***** Running evaluation *****\" ) logger . info ( \" Num examples = %d \" , len ( eval_dataset )) logger . info ( \" Batch size = %d \" , args . per_eval_batch_size ) # \u521d\u59cb\u5316\u9a8c\u8bc1\u635f\u5931 eval_loss = 0.0 # \u521d\u59cb\u5316\u9a8c\u8bc1\u6b65\u6570 nb_eval_steps = 0 # \u521d\u59cb\u5316\u9884\u6d4b\u7684\u6982\u7387\u5206\u5e03 preds = None # \u521d\u59cb\u5316\u8f93\u51fa\u771f\u5b9e\u6807\u7b7e\u503c out_label_ids = None # \u5faa\u73af\u6570\u636e\u6279\u6b21\uff0c\u4f7f\u7528tqdm\u5c01\u88c5\u6570\u636e\u52a0\u8f7d\u5668\uff0c\u53ef\u4ee5\u5728\u8bc4\u4f30\u65f6\u663e\u793a\u8fdb\u5ea6\u6761 # desc\u662f\u8fdb\u5ea6\u6761\u524d\u9762\u7684\u63cf\u8ff0\u4fe1\u606f for batch in tqdm ( eval_dataloader , desc = \"Evaluating\" ): # \u8bc4\u4f30\u8fc7\u7a0b\u4e2d\u6a21\u578b\u5f00\u542f\u8bc4\u4f30\u6a21\u5f0f\uff0c\u4e0d\u8fdb\u884c\u53cd\u5411\u4f20\u64ad model . eval () # \u4ecebatch\u4e2d\u53d6\u51fa\u6570\u636e\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f\u5b58\u4e8e\u5143\u7ec4\u4e2d batch = tuple ( t . to ( args . device ) for t in batch ) # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u5c06batch\u643a\u5e26\u7684\u6570\u636e\u4fe1\u606f\u8868\u793a\u79f0\u5b57\u5178\u5f62\u5f0f # \u8fd9\u4e9b\u6570\u636e\u4fe1\u606f\u548cload_and_cache_examples\u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u5bf9\u8c61\u4e2d\u4fe1\u606f\u76f8\u540c # \u8bcd\u6c47\u7684\u6620\u5c04\u6570\u503c, \u8bcd\u6c47\u7684\u7c7b\u578b\u6570\u503c(0\u62161, \u4ee3\u8868\u7b2c\u4e00\u53e5\u548c\u7b2c\u4e8c\u53e5\u8bdd) # \u6ce8\u610f\u529b\u63a9\u7801\u5f20\u91cf\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u6807\u7b7e inputs = { 'input_ids' : batch [ 0 ], 'attention_mask' : batch [ 1 ], 'token_type_ids' : batch [ 2 ], 'labels' : batch [ 3 ]} # \u5c06\u8be5\u5b57\u5178\u4f5c\u4e3a\u53c2\u6570\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u83b7\u5f97\u8f93\u51fa outputs = model ( ** inputs ) # \u83b7\u5f97\u635f\u5931\u548c\u9884\u6d4b\u5206\u5e03 tmp_eval_loss , logits = outputs # \u5c06\u635f\u5931\u7d2f\u52a0\u6c42\u5747\u503c eval_loss += tmp_eval_loss . mean () . item () # \u9a8c\u8bc1\u6b65\u6570\u7d2f\u52a0 nb_eval_steps += 1 # \u5982\u679c\u662f\u7b2c\u4e00\u6279\u6b21\u7684\u6570\u636e if preds is None : # \u7ed3\u679c\u5206\u5e03\u5c31\u662f\u6a21\u578b\u7684\u8f93\u51fa\u5206\u5e03 preds = logits . numpy () # \u8f93\u51fa\u771f\u5b9e\u6807\u7b7e\u503c\u4e3a\u8f93\u5165\u5bf9\u5e94\u7684labels out_label_ids = inputs [ 'labels' ] . numpy () else : # \u7ed3\u679c\u5206\u5e03\u5c31\u662f\u6bcf\u4e00\u6b21\u6a21\u578b\u8f93\u51fa\u5206\u5e03\u7ec4\u6210\u7684\u6570\u7ec4 preds = np . append ( preds , logits . numpy (), axis = 0 ) # \u8f93\u51fa\u771f\u5b9e\u6807\u7b7e\u503c\u4e3a\u6bcf\u4e00\u6b21\u8f93\u5165\u5bf9\u5e94\u7684labels\u7ec4\u6210\u7684\u6570\u7ec4 out_label_ids = np . append ( out_label_ids , inputs [ 'labels' ] . numpy (), axis = 0 ) # \u8ba1\u7b97\u6bcf\u4e00\u8f6e\u7684\u5e73\u5747\u635f\u5931 eval_loss = eval_loss / nb_eval_steps # \u53d6\u7ed3\u679c\u5206\u5e03\u4e2d\u6700\u5927\u7684\u503c\u5bf9\u5e94\u7684\u7d22\u5f15 preds = np . argmax ( preds , axis = 1 ) # \u4f7f\u7528compute_metrics\u8ba1\u7b97\u5bf9\u5e94\u7684\u8bc4\u4f30\u6307\u6807 result = compute_metrics ( eval_task , preds , out_label_ids ) # \u5728\u65e5\u5fd7\u4e2d\u6253\u5370\u6bcf\u4e00\u8f6e\u7684\u8bc4\u4f30\u7ed3\u679c logger . info ( \"***** Eval results {} *****\" ) logger . info ( str ( result )) except Exception as e : print ( e ) return result def load_and_cache_examples ( args , task , tokenizer ): \"\"\" \u52a0\u8f7d\u6216\u4f7f\u7528\u7f13\u5b58\u6570\u636e :param args: \u5168\u5c40\u914d\u7f6e\u53c2\u6570 :param task: \u4efb\u52a1\u540d :param tokenizer: \u6570\u503c\u6620\u5c04\u5668 \"\"\" # \u6839\u636e\u4efb\u52a1\u540d(MRPC)\u83b7\u5f97\u5bf9\u5e94\u6570\u636e\u9884\u5904\u7406\u5668 processor = processors [ task ]() # \u83b7\u5f97\u8f93\u51fa\u6a21\u5f0f output_mode = output_modes [ task ] # \u5b9a\u4e49\u7f13\u5b58\u6570\u636e\u6587\u4ef6\u7684\u540d\u5b57 cached_features_file = os . path . join ( args . data_dir , 'cached_{}_{}_{}_{}' . format ( 'dev' , list ( filter ( None , args . model_name_or_path . split ( '/' ))) . pop (), str ( args . max_seq_length ), str ( task ))) # \u5224\u65ad\u7f13\u5b58\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u4ee5\u53ca\u5168\u5c40\u914d\u7f6e\u4e2d\u662f\u5426\u9700\u8981\u91cd\u5199\u6570\u636e if os . path . exists ( cached_features_file ) and not args . overwrite_cache : # \u4f7f\u7528torch.load(\u89e3\u5e8f\u5217\u5316\uff0c\u4e00\u822c\u7528\u4e8e\u52a0\u8f7d\u6a21\u578b\uff0c\u5728\u8fd9\u91cc\u7528\u4e8e\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e)\u52a0\u8f7d\u7f13\u5b58\u6587\u4ef6 features = torch . load ( cached_features_file ) else : # \u5982\u679c\u6ca1\u6709\u7f13\u5b58\u6587\u4ef6\uff0c\u5219\u9700\u8981\u4f7f\u7528processor\u4ece\u539f\u59cb\u6570\u636e\u8def\u5f84\u4e2d\u52a0\u8f7d\u6570\u636e examples = processor . get_dev_examples ( args . data_dir ) # \u83b7\u53d6\u5bf9\u5e94\u7684\u6807\u7b7e label_list = processor . get_labels () # \u518d\u4f7f\u7528convert_examples_to_features\u751f\u6210\u6a21\u578b\u9700\u8981\u7684\u8f93\u5165\u5f62\u5f0f features = convert_examples_to_features ( examples , tokenizer , label_list = label_list , max_length = args . max_seq_length , output_mode = output_mode , pad_token = tokenizer . convert_tokens_to_ids ([ tokenizer . pad_token ])[ 0 ], ) logger . info ( \"Saving features into cached file %s \" , cached_features_file ) # \u5c06\u5176\u4fdd\u5b58\u81f3\u7f13\u5b58\u6587\u4ef6\u8def\u5f84\u4e2d torch . save ( features , cached_features_file ) # \u4e3a\u4e86\u6709\u6548\u5229\u7528\u5185\u5b58\uff0c\u4e4b\u540e\u5c06\u4f7f\u7528\u6570\u636e\u52a0\u8f7d\u5668\uff0c\u6211\u4eec\u9700\u8981\u5728\u8fd9\u91cc\u5c06\u5f20\u91cf\u6570\u636e\u8f6c\u6362\u6210\u6570\u636e\u8fed\u4ee3\u5668\u5bf9\u8c61TensorDatase # TensorDataset\uff1a\u7528\u4e8e\u81ea\u5b9a\u4e49\u8bad\u7ec3\u6570\u636e\u7ed3\u6784\u7684\u8fed\u4ee3\u5c01\u88c5\u5668\uff0c\u5b83\u53ef\u4ee5\u5c01\u88c5\u4efb\u4f55\u4e0e\u8bad\u7ec3\u6570\u636e\u6620\u5c04\u503c\u76f8\u5173\u7684\u6570\u636e #\uff08\u5982\uff1a\u8bad\u7ec3\u6570\u636e\u5bf9\u5e94\u7684\u6807\u7b7e\uff0c\u8bad\u7ec3\u6570\u636e\u4f7f\u7528\u7684\u63a9\u7801\u5f20\u91cf\uff0ctoken\u7684\u7c7b\u578bid\u7b49\uff09\uff0c # \u5b83\u4eec\u5fc5\u987b\u80fd\u8f6c\u6362\u6210\u5f20\u91cf\uff0c\u5c06\u540c\u8bad\u7ec3\u6570\u636e\u6620\u5c04\u503c\u4e00\u8d77\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u8fed\u4ee3\u4f7f\u7528\u3002 # \u4ee5\u4e0b\u662f\u5206\u522b\u628ainput_ids\uff0cattention_mask\uff0ctoken_type_ids\uff0clabel\u5c01\u88c5\u5728TensorDataset\u4e4b\u4e2d all_input_ids = torch . tensor ([ f . input_ids for f in features ], dtype = torch . long ) all_attention_mask = torch . tensor ([ f . attention_mask for f in features ], dtype = torch . long ) all_token_type_ids = torch . tensor ([ f . token_type_ids for f in features ], dtype = torch . long ) all_labels = torch . tensor ([ f . label for f in features ], dtype = torch . long ) dataset = TensorDataset ( all_input_ids , all_attention_mask , all_token_type_ids , all_labels ) # \u8fd4\u56de\u6570\u636e\u8fed\u4ee3\u5668\u5bf9\u8c61 return dataset \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u6a21\u578b\u91cf\u5316\u4e2d\u8c03\u7528\u8be5\u8bc4\u4f30\u51fd\u6570\u3002 \u4f7f\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f\u5bf9\u8bad\u7ec3\u540e\u7684bert\u6a21\u578b\u8fdb\u884c\u538b\u7f29 \u7b2c\u4e00\u6b65: \u5c06\u6a21\u578b\u5e94\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f \u7b2c\u4e8c\u6b65: \u5bf9\u6bd4\u538b\u7f29\u540e\u6a21\u578b\u7684\u5927\u5c0f \u7b2c\u4e09\u6b65: \u5bf9\u6bd4\u538b\u7f29\u540e\u7684\u6a21\u578b\u7684\u63a8\u7406\u51c6\u786e\u6027\u548c\u8017\u65f6 \u7b2c\u56db\u6b65: \u5e8f\u5217\u5316\u6a21\u578b\u4ee5\u4fbf\u4e4b\u540e\u4f7f\u7528 \u7b2c\u4e00\u6b65: \u5c06\u6a21\u578b\u5e94\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f \u5e94\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f: # \u4f7f\u7528torch.quantization.quantize_dynamic\u83b7\u5f97\u52a8\u6001\u91cf\u5316\u7684\u6a21\u578b # \u91cf\u5316\u7684\u7f51\u7edc\u5c42\u4e3a\u6240\u6709\u7684nn.Linear\u7684\u6743\u91cd\uff0c\u4f7f\u5176\u6210\u4e3aint8 quantized_model = torch . quantization . quantize_dynamic ( model , { torch . nn . Linear }, dtype = torch . qint8 ) # \u6253\u5370\u52a8\u6001\u91cf\u5316\u540e\u7684BERT\u6a21\u578b print ( quantized_model ) \u8f93\u51fa\u6548\u679c: ## \u6a21\u578b\u4e2d\u7684\u6240\u6709Linear\u5c42\u53d8\u6210\u4e86DynamicQuantizedLinear\u5c42 BertForSequenceClassification( (bert): BertModel( (embeddings): BertEmbeddings( (word_embeddings): Embedding(30522, 768, padding_idx=0) (position_embeddings): Embedding(512, 768) (token_type_embeddings): Embedding(2, 768) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) (encoder): BertEncoder( (layer): ModuleList( (0): BertLayer( (attention): BertAttention( (self): BertSelfAttention( (query): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (key): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (value): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (dropout): Dropout(p=0.1, inplace=False) ) (output): BertSelfOutput( (dense): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) (intermediate): BertIntermediate( (dense): DynamicQuantizedLinear(in_features=768, out_features=3072, scale=1.0, zero_point=0) ) (output): BertOutput( (dense): DynamicQuantizedLinear(in_features=3072, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) (1): BertLayer( (attention): BertAttention( (self): BertSelfAttention( (query): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (key): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (value): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (dropout): Dropout(p=0.1, inplace=False) ) (output): BertSelfOutput( (dense): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) (intermediate): BertIntermediate( (dense): DynamicQuantizedLinear(in_features=768, out_features=3072, scale=1.0, zero_point=0) ) (output): BertOutput( (dense): DynamicQuantizedLinear(in_features=3072, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) ... ... (11): BertLayer( (attention): BertAttention( (self): BertSelfAttention( (query): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (key): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (value): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (dropout): Dropout(p=0.1, inplace=False) ) (output): BertSelfOutput( (dense): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) (intermediate): BertIntermediate( (dense): DynamicQuantizedLinear(in_features=768, out_features=3072, scale=1.0, zero_point=0) ) (output): BertOutput( (dense): DynamicQuantizedLinear(in_features=3072, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) ) ) (pooler): BertPooler( (dense): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (activation): Tanh() ) ) (dropout): Dropout(p=0.1, inplace=False) (classifier): DynamicQuantizedLinear(in_features=768, out_features=2, scale=1.0, zero_point=0) ) \u7b2c\u4e8c\u6b65: \u5bf9\u6bd4\u538b\u7f29\u540e\u6a21\u578b\u7684\u5927\u5c0f def print_size_of_model ( model ): \"\"\"\u6253\u5370\u6a21\u578b\u5927\u5c0f\"\"\" # \u4fdd\u5b58\u6a21\u578b\u4e2d\u7684\u53c2\u6570\u90e8\u5206\u5230\u6301\u4e45\u5316\u6587\u4ef6 torch . save ( model . state_dict (), \"temp.p\" ) # \u6253\u5370\u6301\u4e45\u5316\u6587\u4ef6\u7684\u5927\u5c0f print ( 'Size (MB):' , os . path . getsize ( \"temp.p\" ) / 1e6 ) # \u79fb\u9664\u8be5\u6587\u4ef6 os . remove ( 'temp.p' ) # \u5206\u522b\u6253\u5370model\u548cquantized_model print_size_of_model ( model ) print_size_of_model ( quantized_model ) \u8f93\u51fa\u6548\u679c: ## \u6a21\u578b\u53c2\u6570\u6587\u4ef6\u5927\u5c0f\u7f29\u51cf\u4e86257MB Size (MB): 437.982584 Size (MB): 181.430351 \u7b2c\u4e09\u6b65: \u5bf9\u6bd4\u538b\u7f29\u540e\u7684\u6a21\u578b\u7684\u63a8\u7406\u51c6\u786e\u6027\u548c\u8017\u65f6 def time_model_evaluation ( model , configs , tokenizer ): \"\"\"\u83b7\u5f97\u6a21\u578b\u8bc4\u4f30\u7ed3\u679c\u548c\u8fd0\u884c\u65f6\u95f4\"\"\" # \u83b7\u5f97\u8bc4\u4f30\u524d\u65f6\u95f4 eval_start_time = time . time () # \u8fdb\u884c\u6a21\u578b\u8bc4\u4f30 result = evaluate ( configs , model , tokenizer ) # \u83b7\u5f97\u8bc4\u4f30\u540e\u65f6\u95f4 eval_end_time = time . time () # \u83b7\u5f97\u8bc4\u4f30\u8017\u65f6 eval_duration_time = eval_end_time - eval_start_time # \u6253\u5370\u6a21\u578b\u8bc4\u4f30\u7ed3\u679c print ( \"Evaluate result:\" , result ) # \u6253\u5370\u8017\u65f6 print ( \"Evaluate total time (seconds): {0:.1f}\" . format ( eval_duration_time )) \u8f93\u51fa\u6548\u679c: Evaluating: 100%|\u2588\u2588| 51/51 [01:36<00:00, 1.89s/it] Evaluate result: {'acc': 0.8161764705882353, 'f1': 0.8739495798319329, 'acc_and_f1': 0.8450630252100841} Evaluate total time (seconds): 96.4 Evaluating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 51/51 [00:43<00:00, 1.19it/s] Evaluate result: {'acc': 0.7965686274509803, 'f1': 0.8663446054750403, 'acc_and_f1': 0.8314566164630104} Evaluate total time (seconds): 43.0 \u7ed3\u8bba: \u5bf9\u6a21\u578b\u8fdb\u884c\u52a8\u6001\u91cf\u5316\u540e\uff0c\u53c2\u6570\u6587\u4ef6\u5927\u5c0f\u660e\u663e\u51cf\u5c11\u3002 \u52a8\u6001\u91cf\u5316\u540e\u7684\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8bc4\u4f30\u6307\u6807\u51e0\u4e4e\u4e0d\u53d8\uff0c\u4f46\u662f\u8017\u65f6\u5374\u53ea\u7528\u4e86\u539f\u6765\u7684\u4e00\u534a\u5de6\u53f3\u3002 \u7b2c\u56db\u6b65: \u5e8f\u5217\u5316\u6a21\u578b\u4ee5\u4fbf\u4e4b\u540e\u4f7f\u7528 # \u91cf\u5316\u6a21\u578b\u7684\u4fdd\u5b58\u8def\u5f84 quantized_output_dir = configs . output_dir + \"quantized/\" # \u5224\u65ad\u662f\u5426\u9700\u8981\u521b\u5efa\u8be5\u8def\u5f84 if not os . path . exists ( quantized_output_dir ): os . makedirs ( quantized_output_dir ) # \u4f7f\u7528save_pretrained\u4fdd\u5b58\u6a21\u578b quantized_model . save_pretrained ( quantized_output_dir ) \u8f93\u51fa\u6548\u679c: # \u5728bert_finetuning_test/\u76ee\u5f55\u4e0b - quantized/ - config.json - pytorch_model.bin \u9644\u5f55 run_glue.py\u5fae\u8c03\u811a\u672c\u4ee3\u7801 \u8bf7\u8bbf\u95ee: http://git.itcast.cn/Stephen/AI-key-file/blob/master/run_glue.py 7.2 \u6a21\u578b\u526a\u679d\u6280\u672f \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3\u6a21\u578b\u526a\u679d\u539f\u7406\u3002 \u638c\u63e1\u4f7f\u7528prune\u5bf9\u5df2\u6709\u6a21\u578b\u8fdb\u884c\u526a\u679d\u3002 \u526a\u679d\u6280\u672f\u4ecb\u7ecd\u4e0e\u539f\u7406 \u5f53\u524d\u5728NLP\u4efb\u52a1\u4e0a\u53d6\u5f97\u4f18\u5f02\u6210\u7ee9\u7684\u6a21\u578b\u5f80\u5f80\u662f\u62e5\u6709\u5927\u91cf\u53c2\u6570\u7684\u6a21\u578b\uff0c\u5982BERT\uff0cGPT\u7b49\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u751f\u7269\u7684\u9ad8\u5ea6\u6587\u660e\u662f\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u6709\u6548\u7684\u7a00\u758f\u8fde\u63a5\uff0c\u8fd9\u6b63\u662f\u201c\u526a\u679d\u6280\u672f\u201d\u7684\u53d1\u5c55\u8d77\u6e90\u3002\u800c\u6240\u8c13\u526a\u679d\u6280\u672f\u539f\u7406\uff0c\u4e5f\u5c31\u662f\u5c06\u73b0\u6709\u6a21\u578b\u4e2d\u7684\u67d0\u4e9b\u53c2\u6570\u8bbe\u7f6e\u4e3a0\uff0c\u7b49\u6548\u4e8e\u8fd9\u4e9b\u795e\u7ecf\u5143\u5931\u6d3b\u3002\u800c\u53c2\u6570\u7f6e0\u7684\u65b9\u5f0f\u662f\u4f7f\u7528MASK\u8499\u7248\uff08\u8499\u72480\u4f4d\u7f6e\u5f97\u52300\uff0c1\u4f4d\u7f6e\u5f97\u5230\u539f\u6765\u7684\u503c\uff09\u3002\u4e0b\u9762\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u79cd\u6280\u672f\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 \u4f7f\u7528prune\u5bf9\u5df2\u6709\u6a21\u578b\u8fdb\u884c\u526a\u679d \u6211\u4eec\u5c06\u4f7f\u7528torch.nn.utils.prune\u4e2d\u7684\u65b9\u6cd5\u8fdb\u884c\u7f51\u7edc\u7a00\u758f\u5316\uff0c\u5373\u526a\u679d\u3002 \u8981\u6c42torch\u7248\u672c\u5e94\u8be5>= 1.4.0\u3002 pip install torch> = 1 .4.0 \u526a\u679d\u7684\u8bb2\u89e3\u5c06\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5de5\u5177\u5305\u5e76\u83b7\u5f97\u6a21\u578b \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528\u526a\u679d\u5de5\u5177\u5e76\u4e86\u89e3\u5176\u4f5c\u7528\u65b9\u5f0f \u7b2c\u4e09\u6b65\uff1a\u6301\u4e45\u5316\u4fee\u526a\u540e\u7684\u6a21\u578b \u7b2c\u56db\u6b65\uff1a\u5de5\u7a0b\u4e2d\u5e38\u7528\u7684\u4fee\u526a\u65b9\u6cd5 \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5de5\u5177\u5305\u5e76\u83b7\u5f97\u6a21\u578b \u8fd9\u91cc\u6211\u4eec\u5c06\u4f7f\u7528LeNet\u4f5c\u4e3a\u526a\u679d\u7684\u5bf9\u8c61\uff0c\u5f53\u7136\u4f60\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u4f60\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u67d0\u4e2a\u7f51\u7edc\u548c\u53c2\u6570\u3002 # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import torch from torch import nn import torch.nn.utils.prune as prune import torch.nn.functional as F device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) # \u8fd9\u91cc\u4e0d\u518d\u5bf9LeNet\u7f51\u7edc\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u91cd\u70b9\u662f\u526a\u679d\u6280\u672f # \u65e0\u8bba\u4f60\u4f7f\u7528\u54ea\u4e00\u79cd\u7f51\u7edc\u8fdb\u884c\u526a\u679d\uff0c\u4f60\u5fc5\u987b\u719f\u77e5\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u7684\u7ec4\u6210\u90e8\u5206\u5373\u54ea\u4e9b\u80fd\u591f\u526a\u679d # \u6bd4\u5982\u5728\u8fd9\u91cc\uff0cconv1\uff0cconv2\uff0cfc1\uff0cfc2\uff0cfc3\u90fd\u662f\u53ef\u4ee5\u88ab\u526a\u679d\u7684 class LeNet ( nn . Module ): def __init__ ( self ): super ( LeNet , self ) . __init__ () self . conv1 = nn . Conv2d ( 1 , 6 , 3 ) self . conv2 = nn . Conv2d ( 6 , 16 , 3 ) self . fc1 = nn . Linear ( 16 * 5 * 5 , 120 ) # 5x5 image dimension self . fc2 = nn . Linear ( 120 , 84 ) self . fc3 = nn . Linear ( 84 , 10 ) def forward ( self , x ): x = F . max_pool2d ( F . relu ( self . conv1 ( x )), ( 2 , 2 )) x = F . max_pool2d ( F . relu ( self . conv2 ( x )), 2 ) x = x . view ( - 1 , int ( x . nelement () / x . shape [ 0 ])) x = F . relu ( self . fc1 ( x )) x = F . relu ( self . fc2 ( x )) x = self . fc3 ( x ) return x # \u83b7\u5f97\u8fd9\u4e2a\u6a21\u578b\u5bf9\u8c61 model = LeNet () . to ( device = device ) \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528\u526a\u679d\u5de5\u5177\u5e76\u4e86\u89e3\u5176\u4f5c\u7528\u65b9\u5f0f \u4e0b\u9762\u6211\u4eec\u4f1a\u4f7f\u7528\u526a\u679d\u5de5\u5177\u5e76\u9010\u6b65\u67e5\u770b\u53c2\u6570\u7684\u53d8\u5316\uff0c\u5148\u6765\u770b\u770b\u6ca1\u6709\u526a\u679d\u4e4b\u524d\u7684\u72b6\u6001\u3002 # \u83b7\u5f97conv1\u6a21\u5757 module = model . conv1 # \u67e5\u770b\u8be5\u6a21\u5757\u7684\u6240\u6709\u539f\u751f\u53c2\u6570\uff0c\u4e00\u822c\u7531\u539f\u751fweight\u548c\u539f\u751fbias\u7ec4\u6210 # \u4ec0\u4e48\u662f\u539f\u751f\u53c2\u6570\u5462\uff1f # \u8fd9\u91cc\u662f\u56e0\u4e3atorch\u5728\u8bbe\u8ba1\u5b58\u50a8\u7f51\u7edc\u53c2\u6570\u65f6\uff0c\u5141\u8bb8\u4e3a\u53c2\u6570\u6dfb\u52a0\u4fee\u6539\u65b9\u5f0f\uff08\u5982\u8499\u7248\uff09\uff0c # \u8fd9\u4e9b\u4fee\u6539\u65b9\u5f0f\u4ee5buffer\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f5c\u7528\u5728named_parameters\u4e2d\u7684\u53c2\u6570\u4e0a\uff0c # \u56e0\u6b64\u628anamed_parameters\u4e2d\u7684\u53c2\u6570\u53eb\u505a\u539f\u751f\u53c2\u6570\u3002 # \u90a3\u5982\u4f55\u83b7\u5f97\u4f5c\u7528\u4e86buffer\u4e4b\u540e\u7684\u771f\u5b9e\u53c2\u6570\u5462\uff1f # \u4f7f\u7528module.weight\u548cmodule.bias\u5373\u53ef print ( list ( module . named_parameters ())) \u8f93\u51fa\u6548\u679c\uff1a [('weight', Parameter containing: tensor([[[[ 0.3161, -0.2212, 0.0417], [ 0.2488, 0.2415, 0.2071], [-0.2412, -0.2400, -0.2016]]], [[[ 0.0419, 0.3322, -0.2106], [ 0.1776, -0.1845, -0.3134], [-0.0708, 0.1921, 0.3095]]], [[[-0.2070, 0.0723, 0.2876], [ 0.2209, 0.2077, 0.2369], [ 0.2108, 0.0861, -0.2279]]], [[[-0.2799, -0.1527, -0.0388], [-0.2043, 0.1220, 0.1032], [-0.0755, 0.1281, 0.1077]]], [[[ 0.2035, 0.2245, -0.1129], [ 0.3257, -0.0385, -0.0115], [-0.3146, -0.2145, -0.1947]]], [[[-0.1426, 0.2370, -0.1089], [-0.2491, 0.1282, 0.1067], [ 0.2159, -0.1725, 0.0723]]]], device='cuda:0', requires_grad=True)), ('bias', Parameter containing: tensor([-0.1214, -0.0749, -0.2656, -0.1519, -0.1021, 0.1425], device='cuda:0', requires_grad=True))] # \u67e5\u770b\u53c2\u6570\u4fee\u6539\u65b9\u5f0f\u5373buffer # \u6ca1\u6709buffer\u7684\u539f\u751f\u53c2\u6570\u5c31\u662f\u771f\u5b9e\u53c2\u6570 print ( list ( module . named_buffers ())) \u8f93\u51fa\u6548\u679c\uff1a [] \u4f7f\u7528prune.random_unstructured\u968f\u673a\u65b9\u5f0f\u8fdb\u884c\u526a\u679d # \u526a\u679d\u6307\u5b9amoudle\u5373conv1\u4e2d\u7684weight\u53c2\u6570\uff0c\u4fee\u526a\uff08\u8bbe\u7f6e\u4e3a0\uff0930% prune . random_unstructured ( module , name = \"weight\" , amount = 0.3 ) # \u67e5\u770b\u4fee\u526a\u540e\u7684named_parameters\u53c2\u6570 print ( list ( module . named_parameters ())) \u8f93\u51fa\u6548\u679c\uff1a [('bias', Parameter containing: tensor([-0.1214, -0.0749, -0.2656, -0.1519, -0.1021, 0.1425], device='cuda:0', requires_grad=True)), ('weight_orig', Parameter containing: tensor([[[[ 0.3161, -0.2212, 0.0417], [ 0.2488, 0.2415, 0.2071], [-0.2412, -0.2400, -0.2016]]], [[[ 0.0419, 0.3322, -0.2106], [ 0.1776, -0.1845, -0.3134], [-0.0708, 0.1921, 0.3095]]], [[[-0.2070, 0.0723, 0.2876], [ 0.2209, 0.2077, 0.2369], [ 0.2108, 0.0861, -0.2279]]], [[[-0.2799, -0.1527, -0.0388], [-0.2043, 0.1220, 0.1032], [-0.0755, 0.1281, 0.1077]]], [[[ 0.2035, 0.2245, -0.1129], [ 0.3257, -0.0385, -0.0115], [-0.3146, -0.2145, -0.1947]]], [[[-0.1426, 0.2370, -0.1089], [-0.2491, 0.1282, 0.1067], [ 0.2159, -0.1725, 0.0723]]]], device='cuda:0', requires_grad=True))] \u5728\u7ed3\u679c\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u539f\u751f\u53c2\u6570\u5e76\u6ca1\u6709\u53d8\u5316\uff0c\u800c\u662f\u540d\u5b57\u7531weight\u53d8\u6210\u4e86weight_orig\uff0c\u8fdb\u4e00\u6b65\u5f3a\u8c03\u4e86\u5b83\u662f\u539f\u751f\u53c2\u6570\u3002 \u4e3a\u4ec0\u4e48\u8981\u8fdb\u4e00\u6b65\u5f3a\u8c03\u539f\u751f\u5462\uff0c\u662f\u56e0\u4e3a\u6b64\u65f6buffer\u4e2d\u5df2\u7ecf\u591a\u4e86\u4e00\u4e9b\u4fe1\u606f\uff0c\u539f\u751f\u53c2\u6570\u548c\u771f\u5b9e\u53c2\u6570\u5df2\u7ecf\u4e0d\u518d\u7b49\u4ef7\u3002 print ( list ( module . named_buffers ())) \u8f93\u51fa\u6548\u679c\uff1a [('weight_mask', tensor([[[[0., 1., 0.], [1., 0., 0.], [1., 1., 1.]]], [[[1., 0., 1.], [1., 1., 0.], [1., 0., 1.]]], [[[1., 0., 0.], [0., 1., 1.], [1., 1., 1.]]], [[[1., 0., 0.], [1., 1., 1.], [1., 1., 1.]]], [[[1., 0., 1.], [1., 1., 1.], [0., 1., 1.]]], [[[1., 1., 1.], [1., 1., 0.], [1., 1., 0.]]]], device='cuda:0'))] buffer\u4e2d\u5df2\u7ecf\u5b58\u5728\u4e86\u7528\u4e8e\u526a\u679d\u7684\u8499\u7248 \u4f7f\u7528module.weight\u67e5\u770b\u771f\u5b9e\u4f7f\u7528\u53c2\u6570\uff1a print ( module . weight ) \u8f93\u51fa\u6548\u679c\uff1a tensor([[[[ 0.0000, -0.2212, 0.0000], [ 0.2488, 0.0000, 0.0000], [-0.2412, -0.2400, -0.2016]]], [[[ 0.0419, 0.0000, -0.2106], [ 0.1776, -0.1845, -0.0000], [-0.0708, 0.0000, 0.3095]]], [[[-0.2070, 0.0000, 0.0000], [ 0.0000, 0.2077, 0.2369], [ 0.2108, 0.0861, -0.2279]]], [[[-0.2799, -0.0000, -0.0000], [-0.2043, 0.1220, 0.1032], [-0.0755, 0.1281, 0.1077]]], [[[ 0.2035, 0.0000, -0.1129], [ 0.3257, -0.0385, -0.0115], [-0.0000, -0.2145, -0.1947]]], [[[-0.1426, 0.2370, -0.1089], [-0.2491, 0.1282, 0.0000], [ 0.2159, -0.1725, 0.0000]]]], device='cuda:0', grad_fn=<MulBackward0>) \u7b2c\u4e09\u6b65\uff1a\u6301\u4e45\u5316\u4fee\u526a\u540e\u7684\u6a21\u578b \u5047\u5982\u4f60\u5df2\u7ecf\u5bf9\u526a\u679d\u540e\u7684\u6a21\u578b\u8fdb\u884c\u4e86\u5fc5\u8981\u7684\u9a8c\u8bc1\uff0c\u5e76\u89c9\u5f97\u5b83\u53ef\u4ee5\u88ab\u4fdd\u5b58\u5e76\u5728\u5c06\u6765\u90e8\u7f72\u4f7f\u7528\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u6301\u4e45\u5316\u6a21\u578b\u3002 # \u4e00\u822c\u6211\u4eec\u4f1a\u9996\u5148\u5c06buffer\u4e2d\u7684\u8499\u7248\u6c38\u4e45\u4f5c\u7528\u5728name_parameters\u4e2d\u7684\u53c2\u6570\u4e0a # \u8fd9\u91cc\u7684remove\u4e0d\u662f\u79fb\u9664\uff0c\u800c\u662f\u6c38\u4e45\u5316 prune . remove ( module , 'weight' ) print ( list ( module . named_parameters ())) \u8f93\u51fa\u6548\u679c\uff1a [('bias_orig', Parameter containing: tensor([-0.1214, -0.0749, -0.2656, -0.1519, -0.1021, 0.1425], device='cuda:0', requires_grad=True)), ('weight', Parameter containing: tensor([[[[ 0.0000, -0.2212, 0.0000], [ 0.2488, 0.0000, 0.0000], [-0.2412, -0.2400, -0.2016]]], [[[ 0.0000, 0.0000, -0.0000], [ 0.0000, -0.0000, -0.0000], [-0.0000, 0.0000, 0.0000]]], [[[-0.2070, 0.0000, 0.0000], [ 0.0000, 0.2077, 0.2369], [ 0.2108, 0.0861, -0.2279]]], [[[-0.0000, -0.0000, -0.0000], [-0.0000, 0.0000, 0.0000], [-0.0000, 0.0000, 0.0000]]], [[[ 0.2035, 0.0000, -0.1129], [ 0.3257, -0.0385, -0.0115], [-0.0000, -0.2145, -0.1947]]], [[[-0.0000, 0.0000, -0.0000], [-0.0000, 0.0000, 0.0000], [ 0.0000, -0.0000, 0.0000]]]], device='cuda:0', requires_grad=True))] print ( list ( module . named_buffers ())) \u8f93\u51fa\u6548\u679c\uff1a [] \u6b64\u65f6buffer\u4e2d\u5df2\u7ecf\u6ca1\u6709\u4efb\u4f55\u4fee\u6539\uff0c\u6b64\u65f6\u539f\u751f\u53c2\u6570\u548c\u771f\u5b9e\u53c2\u6570\u7b49\u4ef7\u3002 \u4fdd\u5b58\u5e8f\u5217\u5316\u6a21\u578b\uff1a PATH = \"./model.pth\" torch . save ( model . state_dict (), PATH ) print ( model . state_dict () . keys ()) \u8f93\u51fa\u6548\u679c\uff1a odict_keys(['conv1.bias', 'conv1.weight', 'conv2.weight', 'conv2.bias', 'fc1.weight', 'fc1.bias', 'fc2.weight', 'fc2.bias', 'fc3.weight', 'fc3.bias']) \u5b9e\u9645\u4e0a\u5047\u5982\u4f60\u4e0d\u8fdb\u884cprune.remove\u64cd\u4f5c\uff0c\u76f4\u63a5\u4fdd\u5b58state_dict()\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3abuffer\u4e5f\u53ef\u4ee5\u88ab\u4fdd\u5b58\u5728state_dict\u4e2d\uff0c\u56e0\u4e3a\u526a\u679d\u540e\u5f80\u5f80\u9700\u8981\u7ee7\u7eed\u91cd\u65b0\u8bad\u7ec3\uff0c\u4e00\u822c\u76f4\u5230\u6700\u540e\u5224\u65ad\u526a\u679d\u6a21\u578b\u53ef\u7528\u624d\u4f7f\u7528remove\u6c38\u4e45\u5316\u526a\u679d\u53c2\u6570\u3002 \u7b2c\u56db\u6b65\uff1a\u5de5\u7a0b\u4e2d\u5e38\u7528\u7684\u4fee\u526a\u65b9\u6cd5 \u521a\u521a\u6211\u4eec\u5b66\u4e60\u7684\u90fd\u662f\u201c\u5c40\u90e8\u201d\u7684\u526a\u679d\u65b9\u5f0f\uff0c\u800c\u5b9e\u9645\u5de5\u7a0b\u4e2d\u6211\u4eec\u5f80\u5f80\u76f4\u63a5\u9488\u5bf9\u6a21\u578b\u8fdb\u884c\u6574\u4f53\u526a\u679d\u3002\u4e0b\u9762\u5c31\u662f\u6574\u4f53\u526a\u679d\u7684\u65b9\u6cd5\uff1a # \u83b7\u5f97\u6a21\u578b model = LeNet () # \u7528\u5143\u7ec4\u6307\u5b9a\u9700\u8981\u526a\u679d\u7684\u5c42\u548c\u53c2\u6570\u7c7b\u578b parameters_to_prune = ( ( model . conv1 , 'weight' ), ( model . conv2 , 'weight' ), ( model . fc1 , 'weight' ), ( model . fc2 , 'weight' ), ( model . fc3 , 'weight' ), ) # \u8fdb\u884c\u5168\u5c40\u526a\u679d\uff0c\u53c2\u6570\u5206\u522b\u662f\u9700\u8981\u526a\u679d\u7684\u5c42\u548c\u53c2\u6570\u7c7b\u578b\uff0c\u526a\u679d\u65b9\u6cd5\uff0c\u526a\u679d\u6bd4\u4f8b # \u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u526a\u679d\u540e\u7684\u6a21\u578b\uff0c\u8fd9\u91cc\u76840.2\u662f\u6574\u4f53\u768420%\uff0c\u5404\u4e2a\u90e8\u5206\u526a\u679d\u572820%\u5de6\u53f3 # \u8fd9\u91cc\u4f7f\u7528\u4e86L1\u526a\u679d prune . global_unstructured ( parameters_to_prune , pruning_method = prune . L1Unstructured , amount = 0.2 , ) print ( model . state_dict () . keys ()) print ( \"#################\" ) # \u6c38\u4e45\u5316\u53c2\u6570 for module , name in parameters_to_prune : prune . remove ( module , name ) print ( model . state_dict () . keys ()) \u8f93\u51fa\u6548\u679c\uff1a dict_keys(['conv1.bias', 'conv1.weight', 'conv2.weight', 'conv2.bias', 'fc1.weight', 'fc1.bias', 'fc2.weight', 'fc2.bias', 'fc3.weight', 'fc3.bias']) odict_keys(['conv1.bias', 'conv1.weight_orig', 'conv1.weight_mask', 'conv2.bias', 'conv2.weight_orig', 'conv2.weight_mask', 'fc1.bias', 'fc1.weight_orig', 'fc1.weight_mask', 'fc2.bias', 'fc2.weight_orig', 'fc2.weight_mask', 'fc3.bias', 'fc3.weight_orig', 'fc3.weight_mask']) ################# odict_keys(['conv1.bias', 'conv1.weight', 'conv2.weight', 'conv2.bias', 'fc1.weight', 'fc1.bias', 'fc2.weight', 'fc2.bias', 'fc3.weight', 'fc3.bias']) odict_keys(['conv1.bias', 'conv1.weight', 'conv2.bias', 'conv2.weight', 'fc1.bias', 'fc1.weight', 'fc2.bias', 'fc2.weight', 'fc3.bias', 'fc3.weight']) \u68c0\u67e5\u4e00\u4e0b\u5168\u5c40\u526a\u679d\u768420%\u5728\u5404\u4e2a\u5c42\u4e2d\u526a\u679d\u5360\u6bd4: print ( \"Sparsity in conv1.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . conv1 . weight == 0 )) / float ( model . conv1 . weight . nelement ()) ) ) print ( \"Sparsity in conv2.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . conv2 . weight == 0 )) / float ( model . conv2 . weight . nelement ()) ) ) print ( \"Sparsity in fc1.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . fc1 . weight == 0 )) / float ( model . fc1 . weight . nelement ()) ) ) print ( \"Sparsity in fc2.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . fc2 . weight == 0 )) / float ( model . fc2 . weight . nelement ()) ) ) print ( \"Sparsity in fc3.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . fc3 . weight == 0 )) / float ( model . fc3 . weight . nelement ()) ) ) print ( \"Global sparsity: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . conv1 . weight == 0 ) + torch . sum ( model . conv2 . weight == 0 ) + torch . sum ( model . fc1 . weight == 0 ) + torch . sum ( model . fc2 . weight == 0 ) + torch . sum ( model . fc3 . weight == 0 ) ) / float ( model . conv1 . weight . nelement () + model . conv2 . weight . nelement () + model . fc1 . weight . nelement () + model . fc2 . weight . nelement () + model . fc3 . weight . nelement () ) ) ) \u8f93\u51fa\u6548\u679c\uff1a Sparsity in conv1.weight: 7.41% Sparsity in conv2.weight: 9.49% Sparsity in fc1.weight: 22.00% Sparsity in fc2.weight: 12.28% Sparsity in fc3.weight: 9.76% Global sparsity: 20.00% \u5e38\u7528\u7684\u526a\u679d\u65b9\u5f0f\u89e3\u91ca\uff1a RandomUnstructured\uff1a\u968f\u673a\u526a\u679d L1Unstructured\uff1a\u6309\u7167L1\u8303\u6570\uff08\u7edd\u5bf9\u503c\u5927\u5c0f\uff09\u526a\u679d\uff0c\u56e0\u4e3a\u6570\u503c\u8d8a\u5c0f\u5bf9\u7ed3\u679c\u7684\u6270\u52a8\u4e5f\u8d8a\u5c0f\u3002 \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u6a21\u578b\u526a\u679d\u539f\u7406 \u5b66\u4e60\u4e86\u4f7f\u7528prune\u5bf9\u5df2\u6709\u6a21\u578b\u8fdb\u884c\u526a\u679d \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5de5\u5177\u5305\u5e76\u83b7\u5f97\u6a21\u578b \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528\u526a\u679d\u5de5\u5177\u5e76\u4e86\u89e3\u5176\u4f5c\u7528\u65b9\u5f0f \u7b2c\u4e09\u6b65\uff1a\u6301\u4e45\u5316\u4fee\u526a\u540e\u7684\u6a21\u578b \u7b2c\u56db\u6b65\uff1a\u5de5\u7a0b\u4e2d\u5e38\u7528\u7684\u4fee\u526a\u65b9\u6cd5 7.3 \u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u63a8\u65ad\u52a0\u901f \u5b66\u4e60\u76ee\u6807 \u4e86\u89e3ONNX\u53ca\u5176ONNX-Runtime\u7684\u4e3b\u8981\u4f5c\u7528\u3002 \u638c\u63e1\u5982\u4f55\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u63a8\u65ad\u52a0\u901f\u3002 \u4ec0\u4e48\u662fONNX\u548cONNX-Runtime ONNX\uff08Open Neural Network Exchange\uff09\u5f00\u653e\u5f0f\u795e\u7ecf\u7f51\u7edc\u4ea4\u6362\u683c\u5f0f\uff0c\u4e0etorch\u7684pth\uff0ckeras\u7684h5\uff0ctensorflow\u7684pb\u4e00\u6837\uff0c\u5b83\u5c5e\u4e8e\u4e00\u79cd\u6a21\u578b\u683c\u5f0f\u3002 \u8fd9\u79cd\u4ea4\u6362\u683c\u5f0f\u88ab\u8bbe\u8ba1\u7684\u521d\u8877\uff1a\u5e0c\u671b\u5404\u79cd\u6a21\u578b\u6846\u67b6\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u80fd\u591f\u901a\u7528\u3002\u800c\u73b0\u5728\u5b83\u5df2\u7ecf\u7ed3\u5408ONNX-Runtime\u6210\u4e3a\u4e00\u79cd\u52a0\u901f\u6a21\u578b\u63a8\u7406\u7684\u65b9\u6cd5\u3002 ONNX-Runtime\u5c31\u662f\u6307ONNX\u683c\u5f0f\u6a21\u578b\u7684\u8fd0\u884c\u73af\u5883\uff0c\u5b83\u7531\u5fae\u8f6f\u5f00\u6e90\uff0c\u8be5\u73af\u5883\u96c6\u6210\u591a\u79cd\u6a21\u578b\u52a0\u901f\u5de5\u5177\uff0c\u5982Nvidia\u7684TensorRT\u7b49\uff0c\u7528\u4e8e\u5feb\u901f\u6a21\u578b\u63a8\u65ad\u3002 \u80fd\u591f\u539f\u751f\u652f\u6301ONNX\u6a21\u578b\u8f6c\u6362\u7684\u6a21\u578b\u5305\u62ecPytorch\uff0cMXNET\uff0cCaffe2\u7b49\u6846\u67b6\uff08Tensorflow\u4e0d\u53ef\u4ee5\uff09\u3002 \u56fe\u4e2d\uff0c\u84dd\u8272\u7684\u90e8\u5206\u5c31\u662fONNX-Runtime\uff0c\u5b83\u80fd\u591f\u81ea\u52a8\u5229\u7528\u5df2\u6709\u8bbe\u5907\u4e0a\u7684\u5404\u79cd\u52a0\u901f\u5de5\u5177\uff0c\u5b8c\u6210\u6a21\u578b\u52a0\u901f\uff0c\u65e0\u9700\u4eba\u5de5\u53c2\u4e0e\uff0c\u53ea\u9700\u8981\u6211\u4eec\u5c06ONNX\u683c\u5f0f\u7684\u6a21\u578b\u4f5c\u4e3a\u8f93\u5165\u5373\u53ef\u3002 \u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u63a8\u65ad\u52a0\u901f\u7684\u6b65\u9aa4 \u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177\u5305 \u7b2c\u4e8c\u6b65\uff1a\u5c06\u5df2\u6709\u6a21\u578b\u8f6c\u6362\u6210ONNX\u683c\u5f0f \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u9884\u6d4b \u7b2c\u56db\u6b65\uff1a\u5bf9\u6bd4\u7ed3\u679c\u5dee\u5f02\u548c\u63a8\u65ad\u65f6\u95f4 \u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177\u5305 # onnx 1.7.0 # onnxruntime 1.4.0 pip install onnx onnxruntime \u7b2c\u4e8c\u6b65\uff1a\u5c06\u5df2\u6709\u6a21\u578b\u8f6c\u6362\u6210ONNX\u683c\u5f0f import torch import torch.onnx import torchvision # \u8fd9\u91cc\u4ee5resnet18\u6a21\u578b\u4e3a\u4f8b model = torchvision . models . resnet18 ( pretrained = True ) # \u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2a\u6307\u5b9ashape\u7684\u8f93\u5165 input = torch . randn ( 1 , 3 , 224 , 224 , requires_grad = True ) # \u8bc4\u4f30\u6a21\u5f0f model . eval () # \u5b9a\u4e49onnx\u8f93\u5165\u8f93\u51fa\u7684\u540d\u5b57\uff08\u683c\u5f0f\u9700\u8981\uff09 input_names = [ \"input1\" ] output_names = [ \"output1\" ] onnx_model_name = \"resnet18.onnx\" # \u4f7f\u7528torch.onnx\u5bfc\u51faresnet18.onnx torch . onnx . export ( model , input , onnx_model_name , input_names = input_names , output_names = output_names ) \u8f93\u51fa\u6548\u679c: \u5728\u8be5\u811a\u672c\u8def\u5f84\u4e0b\u5f97\u5230resnet18.onnx\u683c\u5f0f\u7684\u6a21\u578b\u3002 \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u9884\u6d4b import onnxruntime # \u5f53\u524donnxruntime\u7684\u8f93\u5165\u8981\u6c42\u7684\u4e3anumpy\u5f62\u5f0f def to_numpy ( tensor ): \"\"\"\u5c06tensor\u8f6c\u5316\u6210numpy\"\"\" return tensor . detach () . cpu () . numpy () if tensor . requires_grad else tensor . cpu () . numpy () # \u4f7f\u7528\u6a21\u578b\u521b\u5efaonnxruntime\u7684session ort_session = onnxruntime . InferenceSession ( onnx_model_name ) # \u5728session\u4e2d\u8fd0\u884c\uff0c\u8981\u6c42\u8f93\u5165\u4e3adict\u5f62\u5f0f\uff0ckey\u4e3a\u4e4b\u524d\u5b9a\u4e49\u597d\u7684input\u540d\u5b57\uff0c\u4e14input\u5fc5\u987b\u4e3anumpy\u5f62\u5f0f ort_outs = ort_session . run ( None , { ort_session . get_inputs ()[ 0 ] . name : to_numpy ( input )}) \u7b2c\u56db\u6b65\uff1a\u5bf9\u6bd4\u7ed3\u679c\u5dee\u5f02\u548c\u63a8\u65ad\u65f6\u95f4 # pth\u6a21\u578b\u7684\u7ed3\u679c torch_out = to_numpy ( model ( input )) # onnx\u6a21\u578b\u7684\u7ed3\u679c ort_out = ort_outs [ 0 ] print ( torch_out ) print () print ( ort_out ) \u8f93\u51fa\u6548\u679c: ## \u7ed3\u679c\u662f\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5dee\u5f02 [[ 6.46063685e-01 2.58094740e+00 2.67934680e+00 2.84586716e+00 4.45001364e+00 3.60939002e+00 3.51634717e+00 2.71348268e-01 -1.15397012e+00 -7.00954318e-01 -7.89242506e-01 9.08504605e-01 1.55155942e-01 1.08485329e+00 1.31591737e+00 5.42257011e-01]] [[ 6.46063685e-01 2.58094740e+00 2.67934680e+00 2.84586716e+00 4.45001364e+00 3.60939002e+00 3.51634717e+00 2.71348268e-01 -1.15397012e+00 -7.00954318e-01 -7.89242506e-01 9.08504605e-01 1.55155942e-01 1.08485329e+00 1.31591737e+00 5.42257011e-01]] import time # \u5bf9\u6bd4\u4e24\u8005\u5728CPU\u4e0a\u7684\u9884\u6d4b\u65f6\u95f4\u5dee\u5f02 # \u4e8c\u8005\u5728GPU\u4e0a\u7684\u8868\u73b0\u76f8\u5f53\uff0c\u56e0\u4e3aonnxruntime\u672c\u8eab\u4e5f\u662f\u8c03\u7528cuda start = time . time () torch_out = model ( input ) end = time . time () print ( end - start ) start = time . time () ort_outs = ort_session . run ( None , { \"input1\" : to_numpy ( input )}) end = time . time () print ( end - start ) \u8f93\u51fa\u6548\u679c: # pth\u6a21\u578b\u63a8\u65ad\u65f6\u95f4\u4e3a24.6ms 0.024605449676513672 # onnx\u4ec5\u97008.5ms\uff0c\u5927\u7ea6\u8282\u77012-3\u500d\u65f6\u95f4 0.008518030548095703 ONNX-Runtime\u80fd\u591f\u52a0\u901f\u7684\u539f\u7406 \u4e0b\u9762\u4ee5\u5176\u8c03\u7528TensorRT(nvidia\u52a0\u901f\u5de5\u5177)\u52a0\u901fBERT\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e\uff1a \u5728BERT\u7f16\u7801\u5668\u4e2d\uff0c\u5c06LayerNormalization\u5c42\u548c\u6b8b\u5dee\u8fde\u63a5\u8fdb\u884c\u878d\u5408\u4ee5\u52a0\u901f\u8ba1\u7b97\u3002 \u5bf9gelu\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528 \u7b80\u5316gelu \u8ba1\u7b97\u65b9\u6cd5\u52a0\u901f\u8ba1\u7b97\u3002 \u5bf9\u6240\u6709\u7684self-attention layer\u4e2d\u7684\u5168\u8fde\u63a5\u5c42\u8fdb\u884c\u878d\u5408\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u548c\u6b63\u53cd\u5411\u4f20\u64ad\u6b21\u6570\u52a0\u901f\u8ba1\u7b97\u3002 ONNX-Runtime\u5185\u7f6e\u9488\u5bf9\u4e3b\u6d41\u6a21\u578b\uff08BERT\uff0cRESNET\u7b49\uff09\u7684\u5e76\u884c\u8ba1\u7b97\u6a21\u5f0f\uff0c\u5b9e\u73b0\u52a0\u901f\u8ba1\u7b97\u3002 \u5c0f\u8282\u603b\u7ed3 \u5b66\u4e60\u4e86\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u63a8\u65ad\u52a0\u901f\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177\u5305 \u7b2c\u4e8c\u6b65\uff1a\u5c06\u5df2\u6709\u6a21\u578b\u8f6c\u6362\u6210ONNX\u683c\u5f0f \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u9884\u6d4b \u7b2c\u56db\u6b65\uff1a\u5bf9\u6bd4\u7ed3\u679c\u5dee\u5f02\u548c\u63a8\u65ad\u65f6\u95f4 ONNX-Runtime\u80fd\u591f\u52a0\u901f\u7684\u539f\u56e0\uff1a 1\uff0c\u4f5c\u4e3a\u52a0\u901f\u5de5\u5177\u7684\u96c6\u6210\u73af\u5883\uff0c\u80fd\u591f\u81ea\u52a8\u8c03\u7528\u52a0\u901f\u5de5\u5177cuda\uff0cTensorRT\uff0cnGragh\u7b49\u3002 2\uff0c\u5bf9\u7279\u5b9a\u6a21\u578b\u7684\u5c42\u548c\u5f20\u91cf\u8fdb\u884c\u878d\u5408\uff0c\u4ee5\u51cf\u5c11\u6b63\u53cd\u5411\u4f20\u64ad\u6b21\u6570\u3002 3\uff0c\u5bf9\u7279\u5b9a\u6fc0\u6d3b\u51fd\u6570gelu\u8fdb\u884c\u7b80\u5316\u8ba1\u7b97\u3002 4\uff0c\u9488\u5bf9\u4e3b\u6d41\u6a21\u578b\uff08BERT\uff0cRESNET\u7b49\uff09\u7684\u5e76\u884c\u8ba1\u7b97\u6a21\u5f0f\uff0c\u5b9e\u73b0\u52a0\u901f\u8ba1\u7b97\u3002","title":"7"},{"location":"7/#71","text":"","title":"7.1 \u6a21\u578b\u91cf\u5316\u6280\u672f"},{"location":"7/#_1","text":"\u4e86\u89e3\u6a21\u578b\u538b\u7f29\u6280\u672f\u4e2d\u7684\u52a8\u6001\u91cf\u5316\u4e0e\u9759\u6001\u91cf\u5316\u7684\u76f8\u5173\u77e5\u8bc6\u3002 \u638c\u63e1\u4f7f\u7528huggingface\u4e2d\u7684\u9884\u8bad\u7ec3BERT\u6a21\u578b\u8fdb\u884c\u5fae\u8c03\u3002 \u638c\u63e1\u4f7f\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f\u5bf9\u8bad\u7ec3\u540e\u7684bert\u6a21\u578b\u8fdb\u884c\u538b\u7f29\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"7/#_2","text":"\u6a21\u578b\u538b\u7f29: \u6a21\u578b\u538b\u7f29\u662f\u4e00\u79cd\u9488\u5bf9\u5927\u578b\u6a21\u578b(\u53c2\u6570\u91cf\u5de8\u5927)\u5728\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u4f18\u5316\u7684\u4e00\u79cd\u5e38\u7528\u63aa\u65bd\u3002\u5b83\u5f80\u5f80\u80fd\u591f\u4f7f\u6a21\u578b\u4f53\u79ef\u7f29\u5c0f\uff0c\u7b80\u5316\u8ba1\u7b97\uff0c\u589e\u5feb\u63a8\u65ad\u901f\u5ea6\uff0c\u6ee1\u8db3\u6a21\u578b\u5728\u7279\u5b9a\u573a\u5408(\u5982: \u79fb\u52a8\u7aef)\u7684\u9700\u6c42\u3002\u76ee\u524d\uff0c\u6a21\u578b\u538b\u7f29\u53ef\u4ee5\u4ece\u591a\u65b9\u9762\u8003\u8651\uff0c\u5982\u526a\u679d\u65b9\u6cd5(\u7b80\u5316\u6a21\u578b\u67b6\u6784)\uff0c\u53c2\u6570\u91cf\u5316\u65b9\u6cd5(\u7b80\u5316\u6a21\u578b\u53c2\u6570)\uff0c\u77e5\u8bc6\u84b8\u998f\u7b49\u3002\u672c\u6848\u4f8b\u5c06\u7740\u91cd\u8bb2\u89e3\u6a21\u578b\u53c2\u6570\u91cf\u5316\u65b9\u6cd5\u3002 \u6a21\u578b\u53c2\u6570\u91cf\u5316: \u5728\u673a\u5668\u5b66\u4e60\uff08\u6df1\u5ea6\u5b66\u4e60\uff09\u9886\u57df\uff0c\u6a21\u578b\u91cf\u5316\u4e00\u822c\u662f\u6307\u5c06\u6a21\u578b\u53c2\u6570\u7531\u7c7b\u578bFP32\u8f6c\u6362\u4e3aINT8\u7684\u8fc7\u7a0b\uff0c\u8f6c\u6362\u4e4b\u540e\u7684\u6a21\u578b\u5927\u5c0f\u88ab\u538b\u7f29\u4e3a\u539f\u6765\u76841/4\uff0c\u6240\u9700\u5185\u5b58\u548c\u5e26\u5bbd\u51cf\u5c0f4\u500d\uff0c\u540c\u65f6\uff0c\u8ba1\u7b97\u91cf\u51cf\u5c0f\u7ea6\u4e3a2-4\u500d\u3002\u6a21\u578b\u53c8\u53ef\u5206\u4e3a\u52a8\u6001\u91cf\u5316\u548c\u9759\u6001\u91cf\u5316\u3002 \u6a21\u578b\u52a8\u6001\u91cf\u5316\uff1a \u64cd\u4f5c\u6700\u7b80\u5355\u4e5f\u662f\u538b\u7f29\u6548\u679c\u6700\u597d\u7684\u91cf\u5316\u65b9\u5f0f\uff0c\u91cf\u5316\u8fc7\u7a0b\u53d1\u751f\u5728\u6a21\u578b\u8bad\u7ec3\u540e\uff0c\u9488\u5bf9\u6a21\u578b\u6743\u91cd\u91c7\u53d6\u91cf\u5316\uff0c\u4e4b\u540e\u4f1a\u5728\u6a21\u578b\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u518d\u51b3\u5b9a\u662f\u5426\u9488\u5bf9\u6fc0\u6d3b\u503c\u91c7\u53d6\u91cf\u5316\uff0c\u56e0\u6b64\u79f0\u4f5c\u52a8\u6001\u91cf\u5316\uff08\u5728\u9884\u6d4b\u65f6\u53ef\u80fd\u53d1\u751f\u91cf\u5316\uff09\u3002\u8fd9\u662f\u6211\u4eec\u672c\u6848\u4f8b\u5c06\u4f1a\u4f7f\u7528\u7684\u91cf\u5316\u65b9\u5f0f\u3002 \u6a21\u578b\u9759\u6001\u91cf\u5316\uff1a \u8003\u8651\u5230\u52a8\u6001\u91cf\u5316\u8fd9\u79cd\u201c\u4e00\u5200\u5207\u201d\u7684\u91cf\u5316\u65b9\u5f0f\u6709\u65f6\u4f1a\u5e26\u6765\u6a21\u578b\u9884\u6d4b\u6548\u679c\u7684\u5927\u5e45\u5ea6\u4e0b\u964d\uff0c\u56e0\u6b64\u5f15\u5165\u9759\u6001\u91cf\u5316\uff0c\u5b83\u540c\u6837\u53d1\u751f\u5728\u6a21\u578b\u8bad\u7ec3\u540e\uff0c\u4e3a\u4e86\u5224\u65ad\u54ea\u4e9b\u6743\u91cd\u6216\u6fc0\u6d3b\u503c\u5e94\u8be5\u88ab\u91cf\u5316\uff0c\u54ea\u4e9b\u5e94\u8be5\u4fdd\u7559\u6216\u5c0f\u5e45\u5ea6\u91cf\u5316\uff0c\u5728\u9884\u6d4b\u8fc7\u7a0b\u5f00\u59cb\u524d\uff0c\u5728\u6a21\u578b\u4e2d\u8282\u70b9\u63d2\u5165\u201c\u89c2\u6d4b\u8005\u201d\uff08\u8861\u91cf\u8282\u70b9\u4f7f\u7528\u60c5\u51b5\u7684\u4e00\u4e9b\u8ba1\u7b97\u65b9\u6cd5\uff09\uff0c\u4ed6\u4eec\u5c06\u5728\u4e00\u4e9b\u5b9e\u9a8c\u6570\u636e\u4e2d\u8bc4\u4f30\u8282\u70b9\u4f7f\u7528\u60c5\u51b5\uff0c\u6765\u51b3\u5b9a\u662f\u5426\u5c06\u5176\u6743\u91cd\u6216\u6fc0\u6d3b\u503c\u8fdb\u884c\u91cf\u5316\uff0c\u56e0\u4e3a\u5728\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e9b\u8282\u70b9\u662f\u5426\u88ab\u91cf\u5316\u5df2\u7ecf\u786e\u5b9a\uff0c\u56e0\u6b64\u79f0\u4f5c\u9759\u6001\u91cf\u5316\u3002 \uff08\u6269\u5c55\u77e5\u8bc6\uff09\u91cf\u5316\u610f\u8bc6\u8bad\u7ec3\uff1a \u8fd9\u662f\u4e00\u79cd\u64cd\u4f5c\u76f8\u5bf9\u590d\u6742\u7684\u6a21\u578b\u91cf\u5316\u65b9\u6cd5\uff0c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u5b83\uff0c\u539f\u7406\u4e0e\u9759\u6001\u91cf\u5316\u7c7b\u4f3c\uff0c\u90fd\u9700\u8981\u50cf\u6a21\u578b\u4e2d\u63d2\u5165\u201c\u89c2\u6d4b\u8005\u201d\uff0c\u540c\u65f6\u5b83\u8fd8\u9700\u8981\u63d2\u5165\u91cf\u5316\u8ba1\u7b97\u64cd\u4f5c\uff0c\u4f7f\u5f97\u6a21\u578b\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u9664\u4e86\u8fdb\u884c\u539f\u6709\u7684\u6d6e\u70b9\u578b\u8ba1\u7b97\uff0c\u8fd8\u8981\u8fdb\u884c\u91cf\u5316\u8ba1\u7b97\uff0c\u4f46\u6a21\u578b\u53c2\u6570\u7684\u66f4\u65b0\u8fd8\u662f\u4f7f\u7528\u6d6e\u70b9\u578b\uff0c\u800c\u91cf\u5316\u8ba1\u7b97\u7684\u4f5c\u7528\u5c31\u662f\u8ba9\u6a21\u578b\u201c\u610f\u8bc6\u201d\u5230\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u901a\u8fc7\u201c\u89c2\u6d4b\u8005\u201d\u8bc4\u4f30\u6bcf\u6b21\u91cf\u5316\u7ed3\u679c\u4e0e\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u53c2\u6570\u66f4\u65b0\u7a0b\u5ea6\uff0c\u4e3a\u4e4b\u540e\u6a21\u578b\u5982\u4f55\u8fdb\u884c\u91cf\u5316\u8fd8\u80fd\u4fdd\u8bc1\u51c6\u786e\u7387\u63d0\u4f9b\u8861\u91cf\u6307\u6807\u3002\uff08\u7c7b\u4f3c\u4e8e\uff0c\u4eba\u5728\u63a5\u53d7\u8bad\u7ec3\u65f6\uff0c\u610f\u8bc6\u5230\u81ea\u5df1\u63a5\u4e0b\u6765\u53ef\u80fd\u9664\u4e86\u8bad\u7ec3\u5185\u5bb9\u5916\uff0c\u8fd8\u4f1a\u63a5\u53d7\u5176\u4ed6\u201c\u64cd\u4f5c\u201d\uff08\u91cf\u5316\uff09\uff0c\u56e0\u6b64\u4e5f\u4f1a\u51c6\u5907\u4e00\u4e9b\u5982\u679c\u8fdb\u884c\u91cf\u5316\u4ecd\u80fd\u8fbe\u6210\u76ee\u6807\u7684\u63aa\u65bd\uff09 BERT\u6a21\u578b: \u8fd9\u91cc\u4f7f\u7528bert-base-uncased\uff0c\u5b83\u7684\u7f16\u7801\u5668\u5177\u670912\u4e2a\u9690\u5c42, \u8f93\u51fa768\u7ef4\u5f20\u91cf, 12\u4e2a\u81ea\u6ce8\u610f\u529b\u5934, \u5171110M\u53c2\u6570\u91cf, \u5728\u5c0f\u5199\u7684\u82f1\u6587\u6587\u672c\u4e0a\u8fdb\u884c\u8bad\u7ec3\u800c\u5f97\u5230\u3002","title":"\u76f8\u5173\u77e5\u8bc6"},{"location":"7/#_3","text":"GLUE\u6570\u636e\u96c6\u5408\u7684\u4ecb\u7ecd\uff1a GLUE\u7531\u7ebd\u7ea6\u5927\u5b66\uff0c\u534e\u76db\u987f\u5927\u5b66\uff0cGoogle\u8054\u5408\u63a8\u51fa\uff0c\u6db5\u76d6\u4e0d\u540c\u7684NLP\u4efb\u52a1\u7c7b\u578b\uff0c\u6301\u7eed\u81f32020\u5e741\u6708\uff0c\u5176\u4e2d\u5305\u62ec11\u4e2a\u5b50\u4efb\u52a1\u6570\u636e\u96c6\uff0c\u6210\u4e3aNLP\u7814\u7a76\u53d1\u5c55\u7684\u6807\u51c6\u3002\u6211\u4eec\u8fd9\u91cc\u4f7f\u7528\u5176\u5b9eMRPC\u6570\u636e\u96c6\u3002 \u6570\u636e\u4e0b\u8f7d\u5730\u5740: \u6807\u51c6\u6570\u636e\u96c6\u4e00\u822c\u4f7f\u7528\u4e0b\u8f7d\u811a\u672c\u8fdb\u884c\u4e0b\u8f7d\uff0c\u4f1a\u5728\u4e4b\u540e\u7684\u4ee3\u7801\u4e2d\u6f14\u793a\u3002 MRPC\u6570\u636e\u96c6\u7684\u4efb\u52a1\u7c7b\u578b\uff1a \u53e5\u5b50\u5bf9\u4e8c\u5206\u7c7b\u4efb\u52a1 \u8bad\u7ec3\u96c6\u4e0a\u6b63\u6837\u672c\u536068%\uff0c\u8d1f\u6837\u672c\u536032% \u8bc4\u4f30\u6307\u6807\u8fd9\u91cc\u4f7f\u7528\uff1aF1 \u8bc4\u4f30\u6307\u6807\u8ba1\u7b97\u65b9\u5f0f\uff1aF1=2\u2217(precision\u2217recall)/(precision+recall) \u6570\u636e\u96c6\u9884\u89c8: MRPC\u6570\u636e\u96c6\u6587\u4ef6\u6837\u5f0f\uff1a - MRPC / - dev . tsv - test . tsv - train . tsv - dev_ids . tsv - msr_paraphrase_test . txt - msr_paraphrase_train . txt \u6587\u4ef6\u6837\u5f0f\u8bf4\u660e\uff1a \u5728\u4f7f\u7528\u4e2d\u5e38\u7528\u5230\u7684\u6587\u4ef6\u662ftrain.tsv\uff0cdev.tsv\uff0ctest.tsv\uff0c\u5206\u522b\u4ee3\u8868\u8bad\u7ec3\u96c6\uff0c\u9a8c\u8bc1\u96c6\u548c\u6d4b\u8bd5\u96c6\u3002\u5176\u4e2dtrain.tsv\u4e0edev.tsv\u6570\u636e\u6837\u5f0f\u76f8\u540c\uff0c\u90fd\u662f\u5e26\u6709\u6807\u7b7e\u7684\u6570\u636e\uff0c\u5176\u4e2dtest.tsv\u662f\u4e0d\u5e26\u6709\u6807\u7b7e\u7684\u6570\u636e\u3002 train.tsv\u6570\u636e\u6837\u5f0f\uff1a Quality #1 ID #2 ID #1 String #2 String 1 702876 702977 Amrozi accused his brother , whom he called \" the witness \" , of deliberately distorting his evidence . Referring to him as only \" the witness \" , Amrozi accused his brother of deliberately distorting his evidence . 0 2108705 2108831 Yucaipa owned Dominick ' s before selling the chain to Safeway in 1998 for $ 2.5 billion . Yucaipa bought Dominick ' s in 1995 for $ 693 million and sold it to Safeway for $ 1 . 8 billion in 1998 . 1 1330381 1330521 They had published an advertisement on the Internet on June 10 , offering the cargo for sale , he added . On June 10 , the ship ' s owners had published an advertisement on the Internet , offering the explosives for sale . 0 3344667 3344648 Around 0335 GMT , Tab shares were up 19 cents , or 4 . 4 % , at A $ 4 . 56 , having earlier set a record high of A $ 4 . 57 . Tab shares jumped 20 cents , or 4 . 6 % , to set a record closing high at A $ 4 . 57 . 1 1236820 1236712 The stock rose $ 2 . 11 , or about 11 percent , to close Friday at $ 21 . 51 on the New York Stock Exchange . PG & E Corp . shares jumped $ 1 . 63 or 8 percent to $ 21 . 03 on the New York Stock Exchange on Friday . 1 738533 737951 Revenue in the first quarter of the year dropped 15 percent from the same period a year earlier . With the scandal hanging over Stewart ' s company , revenue the first quarter of the year dropped 15 percent from the same period a year earlier . 0 264589 264502 The Nasdaq had a weekly gain of 17 . 27 , or 1 . 2 percent , closing at 1 , 520 . 15 on Friday . The tech - laced Nasdaq Composite . IXIC rallied 30 . 46 points , or 2 . 04 percent , to 1 , 520 . 15 . 1 579975 579810 The DVD - CCA then appealed to the state Supreme Court . The DVD CCA appealed that decision to the U . S . Supreme Court . ... train.tsv\u6570\u636e\u6837\u5f0f\u8bf4\u660e\uff1a train.tsv\u4e2d\u7684\u6570\u636e\u5185\u5bb9\u5171\u5206\u4e3a5\u5217\uff0c\u7b2c\u4e00\u5217\u6570\u636e\uff0c0\u62161\uff0c\u4ee3\u8868\u6bcf\u5bf9\u53e5\u5b50\u662f\u5426\u5177\u6709\u76f8\u540c\u7684\u542b\u4e49\uff0c0\u4ee3\u8868\u542b\u4e49\u4e0d\u76f8\u540c\uff0c1\u4ee3\u8868\u542b\u4e49\u76f8\u540c\u3002\u7b2c\u4e8c\u5217\u548c\u7b2c\u4e09\u5217\u5206\u522b\u4ee3\u8868\u6bcf\u5bf9\u53e5\u5b50\u7684id\uff0c\u7b2c\u56db\u5217\u548c\u7b2c\u4e94\u5217\u5206\u522b\u5177\u6709\u76f8\u540c/\u4e0d\u540c\u542b\u4e49\u7684\u53e5\u5b50\u5bf9\u3002 test.tsv\u6570\u636e\u6837\u5f0f\uff1a index #1 ID #2 ID #1 String #2 String 0 1089874 1089925 PCCW ' s chief operating officer , Mike Butcher , and Alex Arena , the chief financial officer , will report directly to Mr So . Current Chief Operating Officer Mike Butcher and Group Chief Financial Officer Alex Arena will report to So . 1 3019446 3019327 The world ' s two largest automakers said their U.S. sales declined more than predicted last month as a late summer sales frenzy caused more of an industry backlash than expected . Domestic sales at both GM and No. 2 Ford Motor Co. declined more than predicted as a late summer sales frenzy prompted a larger-than-expected industry backlash . 2 1945605 1945824 According to the federal Centers for Disease Control and Prevention ( news - web sites ) , there were 19 reported cases of measles in the United States in 2002 . The Centers for Disease Control and Prevention said there were 19 reported cases of measles in the United States in 2002 . 3 1430402 1430329 A tropical storm rapidly developed in the Gulf of Mexico Sunday and was expected to hit somewhere along the Texas or Louisiana coasts by Monday night . A tropical storm rapidly developed in the Gulf of Mexico on Sunday and could have hurricane - force winds when it hits land somewhere along the Louisiana coast Monday night . 4 3354381 3354396 The company didn ' t detail the costs of the replacement and repairs . But company officials expect the costs of the replacement work to run into the millions of dollars . 5 1390995 1391183 The settling companies would also assign their possible claims against the underwriters to the investor plaintiffs , he added . Under the agreement , the settling companies will also assign their potential claims against the underwriters to the investors , he added . 6 2201401 2201285 Air Commodore Quaife said the Hornets remained on three - minute alert throughout the operation . Air Commodore John Quaife said the security operation was unprecedented . 7 2453843 2453998 A Washington County man may have the countys first human case of West Nile virus , the health department said Friday . The countys first and only human case of West Nile this year was confirmed by health officials on Sept . 8 . ... test.tsv\u6570\u636e\u6837\u5f0f\u8bf4\u660e\uff1a test.tsv\u4e2d\u7684\u6570\u636e\u5185\u5bb9\u5171\u5206\u4e3a5\u5217\uff0c\u7b2c\u4e00\u5217\u6570\u636e\u4ee3\u8868\u6bcf\u6761\u6587\u672c\u6570\u636e\u7684\u7d22\u5f15\uff1b\u5176\u4f59\u5217\u7684\u542b\u4e49\u4e0etrain.tsv\u4e2d\u76f8\u540c\u3002","title":"\u6570\u636e\u96c6\u8bf4\u660e"},{"location":"7/#huggingfacebert","text":"\u7b2c\u4e00\u6b65: \u5b89\u88c5\u5fc5\u8981\u7684\u5de5\u5177\u5305\u5e76\u5bfc\u5165 \u7b2c\u4e8c\u6b65: \u4e0b\u8f7d\u6570\u636e\u96c6\u5e76\u4f7f\u7528\u811a\u672c\u8fdb\u884c\u5fae\u8c03 \u7b2c\u4e09\u6b65: \u8bbe\u5b9a\u5168\u5c40\u914d\u7f6e\u5e76\u52a0\u8f7d\u5fae\u8c03\u6a21\u578b \u7b2c\u56db\u6b65: \u7f16\u5199\u7528\u4e8e\u6a21\u578b\u4f7f\u7528\u7684\u8bc4\u4f30\u51fd\u6570","title":"\u4f7f\u7528huggingface\u4e2d\u7684\u9884\u8bad\u7ec3BERT\u6a21\u578b\u8fdb\u884c\u5fae\u8c03"},{"location":"7/#_4","text":"\u5b89\u88c5\u6838\u5fc3\u5de5\u5177\u5305: # \u8fd9\u662f\u7531 huggingface\u63d0\u4f9b\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u4f7f\u7528\u5de5\u5177\u5305 pip install transformers == 2 . 3 . 0 \u5de5\u5177\u5305\u5bfc\u5165 from __future__ import absolute_import , division , print_function import logging import numpy as np import os import random import sys import time import torch # \u7528\u4e8e\u8bbe\u5b9a\u5168\u5c40\u914d\u7f6e\u7684\u547d\u540d\u7a7a\u95f4 from argparse import Namespace # \u4ecetorch.utils.data\u4e2d\u5bfc\u5165\u5e38\u7528\u7684\u6a21\u578b\u5904\u7406\u5de5\u5177\uff0c\u4f1a\u5728\u4ee3\u7801\u4f7f\u7528\u4e2d\u8fdb\u884c\u8be6\u7ec6\u4ecb\u7ecd from torch.utils.data import ( DataLoader , RandomSampler , SequentialSampler , TensorDataset ) # \u6a21\u578b\u8fdb\u5ea6\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u5728\u8bc4\u4f30\u8fc7\u7a0b\u4e2d\uff0c\u5e2e\u52a9\u6253\u5370\u8fdb\u5ea6\u6761 from tqdm import tqdm # \u4ecetransformers\u4e2d\u5bfc\u5165BERT\u6a21\u578b\u7684\u76f8\u5173\u5de5\u5177 from transformers import ( BertConfig , BertForSequenceClassification , BertTokenizer ,) # \u4ecetransformers\u4e2d\u5bfc\u5165GLUE\u6570\u636e\u96c6\u7684\u8bc4\u4f30\u6307\u6807\u8ba1\u7b97\u65b9\u6cd5 from transformers import glue_compute_metrics as compute_metrics # \u4ecetransformers\u4e2d\u5bfc\u5165GLUE\u6570\u636e\u96c6\u7684\u8f93\u51fa\u6a21\u5f0f(\u56de\u5f52/\u5206\u7c7b) from transformers import glue_output_modes as output_modes # \u4ecetransformers\u4e2d\u5bfc\u5165GLUE\u6570\u636e\u96c6\u7684\u9884\u5904\u7406\u5668processors # processors\u662f\u5c06\u6301\u4e45\u5316\u6587\u4ef6\u52a0\u8f7d\u5230\u5185\u5b58\u7684\u8fc7\u7a0b\uff0c\u5373\u8f93\u5165\u4e00\u822c\u4e3a\u6587\u4ef6\u8def\u5f84\uff0c\u8f93\u51fa\u662f\u8bad\u7ec3\u6570\u636e\u548c\u5bf9\u5e94\u6807\u7b7e\u7684\u67d0\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u5982\u5217\u8868\u8868\u793a\u3002 from transformers import glue_processors as processors # \u4ecetransformers\u4e2d\u5bfc\u5165GLUE\u6570\u636e\u96c6\u7684\u7279\u5f81\u5904\u7406\u5668convert_examples_to_features # convert_examples_to_features\u662f\u5c06processor\u7684\u8f93\u51fa\u5904\u7406\u6210\u6a21\u578b\u9700\u8981\u7684\u8f93\u5165\uff0cNLP\u5b9a\u4e2d\u7684\u4e00\u822c\u6d41\u7a0b\u4e3a\u6570\u503c\u6620\u5c04\uff0c\u6307\u5b9a\u957f\u5ea6\u7684\u622a\u65ad\u8865\u9f50\u7b49 # \u5728BERT\u6a21\u578b\u4e0a\u5904\u7406\u53e5\u5b50\u5bf9\u65f6\uff0c\u8fd8\u9700\u8981\u5728\u53e5\u5b50\u524d\u63d2\u5165[CLS]\u5f00\u59cb\u6807\u8bb0\uff0c\u5728\u4e24\u4e2a\u53e5\u5b50\u4e2d\u95f4\u548c\u7b2c\u4e8c\u4e2a\u53e5\u5b50\u672b\u7aef\u63d2\u5165[SEP]\u5206\u5272/\u7ed3\u675f\u6807\u8bb0 from transformers import glue_convert_examples_to_features as convert_examples_to_features # \u8bbe\u5b9a\u4e0e\u65e5\u5fd7\u6253\u5370\u6709\u5173\u7684\u914d\u7f6e logger = logging . getLogger ( __name__ ) logging . basicConfig ( format = ' %(asctime)s - %(levelname)s - %(name)s - %(message)s ' , datefmt = '%m/ %d /%Y %H:%M:%S' , level = logging . WARN ) logging . getLogger ( \"transformers.modeling_utils\" ) . setLevel ( logging . WARN ) # Reduce logging print ( \"torch version:\" , torch . __version__ ) # \u8bbe\u7f6etorch\u5141\u8bb8\u542f\u52a8\u7684\u7ebf\u7a0b\u6570, \u56e0\u4e3a\u4e4b\u540e\u4f1a\u5bf9\u6bd4\u538b\u7f29\u6a21\u578b\u7684\u8017\u65f6\uff0c\u56e0\u6b64\u9632\u6b62\u8be5\u53d8\u91cf\u4ea7\u751f\u5f71\u54cd torch . set_num_threads ( 1 ) print ( torch . __config__ . parallel_info ()) \u8f93\u51fa\u6548\u679c: torch version: 1.3.1 ATen/Parallel: at::get_num_threads() : 1 at::get_num_interop_threads() : 8 OpenMP 201511 (a.k.a. OpenMP 4.5) omp_get_max_threads() : 1 Intel(R) Math Kernel Library Version 2019.0.4 Product Build 20190411 for Intel(R) 64 architecture applications mkl_get_max_threads() : 1 Intel(R) MKL-DNN v0.20.5 (Git Hash 0125f28c61c1f822fd48570b4c1066f96fcb9b2e) std::thread::hardware_concurrency() : 16 Environment variables: OMP_NUM_THREADS : [not set] MKL_NUM_THREADS : [not set] ATen parallel backend: OpenMP","title":"\u7b2c\u4e00\u6b65: \u5b89\u88c5\u6838\u5fc3\u7684\u5de5\u5177\u5305\u5e76\u5bfc\u5165"},{"location":"7/#_5","text":"\u4e0b\u8f7dGLUE\u4e2d\u7684MRPC\u6570\u636e\u96c6: python download_glue_data.py --data_dir = './glue_data' --tasks = 'MRPC' \u4f7f\u7528 run_glue.py[\u5177\u4f53\u4ee3\u7801\u5185\u5bb9\u89c1\u9644\u5f55] \u8fdb\u884c\u6a21\u578b\u5fae\u8c03: # \u6ce8\u610f: \u8fd9\u662f\u4e00\u6bb5\u4f7f\u7528shell\u8fd0\u884c\u7684\u811a\u672c, \u8fd0\u884c\u8fc7\u7a0b\u4e2d\u9700\u8981\u8bf7\u6c42AWS\u7684S3\u8fdb\u884c\u9884\u8bad\u7ec3\u6a21\u578b\u4e0b\u8f7d # \u5b9a\u4e49GLUE_DIR: \u5fae\u8c03\u6570\u636e\u6240\u5728\u8def\u5f84, \u8fd9\u91cc\u6211\u4eec\u4f7f\u7528glue_data\u4e2d\u7684\u6570\u636e\u4f5c\u4e3a\u5fae\u8c03\u6570\u636e export GLUE_DIR = ./glue_data # \u5b9a\u4e49OUT_DIR: \u6a21\u578b\u7684\u4fdd\u5b58\u8def\u5f84, \u6211\u4eec\u5c06\u6a21\u578b\u4fdd\u5b58\u5728\u5f53\u524d\u76ee\u5f55\u7684bert_finetuning_test\u6587\u4ef6\u4e2d export OUT_DIR = ./bert_finetuning_test/ python ./run_glue.py \\ --model_type bert \\ --model_name_or_path bert-base-uncased \\ --task_name MRPC \\ --do_train \\ --do_eval \\ --do_lower_case \\ --data_dir $GLUE_DIR /MRPC \\ --max_seq_length 128 \\ --per_gpu_eval_batch_size = 8 \\ --per_gpu_train_batch_size = 8 \\ --learning_rate 2e-5 \\ --num_train_epochs 1 .0 \\ --output_dir $OUT_DIR # \u4f7f\u7528python\u8fd0\u884c\u5fae\u8c03\u811a\u672c # --model_type: \u9009\u62e9\u9700\u8981\u5fae\u8c03\u7684\u6a21\u578b\u7c7b\u578b, \u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9BERT, XLNET, XLM, roBERTa, distilBERT, ALBERT # --model_name_or_path: \u9009\u62e9\u5177\u4f53\u7684\u6a21\u578b\u6216\u8005\u53d8\u4f53, \u8fd9\u91cc\u662f\u5728\u82f1\u6587\u8bed\u6599\u4e0a\u5fae\u8c03, \u56e0\u6b64\u9009\u62e9bert-base-uncased # --task_name: \u5b83\u5c06\u4ee3\u8868\u5bf9\u5e94\u7684\u4efb\u52a1\u7c7b\u578b, \u5982MRPC\u4ee3\u8868\u53e5\u5b50\u5bf9\u4e8c\u5206\u7c7b\u4efb\u52a1 # --do_train: \u4f7f\u7528\u5fae\u8c03\u811a\u672c\u8fdb\u884c\u8bad\u7ec3 # --do_eval: \u4f7f\u7528\u5fae\u8c03\u811a\u672c\u8fdb\u884c\u9a8c\u8bc1 # --data_dir: \u8bad\u7ec3\u96c6\u53ca\u5176\u9a8c\u8bc1\u96c6\u6240\u5728\u8def\u5f84, \u5c06\u81ea\u52a8\u5bfb\u627e\u8be5\u8def\u5f84\u4e0b\u7684train.tsv\u548cdev.tsv\u4f5c\u4e3a\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6 # --max_seq_length: \u8f93\u5165\u53e5\u5b50\u7684\u6700\u5927\u957f\u5ea6, \u8d85\u8fc7\u5219\u622a\u65ad, \u4e0d\u8db3\u5219\u8865\u9f50 # --learning_rate: \u5b66\u4e60\u7387 # --num_train_epochs: \u8bad\u7ec3\u8f6e\u6570 # --output_dir $OUT_DIR: \u8bad\u7ec3\u540e\u7684\u6a21\u578b\u4fdd\u5b58\u8def\u5f84 \u8f93\u51fa\u6548\u679c: ... 03/18/2020 00:55:17 - INFO - __main__ - Loading features from cached file ./glue_data/MRPC/cached_train_bert-base-uncased_128_mrpc 03/18/2020 00:55:17 - INFO - __main__ - ***** Running training ***** 03/18/2020 00:55:17 - INFO - __main__ - Num examples = 3668 03/18/2020 00:55:17 - INFO - __main__ - Num Epochs = 1 03/18/2020 00:55:17 - INFO - __main__ - Instantaneous batch size per GPU = 8 03/18/2020 00:55:17 - INFO - __main__ - Total train batch size (w. parallel, distributed & accumulation) = 8 03/18/2020 00:55:17 - INFO - __main__ - Gradient Accumulation steps = 1 03/18/2020 00:55:17 - INFO - __main__ - Total optimization steps = 459 Epoch: 0%| | 0/1 [00:00<?, ?it/s] Iteration: 2%| | 8/459 [00:13<12:42, 1.69s/it] \u8fd0\u884c\u6210\u529f\u540e\u4f1a\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u751f\u6210 ./bert_finetuning_test\u6587\u4ef6\u5939\uff0c\u5185\u90e8\u6587\u4ef6\u5982\u4e0b: added_tokens . json checkpoint - 200 checkpoint - 350 eval_results . txt tokenizer_config . json checkpoint - 100 checkpoint - 250 checkpoint - 50 pytorch_model . bin training_args . bin checkpoint - 150 checkpoint - 300 config . json special_tokens_map . json vocab . txt","title":"\u7b2c\u4e8c\u6b65: \u4e0b\u8f7d\u6570\u636e\u96c6\u5e76\u4f7f\u7528\u811a\u672c\u8fdb\u884c\u5fae\u8c03"},{"location":"7/#_6","text":"\u8bbe\u5b9a\u5168\u5c40\u914d\u7f6e: # \u8fd9\u4e9b\u914d\u7f6e\u5c06\u5728\u8c03\u7528\u5fae\u8c03\u6a21\u578b\u65f6\u8fdb\u884c\u4f7f\u7528 # \u5b9e\u4f8b\u5316\u4e00\u4e2a\u914d\u7f6e\u7684\u547d\u540d\u7a7a\u95f4 configs = Namespace () # \u6a21\u578b\u7684\u8f93\u51fa\u6587\u4ef6\u8def\u5f84 configs . output_dir = \"./bert_finetuning_test/\" # \u9a8c\u8bc1\u6570\u636e\u96c6\u6240\u5728\u8def\u5f84(\u4e0e\u8bad\u7ec3\u96c6\u76f8\u540c) configs . data_dir = \"./glue_data/MRPC\" # \u9884\u8bad\u7ec3\u6a21\u578b\u7684\u540d\u5b57 configs . model_name_or_path = \"bert-base-uncased\" # \u6587\u672c\u7684\u6700\u5927\u5bf9\u9f50\u957f\u5ea6 configs . max_seq_length = 128 # GLUE\u4e2d\u7684\u4efb\u52a1\u540d(\u9700\u8981\u5c0f\u5199) configs . task_name = \"MRPC\" . lower () # \u6839\u636e\u4efb\u52a1\u540d\u4eceGLUE\u6570\u636e\u96c6\u5904\u7406\u5de5\u5177\u5305\u4e2d\u53d6\u51fa\u5bf9\u5e94\u7684\u9884\u5904\u7406\u5de5\u5177 configs . processor = processors [ configs . task_name ]() # \u5f97\u5230\u5bf9\u5e94\u6a21\u578b\u8f93\u51fa\u6a21\u5f0f(MRPC\u4e3a\u5206\u7c7b) configs . output_mode = output_modes [ configs . task_name ] # \u5f97\u5230\u8be5\u4efb\u52a1\u7684\u5bf9\u5e94\u7684\u6807\u7b7e\u79cd\u7c7b\u5217\u8868 configs . label_list = configs . processor . get_labels () # \u5b9a\u4e49\u6a21\u578b\u7c7b\u578b configs . model_type = \"bert\" . lower () # \u662f\u5426\u5168\u90e8\u4f7f\u7528\u5c0f\u5199\u6587\u672c configs . do_lower_case = True # \u4f7f\u7528\u7684\u8bbe\u5907 configs . device = \"cpu\" # \u6bcf\u6b21\u9a8c\u8bc1\u7684\u6279\u6b21\u5927\u5c0f configs . per_eval_batch_size = 8 # gpu\u7684\u6570\u91cf configs . n_gpu = 0 # \u662f\u5426\u9700\u8981\u91cd\u5199\u6570\u636e\u7f13\u5b58 configs . overwrite_cache = False \u52a0\u8f7d\u5fae\u8c03\u6a21\u578b: # \u56e0\u4e3a\u5728\u6a21\u578b\u4f7f\u7528\u4e2d\uff0c\u4f1a\u4f7f\u7528\u4e00\u4e9b\u968f\u673a\u65b9\u6cd5\uff0c\u4e3a\u4e86\u4f7f\u6bcf\u6b21\u8fd0\u884c\u7684\u7ed3\u679c\u53ef\u4ee5\u590d\u73b0 # \u9700\u8981\u8bbe\u5b9a\u786e\u5b9a\u7684\u968f\u673a\u79cd\u5b50\uff0c\u4fdd\u8bc1\u6bcf\u6b21\u968f\u673a\u5316\u7684\u6570\u5b57\u5728\u8303\u56f4\u5185\u6d6e\u52a8 def set_seed ( seed ) : random . seed ( seed ) np . random . seed ( seed ) torch . manual_seed ( seed ) set_seed ( 42 ) ## \u52a0\u8f7d\u5fae\u8c03\u6a21\u578b # \u52a0\u8f7d BERT \u9884\u8bad\u7ec3\u6a21\u578b\u7684\u6570\u503c\u6620\u5c04\u5668 tokenizer = BertTokenizer . from_pretrained ( configs . output_dir , do_lower_case = configs . do_lower_case ) # \u52a0\u8f7d\u5e26\u6709\u6587\u672c\u5206\u7c7b\u5934\u7684 BERT \u6a21\u578b model = BertForSequenceClassification . from_pretrained ( configs . output_dir ) # \u5c06\u6a21\u578b\u4f20\u5230\u5236\u5b9a\u8bbe\u5907\u4e0a model . to ( configs . device )","title":"\u7b2c\u4e09\u6b65: \u8bbe\u5b9a\u5168\u5c40\u914d\u7f6e\u5e76\u52a0\u8f7d\u5fae\u8c03\u6a21\u578b"},{"location":"7/#_7","text":"def evaluate ( args , model , tokenizer ): \"\"\" \u6a21\u578b\u8bc4\u4f30\u51fd\u6570 :param args: \u6a21\u578b\u7684\u5168\u5c40\u914d\u7f6e\u5bf9\u8c61\uff0c\u91cc\u9762\u5305\u542b\u6a21\u578b\u7684\u5404\u79cd\u914d\u7f6e\u4fe1\u606f :param model: \u4f7f\u7528\u7684\u6a21\u578b :param tokenizer: \u6587\u672c\u6570\u636e\u7684\u6570\u503c\u6620\u5c04\u5668 \"\"\" # \u56e0\u4e3a\u4e4b\u540e\u4f1a\u591a\u6b21\u7528\u5230\u4efb\u52a1\u540d\u548c\u8f93\u51fa\u8def\u5f84 # \u6240\u4ee5\u5c06\u5176\u4ece\u53c2\u6570\u4e2d\u53d6\u51fa eval_task = args . task_name eval_output_dir = args . output_dir try : # \u8c03\u7528load_and_cache_examples\u52a0\u8f7d\u539f\u59cb\u6216\u8005\u5df2\u7ecf\u7f13\u5b58\u7684\u6570\u636e # \u5f97\u5230\u4e00\u4e2a\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61 eval_dataset = load_and_cache_examples ( args , eval_task , tokenizer ) # \u5224\u65ad\u6a21\u578b\u8f93\u51fa\u8def\u5f84\u662f\u5426\u5b58\u5728 if not os . path . exists ( eval_output_dir ): # \u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u521b\u5efa\u8be5\u8def\u5f84 os . makedirs ( eval_output_dir ) # \u4f7f\u7528SequentialSampler\u5c01\u88c5\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61 # SequentialSampler\u662f\u91c7\u6837\u5668\u5bf9\u8c61\uff0c\u4e00\u822c\u5728Dataloader\u6570\u636e\u52a0\u8f7d\u5668\u4e2d\u4f7f\u7528\uff0c # \u56e0\u4e3a\u6570\u636e\u52a0\u8f7d\u5668\u662f\u4ee5\u8fed\u4ee3\u7684\u65b9\u5f0f\u4ea7\u751f\u6570\u636e\uff0c\u56e0\u6b64\u6bcf\u4e2a\u6279\u6b21\u6570\u636e\u53ef\u4ee5\u6307\u5b9a\u91c7\u6837\u89c4\u5219\uff0c # SequentialSampler\u662f\u987a\u5e8f\u91c7\u6837\u5668\uff0c\u4e0d\u6539\u53d8\u539f\u6709\u6570\u636e\u96c6\u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u53d6\u51fa\u6570\u636e\u3002 eval_sampler = SequentialSampler ( eval_dataset ) # \u4f7f\u7528Dataloader\u6570\u636e\u52a0\u8f7d\u5668\uff0c\u53c2\u6570\u5206\u522b\u662f\u6570\u636e\u96c6\u7684\u8fed\u4ee3\u5668\u5bf9\u8c61\uff0c\u91c7\u96c6\u5668\u5bf9\u8c61\uff0c\u6279\u6b21\u5927\u5c0f eval_dataloader = DataLoader ( eval_dataset , sampler = eval_sampler , batch_size = args . per_eval_batch_size ) # \u5f00\u59cb\u8bc4\u4f30 logger . info ( \"***** Running evaluation *****\" ) logger . info ( \" Num examples = %d \" , len ( eval_dataset )) logger . info ( \" Batch size = %d \" , args . per_eval_batch_size ) # \u521d\u59cb\u5316\u9a8c\u8bc1\u635f\u5931 eval_loss = 0.0 # \u521d\u59cb\u5316\u9a8c\u8bc1\u6b65\u6570 nb_eval_steps = 0 # \u521d\u59cb\u5316\u9884\u6d4b\u7684\u6982\u7387\u5206\u5e03 preds = None # \u521d\u59cb\u5316\u8f93\u51fa\u771f\u5b9e\u6807\u7b7e\u503c out_label_ids = None # \u5faa\u73af\u6570\u636e\u6279\u6b21\uff0c\u4f7f\u7528tqdm\u5c01\u88c5\u6570\u636e\u52a0\u8f7d\u5668\uff0c\u53ef\u4ee5\u5728\u8bc4\u4f30\u65f6\u663e\u793a\u8fdb\u5ea6\u6761 # desc\u662f\u8fdb\u5ea6\u6761\u524d\u9762\u7684\u63cf\u8ff0\u4fe1\u606f for batch in tqdm ( eval_dataloader , desc = \"Evaluating\" ): # \u8bc4\u4f30\u8fc7\u7a0b\u4e2d\u6a21\u578b\u5f00\u542f\u8bc4\u4f30\u6a21\u5f0f\uff0c\u4e0d\u8fdb\u884c\u53cd\u5411\u4f20\u64ad model . eval () # \u4ecebatch\u4e2d\u53d6\u51fa\u6570\u636e\u7684\u6240\u6709\u76f8\u5173\u4fe1\u606f\u5b58\u4e8e\u5143\u7ec4\u4e2d batch = tuple ( t . to ( args . device ) for t in batch ) # \u4e0d\u8fdb\u884c\u68af\u5ea6\u8ba1\u7b97 with torch . no_grad (): # \u5c06batch\u643a\u5e26\u7684\u6570\u636e\u4fe1\u606f\u8868\u793a\u79f0\u5b57\u5178\u5f62\u5f0f # \u8fd9\u4e9b\u6570\u636e\u4fe1\u606f\u548cload_and_cache_examples\u51fd\u6570\u8fd4\u56de\u7684\u6570\u636e\u5bf9\u8c61\u4e2d\u4fe1\u606f\u76f8\u540c # \u8bcd\u6c47\u7684\u6620\u5c04\u6570\u503c, \u8bcd\u6c47\u7684\u7c7b\u578b\u6570\u503c(0\u62161, \u4ee3\u8868\u7b2c\u4e00\u53e5\u548c\u7b2c\u4e8c\u53e5\u8bdd) # \u6ce8\u610f\u529b\u63a9\u7801\u5f20\u91cf\uff0c\u4ee5\u53ca\u5bf9\u5e94\u7684\u6807\u7b7e inputs = { 'input_ids' : batch [ 0 ], 'attention_mask' : batch [ 1 ], 'token_type_ids' : batch [ 2 ], 'labels' : batch [ 3 ]} # \u5c06\u8be5\u5b57\u5178\u4f5c\u4e3a\u53c2\u6570\u8f93\u5165\u5230\u6a21\u578b\u4e2d\u83b7\u5f97\u8f93\u51fa outputs = model ( ** inputs ) # \u83b7\u5f97\u635f\u5931\u548c\u9884\u6d4b\u5206\u5e03 tmp_eval_loss , logits = outputs # \u5c06\u635f\u5931\u7d2f\u52a0\u6c42\u5747\u503c eval_loss += tmp_eval_loss . mean () . item () # \u9a8c\u8bc1\u6b65\u6570\u7d2f\u52a0 nb_eval_steps += 1 # \u5982\u679c\u662f\u7b2c\u4e00\u6279\u6b21\u7684\u6570\u636e if preds is None : # \u7ed3\u679c\u5206\u5e03\u5c31\u662f\u6a21\u578b\u7684\u8f93\u51fa\u5206\u5e03 preds = logits . numpy () # \u8f93\u51fa\u771f\u5b9e\u6807\u7b7e\u503c\u4e3a\u8f93\u5165\u5bf9\u5e94\u7684labels out_label_ids = inputs [ 'labels' ] . numpy () else : # \u7ed3\u679c\u5206\u5e03\u5c31\u662f\u6bcf\u4e00\u6b21\u6a21\u578b\u8f93\u51fa\u5206\u5e03\u7ec4\u6210\u7684\u6570\u7ec4 preds = np . append ( preds , logits . numpy (), axis = 0 ) # \u8f93\u51fa\u771f\u5b9e\u6807\u7b7e\u503c\u4e3a\u6bcf\u4e00\u6b21\u8f93\u5165\u5bf9\u5e94\u7684labels\u7ec4\u6210\u7684\u6570\u7ec4 out_label_ids = np . append ( out_label_ids , inputs [ 'labels' ] . numpy (), axis = 0 ) # \u8ba1\u7b97\u6bcf\u4e00\u8f6e\u7684\u5e73\u5747\u635f\u5931 eval_loss = eval_loss / nb_eval_steps # \u53d6\u7ed3\u679c\u5206\u5e03\u4e2d\u6700\u5927\u7684\u503c\u5bf9\u5e94\u7684\u7d22\u5f15 preds = np . argmax ( preds , axis = 1 ) # \u4f7f\u7528compute_metrics\u8ba1\u7b97\u5bf9\u5e94\u7684\u8bc4\u4f30\u6307\u6807 result = compute_metrics ( eval_task , preds , out_label_ids ) # \u5728\u65e5\u5fd7\u4e2d\u6253\u5370\u6bcf\u4e00\u8f6e\u7684\u8bc4\u4f30\u7ed3\u679c logger . info ( \"***** Eval results {} *****\" ) logger . info ( str ( result )) except Exception as e : print ( e ) return result def load_and_cache_examples ( args , task , tokenizer ): \"\"\" \u52a0\u8f7d\u6216\u4f7f\u7528\u7f13\u5b58\u6570\u636e :param args: \u5168\u5c40\u914d\u7f6e\u53c2\u6570 :param task: \u4efb\u52a1\u540d :param tokenizer: \u6570\u503c\u6620\u5c04\u5668 \"\"\" # \u6839\u636e\u4efb\u52a1\u540d(MRPC)\u83b7\u5f97\u5bf9\u5e94\u6570\u636e\u9884\u5904\u7406\u5668 processor = processors [ task ]() # \u83b7\u5f97\u8f93\u51fa\u6a21\u5f0f output_mode = output_modes [ task ] # \u5b9a\u4e49\u7f13\u5b58\u6570\u636e\u6587\u4ef6\u7684\u540d\u5b57 cached_features_file = os . path . join ( args . data_dir , 'cached_{}_{}_{}_{}' . format ( 'dev' , list ( filter ( None , args . model_name_or_path . split ( '/' ))) . pop (), str ( args . max_seq_length ), str ( task ))) # \u5224\u65ad\u7f13\u5b58\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u4ee5\u53ca\u5168\u5c40\u914d\u7f6e\u4e2d\u662f\u5426\u9700\u8981\u91cd\u5199\u6570\u636e if os . path . exists ( cached_features_file ) and not args . overwrite_cache : # \u4f7f\u7528torch.load(\u89e3\u5e8f\u5217\u5316\uff0c\u4e00\u822c\u7528\u4e8e\u52a0\u8f7d\u6a21\u578b\uff0c\u5728\u8fd9\u91cc\u7528\u4e8e\u52a0\u8f7d\u8bad\u7ec3\u6570\u636e)\u52a0\u8f7d\u7f13\u5b58\u6587\u4ef6 features = torch . load ( cached_features_file ) else : # \u5982\u679c\u6ca1\u6709\u7f13\u5b58\u6587\u4ef6\uff0c\u5219\u9700\u8981\u4f7f\u7528processor\u4ece\u539f\u59cb\u6570\u636e\u8def\u5f84\u4e2d\u52a0\u8f7d\u6570\u636e examples = processor . get_dev_examples ( args . data_dir ) # \u83b7\u53d6\u5bf9\u5e94\u7684\u6807\u7b7e label_list = processor . get_labels () # \u518d\u4f7f\u7528convert_examples_to_features\u751f\u6210\u6a21\u578b\u9700\u8981\u7684\u8f93\u5165\u5f62\u5f0f features = convert_examples_to_features ( examples , tokenizer , label_list = label_list , max_length = args . max_seq_length , output_mode = output_mode , pad_token = tokenizer . convert_tokens_to_ids ([ tokenizer . pad_token ])[ 0 ], ) logger . info ( \"Saving features into cached file %s \" , cached_features_file ) # \u5c06\u5176\u4fdd\u5b58\u81f3\u7f13\u5b58\u6587\u4ef6\u8def\u5f84\u4e2d torch . save ( features , cached_features_file ) # \u4e3a\u4e86\u6709\u6548\u5229\u7528\u5185\u5b58\uff0c\u4e4b\u540e\u5c06\u4f7f\u7528\u6570\u636e\u52a0\u8f7d\u5668\uff0c\u6211\u4eec\u9700\u8981\u5728\u8fd9\u91cc\u5c06\u5f20\u91cf\u6570\u636e\u8f6c\u6362\u6210\u6570\u636e\u8fed\u4ee3\u5668\u5bf9\u8c61TensorDatase # TensorDataset\uff1a\u7528\u4e8e\u81ea\u5b9a\u4e49\u8bad\u7ec3\u6570\u636e\u7ed3\u6784\u7684\u8fed\u4ee3\u5c01\u88c5\u5668\uff0c\u5b83\u53ef\u4ee5\u5c01\u88c5\u4efb\u4f55\u4e0e\u8bad\u7ec3\u6570\u636e\u6620\u5c04\u503c\u76f8\u5173\u7684\u6570\u636e #\uff08\u5982\uff1a\u8bad\u7ec3\u6570\u636e\u5bf9\u5e94\u7684\u6807\u7b7e\uff0c\u8bad\u7ec3\u6570\u636e\u4f7f\u7528\u7684\u63a9\u7801\u5f20\u91cf\uff0ctoken\u7684\u7c7b\u578bid\u7b49\uff09\uff0c # \u5b83\u4eec\u5fc5\u987b\u80fd\u8f6c\u6362\u6210\u5f20\u91cf\uff0c\u5c06\u540c\u8bad\u7ec3\u6570\u636e\u6620\u5c04\u503c\u4e00\u8d77\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u8fed\u4ee3\u4f7f\u7528\u3002 # \u4ee5\u4e0b\u662f\u5206\u522b\u628ainput_ids\uff0cattention_mask\uff0ctoken_type_ids\uff0clabel\u5c01\u88c5\u5728TensorDataset\u4e4b\u4e2d all_input_ids = torch . tensor ([ f . input_ids for f in features ], dtype = torch . long ) all_attention_mask = torch . tensor ([ f . attention_mask for f in features ], dtype = torch . long ) all_token_type_ids = torch . tensor ([ f . token_type_ids for f in features ], dtype = torch . long ) all_labels = torch . tensor ([ f . label for f in features ], dtype = torch . long ) dataset = TensorDataset ( all_input_ids , all_attention_mask , all_token_type_ids , all_labels ) # \u8fd4\u56de\u6570\u636e\u8fed\u4ee3\u5668\u5bf9\u8c61 return dataset \u6211\u4eec\u5c06\u5728\u4e0b\u9762\u7684\u6a21\u578b\u91cf\u5316\u4e2d\u8c03\u7528\u8be5\u8bc4\u4f30\u51fd\u6570\u3002","title":"\u7b2c\u56db\u6b65: \u7f16\u5199\u7528\u4e8e\u6a21\u578b\u4f7f\u7528\u7684\u8bc4\u4f30\u51fd\u6570"},{"location":"7/#bert","text":"\u7b2c\u4e00\u6b65: \u5c06\u6a21\u578b\u5e94\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f \u7b2c\u4e8c\u6b65: \u5bf9\u6bd4\u538b\u7f29\u540e\u6a21\u578b\u7684\u5927\u5c0f \u7b2c\u4e09\u6b65: \u5bf9\u6bd4\u538b\u7f29\u540e\u7684\u6a21\u578b\u7684\u63a8\u7406\u51c6\u786e\u6027\u548c\u8017\u65f6 \u7b2c\u56db\u6b65: \u5e8f\u5217\u5316\u6a21\u578b\u4ee5\u4fbf\u4e4b\u540e\u4f7f\u7528","title":"\u4f7f\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f\u5bf9\u8bad\u7ec3\u540e\u7684bert\u6a21\u578b\u8fdb\u884c\u538b\u7f29"},{"location":"7/#_8","text":"\u5e94\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f: # \u4f7f\u7528torch.quantization.quantize_dynamic\u83b7\u5f97\u52a8\u6001\u91cf\u5316\u7684\u6a21\u578b # \u91cf\u5316\u7684\u7f51\u7edc\u5c42\u4e3a\u6240\u6709\u7684nn.Linear\u7684\u6743\u91cd\uff0c\u4f7f\u5176\u6210\u4e3aint8 quantized_model = torch . quantization . quantize_dynamic ( model , { torch . nn . Linear }, dtype = torch . qint8 ) # \u6253\u5370\u52a8\u6001\u91cf\u5316\u540e\u7684BERT\u6a21\u578b print ( quantized_model ) \u8f93\u51fa\u6548\u679c: ## \u6a21\u578b\u4e2d\u7684\u6240\u6709Linear\u5c42\u53d8\u6210\u4e86DynamicQuantizedLinear\u5c42 BertForSequenceClassification( (bert): BertModel( (embeddings): BertEmbeddings( (word_embeddings): Embedding(30522, 768, padding_idx=0) (position_embeddings): Embedding(512, 768) (token_type_embeddings): Embedding(2, 768) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) (encoder): BertEncoder( (layer): ModuleList( (0): BertLayer( (attention): BertAttention( (self): BertSelfAttention( (query): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (key): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (value): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (dropout): Dropout(p=0.1, inplace=False) ) (output): BertSelfOutput( (dense): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) (intermediate): BertIntermediate( (dense): DynamicQuantizedLinear(in_features=768, out_features=3072, scale=1.0, zero_point=0) ) (output): BertOutput( (dense): DynamicQuantizedLinear(in_features=3072, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) (1): BertLayer( (attention): BertAttention( (self): BertSelfAttention( (query): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (key): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (value): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (dropout): Dropout(p=0.1, inplace=False) ) (output): BertSelfOutput( (dense): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) (intermediate): BertIntermediate( (dense): DynamicQuantizedLinear(in_features=768, out_features=3072, scale=1.0, zero_point=0) ) (output): BertOutput( (dense): DynamicQuantizedLinear(in_features=3072, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) ... ... (11): BertLayer( (attention): BertAttention( (self): BertSelfAttention( (query): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (key): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (value): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (dropout): Dropout(p=0.1, inplace=False) ) (output): BertSelfOutput( (dense): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) (intermediate): BertIntermediate( (dense): DynamicQuantizedLinear(in_features=768, out_features=3072, scale=1.0, zero_point=0) ) (output): BertOutput( (dense): DynamicQuantizedLinear(in_features=3072, out_features=768, scale=1.0, zero_point=0) (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True) (dropout): Dropout(p=0.1, inplace=False) ) ) ) ) (pooler): BertPooler( (dense): DynamicQuantizedLinear(in_features=768, out_features=768, scale=1.0, zero_point=0) (activation): Tanh() ) ) (dropout): Dropout(p=0.1, inplace=False) (classifier): DynamicQuantizedLinear(in_features=768, out_features=2, scale=1.0, zero_point=0) )","title":"\u7b2c\u4e00\u6b65: \u5c06\u6a21\u578b\u5e94\u7528\u52a8\u6001\u91cf\u5316\u6280\u672f"},{"location":"7/#_9","text":"def print_size_of_model ( model ): \"\"\"\u6253\u5370\u6a21\u578b\u5927\u5c0f\"\"\" # \u4fdd\u5b58\u6a21\u578b\u4e2d\u7684\u53c2\u6570\u90e8\u5206\u5230\u6301\u4e45\u5316\u6587\u4ef6 torch . save ( model . state_dict (), \"temp.p\" ) # \u6253\u5370\u6301\u4e45\u5316\u6587\u4ef6\u7684\u5927\u5c0f print ( 'Size (MB):' , os . path . getsize ( \"temp.p\" ) / 1e6 ) # \u79fb\u9664\u8be5\u6587\u4ef6 os . remove ( 'temp.p' ) # \u5206\u522b\u6253\u5370model\u548cquantized_model print_size_of_model ( model ) print_size_of_model ( quantized_model ) \u8f93\u51fa\u6548\u679c: ## \u6a21\u578b\u53c2\u6570\u6587\u4ef6\u5927\u5c0f\u7f29\u51cf\u4e86257MB Size (MB): 437.982584 Size (MB): 181.430351","title":"\u7b2c\u4e8c\u6b65: \u5bf9\u6bd4\u538b\u7f29\u540e\u6a21\u578b\u7684\u5927\u5c0f"},{"location":"7/#_10","text":"def time_model_evaluation ( model , configs , tokenizer ): \"\"\"\u83b7\u5f97\u6a21\u578b\u8bc4\u4f30\u7ed3\u679c\u548c\u8fd0\u884c\u65f6\u95f4\"\"\" # \u83b7\u5f97\u8bc4\u4f30\u524d\u65f6\u95f4 eval_start_time = time . time () # \u8fdb\u884c\u6a21\u578b\u8bc4\u4f30 result = evaluate ( configs , model , tokenizer ) # \u83b7\u5f97\u8bc4\u4f30\u540e\u65f6\u95f4 eval_end_time = time . time () # \u83b7\u5f97\u8bc4\u4f30\u8017\u65f6 eval_duration_time = eval_end_time - eval_start_time # \u6253\u5370\u6a21\u578b\u8bc4\u4f30\u7ed3\u679c print ( \"Evaluate result:\" , result ) # \u6253\u5370\u8017\u65f6 print ( \"Evaluate total time (seconds): {0:.1f}\" . format ( eval_duration_time )) \u8f93\u51fa\u6548\u679c: Evaluating: 100%|\u2588\u2588| 51/51 [01:36<00:00, 1.89s/it] Evaluate result: {'acc': 0.8161764705882353, 'f1': 0.8739495798319329, 'acc_and_f1': 0.8450630252100841} Evaluate total time (seconds): 96.4 Evaluating: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 51/51 [00:43<00:00, 1.19it/s] Evaluate result: {'acc': 0.7965686274509803, 'f1': 0.8663446054750403, 'acc_and_f1': 0.8314566164630104} Evaluate total time (seconds): 43.0 \u7ed3\u8bba: \u5bf9\u6a21\u578b\u8fdb\u884c\u52a8\u6001\u91cf\u5316\u540e\uff0c\u53c2\u6570\u6587\u4ef6\u5927\u5c0f\u660e\u663e\u51cf\u5c11\u3002 \u52a8\u6001\u91cf\u5316\u540e\u7684\u6a21\u578b\u5728\u9a8c\u8bc1\u96c6\u4e0a\u8bc4\u4f30\u6307\u6807\u51e0\u4e4e\u4e0d\u53d8\uff0c\u4f46\u662f\u8017\u65f6\u5374\u53ea\u7528\u4e86\u539f\u6765\u7684\u4e00\u534a\u5de6\u53f3\u3002","title":"\u7b2c\u4e09\u6b65: \u5bf9\u6bd4\u538b\u7f29\u540e\u7684\u6a21\u578b\u7684\u63a8\u7406\u51c6\u786e\u6027\u548c\u8017\u65f6"},{"location":"7/#_11","text":"# \u91cf\u5316\u6a21\u578b\u7684\u4fdd\u5b58\u8def\u5f84 quantized_output_dir = configs . output_dir + \"quantized/\" # \u5224\u65ad\u662f\u5426\u9700\u8981\u521b\u5efa\u8be5\u8def\u5f84 if not os . path . exists ( quantized_output_dir ): os . makedirs ( quantized_output_dir ) # \u4f7f\u7528save_pretrained\u4fdd\u5b58\u6a21\u578b quantized_model . save_pretrained ( quantized_output_dir ) \u8f93\u51fa\u6548\u679c: # \u5728bert_finetuning_test/\u76ee\u5f55\u4e0b - quantized/ - config.json - pytorch_model.bin","title":"\u7b2c\u56db\u6b65: \u5e8f\u5217\u5316\u6a21\u578b\u4ee5\u4fbf\u4e4b\u540e\u4f7f\u7528"},{"location":"7/#_12","text":"","title":"\u9644\u5f55"},{"location":"7/#run_gluepy","text":"\u8bf7\u8bbf\u95ee: http://git.itcast.cn/Stephen/AI-key-file/blob/master/run_glue.py","title":"run_glue.py\u5fae\u8c03\u811a\u672c\u4ee3\u7801"},{"location":"7/#72","text":"","title":"7.2 \u6a21\u578b\u526a\u679d\u6280\u672f"},{"location":"7/#_13","text":"\u4e86\u89e3\u6a21\u578b\u526a\u679d\u539f\u7406\u3002 \u638c\u63e1\u4f7f\u7528prune\u5bf9\u5df2\u6709\u6a21\u578b\u8fdb\u884c\u526a\u679d\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"7/#_14","text":"\u5f53\u524d\u5728NLP\u4efb\u52a1\u4e0a\u53d6\u5f97\u4f18\u5f02\u6210\u7ee9\u7684\u6a21\u578b\u5f80\u5f80\u662f\u62e5\u6709\u5927\u91cf\u53c2\u6570\u7684\u6a21\u578b\uff0c\u5982BERT\uff0cGPT\u7b49\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u751f\u7269\u7684\u9ad8\u5ea6\u6587\u660e\u662f\u4f7f\u7528\u795e\u7ecf\u7f51\u7edc\u6709\u6548\u7684\u7a00\u758f\u8fde\u63a5\uff0c\u8fd9\u6b63\u662f\u201c\u526a\u679d\u6280\u672f\u201d\u7684\u53d1\u5c55\u8d77\u6e90\u3002\u800c\u6240\u8c13\u526a\u679d\u6280\u672f\u539f\u7406\uff0c\u4e5f\u5c31\u662f\u5c06\u73b0\u6709\u6a21\u578b\u4e2d\u7684\u67d0\u4e9b\u53c2\u6570\u8bbe\u7f6e\u4e3a0\uff0c\u7b49\u6548\u4e8e\u8fd9\u4e9b\u795e\u7ecf\u5143\u5931\u6d3b\u3002\u800c\u53c2\u6570\u7f6e0\u7684\u65b9\u5f0f\u662f\u4f7f\u7528MASK\u8499\u7248\uff08\u8499\u72480\u4f4d\u7f6e\u5f97\u52300\uff0c1\u4f4d\u7f6e\u5f97\u5230\u539f\u6765\u7684\u503c\uff09\u3002\u4e0b\u9762\u6211\u4eec\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u8fd9\u79cd\u6280\u672f\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002","title":"\u526a\u679d\u6280\u672f\u4ecb\u7ecd\u4e0e\u539f\u7406"},{"location":"7/#prune","text":"\u6211\u4eec\u5c06\u4f7f\u7528torch.nn.utils.prune\u4e2d\u7684\u65b9\u6cd5\u8fdb\u884c\u7f51\u7edc\u7a00\u758f\u5316\uff0c\u5373\u526a\u679d\u3002 \u8981\u6c42torch\u7248\u672c\u5e94\u8be5>= 1.4.0\u3002 pip install torch> = 1 .4.0 \u526a\u679d\u7684\u8bb2\u89e3\u5c06\u5206\u4e3a\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5de5\u5177\u5305\u5e76\u83b7\u5f97\u6a21\u578b \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528\u526a\u679d\u5de5\u5177\u5e76\u4e86\u89e3\u5176\u4f5c\u7528\u65b9\u5f0f \u7b2c\u4e09\u6b65\uff1a\u6301\u4e45\u5316\u4fee\u526a\u540e\u7684\u6a21\u578b \u7b2c\u56db\u6b65\uff1a\u5de5\u7a0b\u4e2d\u5e38\u7528\u7684\u4fee\u526a\u65b9\u6cd5","title":"\u4f7f\u7528prune\u5bf9\u5df2\u6709\u6a21\u578b\u8fdb\u884c\u526a\u679d"},{"location":"7/#_15","text":"\u8fd9\u91cc\u6211\u4eec\u5c06\u4f7f\u7528LeNet\u4f5c\u4e3a\u526a\u679d\u7684\u5bf9\u8c61\uff0c\u5f53\u7136\u4f60\u53ef\u4ee5\u9009\u62e9\u4efb\u4f55\u4f60\u5df2\u7ecf\u8bad\u7ec3\u597d\u7684\u67d0\u4e2a\u7f51\u7edc\u548c\u53c2\u6570\u3002 # \u5bfc\u5165\u5fc5\u5907\u7684\u5de5\u5177\u5305 import torch from torch import nn import torch.nn.utils.prune as prune import torch.nn.functional as F device = torch . device ( \"cuda\" if torch . cuda . is_available () else \"cpu\" ) # \u8fd9\u91cc\u4e0d\u518d\u5bf9LeNet\u7f51\u7edc\u505a\u8fc7\u591a\u7684\u4ecb\u7ecd\uff0c\u56e0\u4e3a\u6211\u4eec\u7684\u91cd\u70b9\u662f\u526a\u679d\u6280\u672f # \u65e0\u8bba\u4f60\u4f7f\u7528\u54ea\u4e00\u79cd\u7f51\u7edc\u8fdb\u884c\u526a\u679d\uff0c\u4f60\u5fc5\u987b\u719f\u77e5\u8fd9\u4e2a\u7f51\u7edc\u4e2d\u7684\u7ec4\u6210\u90e8\u5206\u5373\u54ea\u4e9b\u80fd\u591f\u526a\u679d # \u6bd4\u5982\u5728\u8fd9\u91cc\uff0cconv1\uff0cconv2\uff0cfc1\uff0cfc2\uff0cfc3\u90fd\u662f\u53ef\u4ee5\u88ab\u526a\u679d\u7684 class LeNet ( nn . Module ): def __init__ ( self ): super ( LeNet , self ) . __init__ () self . conv1 = nn . Conv2d ( 1 , 6 , 3 ) self . conv2 = nn . Conv2d ( 6 , 16 , 3 ) self . fc1 = nn . Linear ( 16 * 5 * 5 , 120 ) # 5x5 image dimension self . fc2 = nn . Linear ( 120 , 84 ) self . fc3 = nn . Linear ( 84 , 10 ) def forward ( self , x ): x = F . max_pool2d ( F . relu ( self . conv1 ( x )), ( 2 , 2 )) x = F . max_pool2d ( F . relu ( self . conv2 ( x )), 2 ) x = x . view ( - 1 , int ( x . nelement () / x . shape [ 0 ])) x = F . relu ( self . fc1 ( x )) x = F . relu ( self . fc2 ( x )) x = self . fc3 ( x ) return x # \u83b7\u5f97\u8fd9\u4e2a\u6a21\u578b\u5bf9\u8c61 model = LeNet () . to ( device = device )","title":"\u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5de5\u5177\u5305\u5e76\u83b7\u5f97\u6a21\u578b"},{"location":"7/#_16","text":"\u4e0b\u9762\u6211\u4eec\u4f1a\u4f7f\u7528\u526a\u679d\u5de5\u5177\u5e76\u9010\u6b65\u67e5\u770b\u53c2\u6570\u7684\u53d8\u5316\uff0c\u5148\u6765\u770b\u770b\u6ca1\u6709\u526a\u679d\u4e4b\u524d\u7684\u72b6\u6001\u3002 # \u83b7\u5f97conv1\u6a21\u5757 module = model . conv1 # \u67e5\u770b\u8be5\u6a21\u5757\u7684\u6240\u6709\u539f\u751f\u53c2\u6570\uff0c\u4e00\u822c\u7531\u539f\u751fweight\u548c\u539f\u751fbias\u7ec4\u6210 # \u4ec0\u4e48\u662f\u539f\u751f\u53c2\u6570\u5462\uff1f # \u8fd9\u91cc\u662f\u56e0\u4e3atorch\u5728\u8bbe\u8ba1\u5b58\u50a8\u7f51\u7edc\u53c2\u6570\u65f6\uff0c\u5141\u8bb8\u4e3a\u53c2\u6570\u6dfb\u52a0\u4fee\u6539\u65b9\u5f0f\uff08\u5982\u8499\u7248\uff09\uff0c # \u8fd9\u4e9b\u4fee\u6539\u65b9\u5f0f\u4ee5buffer\u7684\u5f62\u5f0f\u5b58\u50a8\uff0c\u4e0d\u4f1a\u76f4\u63a5\u4f5c\u7528\u5728named_parameters\u4e2d\u7684\u53c2\u6570\u4e0a\uff0c # \u56e0\u6b64\u628anamed_parameters\u4e2d\u7684\u53c2\u6570\u53eb\u505a\u539f\u751f\u53c2\u6570\u3002 # \u90a3\u5982\u4f55\u83b7\u5f97\u4f5c\u7528\u4e86buffer\u4e4b\u540e\u7684\u771f\u5b9e\u53c2\u6570\u5462\uff1f # \u4f7f\u7528module.weight\u548cmodule.bias\u5373\u53ef print ( list ( module . named_parameters ())) \u8f93\u51fa\u6548\u679c\uff1a [('weight', Parameter containing: tensor([[[[ 0.3161, -0.2212, 0.0417], [ 0.2488, 0.2415, 0.2071], [-0.2412, -0.2400, -0.2016]]], [[[ 0.0419, 0.3322, -0.2106], [ 0.1776, -0.1845, -0.3134], [-0.0708, 0.1921, 0.3095]]], [[[-0.2070, 0.0723, 0.2876], [ 0.2209, 0.2077, 0.2369], [ 0.2108, 0.0861, -0.2279]]], [[[-0.2799, -0.1527, -0.0388], [-0.2043, 0.1220, 0.1032], [-0.0755, 0.1281, 0.1077]]], [[[ 0.2035, 0.2245, -0.1129], [ 0.3257, -0.0385, -0.0115], [-0.3146, -0.2145, -0.1947]]], [[[-0.1426, 0.2370, -0.1089], [-0.2491, 0.1282, 0.1067], [ 0.2159, -0.1725, 0.0723]]]], device='cuda:0', requires_grad=True)), ('bias', Parameter containing: tensor([-0.1214, -0.0749, -0.2656, -0.1519, -0.1021, 0.1425], device='cuda:0', requires_grad=True))] # \u67e5\u770b\u53c2\u6570\u4fee\u6539\u65b9\u5f0f\u5373buffer # \u6ca1\u6709buffer\u7684\u539f\u751f\u53c2\u6570\u5c31\u662f\u771f\u5b9e\u53c2\u6570 print ( list ( module . named_buffers ())) \u8f93\u51fa\u6548\u679c\uff1a [] \u4f7f\u7528prune.random_unstructured\u968f\u673a\u65b9\u5f0f\u8fdb\u884c\u526a\u679d # \u526a\u679d\u6307\u5b9amoudle\u5373conv1\u4e2d\u7684weight\u53c2\u6570\uff0c\u4fee\u526a\uff08\u8bbe\u7f6e\u4e3a0\uff0930% prune . random_unstructured ( module , name = \"weight\" , amount = 0.3 ) # \u67e5\u770b\u4fee\u526a\u540e\u7684named_parameters\u53c2\u6570 print ( list ( module . named_parameters ())) \u8f93\u51fa\u6548\u679c\uff1a [('bias', Parameter containing: tensor([-0.1214, -0.0749, -0.2656, -0.1519, -0.1021, 0.1425], device='cuda:0', requires_grad=True)), ('weight_orig', Parameter containing: tensor([[[[ 0.3161, -0.2212, 0.0417], [ 0.2488, 0.2415, 0.2071], [-0.2412, -0.2400, -0.2016]]], [[[ 0.0419, 0.3322, -0.2106], [ 0.1776, -0.1845, -0.3134], [-0.0708, 0.1921, 0.3095]]], [[[-0.2070, 0.0723, 0.2876], [ 0.2209, 0.2077, 0.2369], [ 0.2108, 0.0861, -0.2279]]], [[[-0.2799, -0.1527, -0.0388], [-0.2043, 0.1220, 0.1032], [-0.0755, 0.1281, 0.1077]]], [[[ 0.2035, 0.2245, -0.1129], [ 0.3257, -0.0385, -0.0115], [-0.3146, -0.2145, -0.1947]]], [[[-0.1426, 0.2370, -0.1089], [-0.2491, 0.1282, 0.1067], [ 0.2159, -0.1725, 0.0723]]]], device='cuda:0', requires_grad=True))] \u5728\u7ed3\u679c\u4e2d\uff0c\u6211\u4eec\u53d1\u73b0\u539f\u751f\u53c2\u6570\u5e76\u6ca1\u6709\u53d8\u5316\uff0c\u800c\u662f\u540d\u5b57\u7531weight\u53d8\u6210\u4e86weight_orig\uff0c\u8fdb\u4e00\u6b65\u5f3a\u8c03\u4e86\u5b83\u662f\u539f\u751f\u53c2\u6570\u3002 \u4e3a\u4ec0\u4e48\u8981\u8fdb\u4e00\u6b65\u5f3a\u8c03\u539f\u751f\u5462\uff0c\u662f\u56e0\u4e3a\u6b64\u65f6buffer\u4e2d\u5df2\u7ecf\u591a\u4e86\u4e00\u4e9b\u4fe1\u606f\uff0c\u539f\u751f\u53c2\u6570\u548c\u771f\u5b9e\u53c2\u6570\u5df2\u7ecf\u4e0d\u518d\u7b49\u4ef7\u3002 print ( list ( module . named_buffers ())) \u8f93\u51fa\u6548\u679c\uff1a [('weight_mask', tensor([[[[0., 1., 0.], [1., 0., 0.], [1., 1., 1.]]], [[[1., 0., 1.], [1., 1., 0.], [1., 0., 1.]]], [[[1., 0., 0.], [0., 1., 1.], [1., 1., 1.]]], [[[1., 0., 0.], [1., 1., 1.], [1., 1., 1.]]], [[[1., 0., 1.], [1., 1., 1.], [0., 1., 1.]]], [[[1., 1., 1.], [1., 1., 0.], [1., 1., 0.]]]], device='cuda:0'))] buffer\u4e2d\u5df2\u7ecf\u5b58\u5728\u4e86\u7528\u4e8e\u526a\u679d\u7684\u8499\u7248 \u4f7f\u7528module.weight\u67e5\u770b\u771f\u5b9e\u4f7f\u7528\u53c2\u6570\uff1a print ( module . weight ) \u8f93\u51fa\u6548\u679c\uff1a tensor([[[[ 0.0000, -0.2212, 0.0000], [ 0.2488, 0.0000, 0.0000], [-0.2412, -0.2400, -0.2016]]], [[[ 0.0419, 0.0000, -0.2106], [ 0.1776, -0.1845, -0.0000], [-0.0708, 0.0000, 0.3095]]], [[[-0.2070, 0.0000, 0.0000], [ 0.0000, 0.2077, 0.2369], [ 0.2108, 0.0861, -0.2279]]], [[[-0.2799, -0.0000, -0.0000], [-0.2043, 0.1220, 0.1032], [-0.0755, 0.1281, 0.1077]]], [[[ 0.2035, 0.0000, -0.1129], [ 0.3257, -0.0385, -0.0115], [-0.0000, -0.2145, -0.1947]]], [[[-0.1426, 0.2370, -0.1089], [-0.2491, 0.1282, 0.0000], [ 0.2159, -0.1725, 0.0000]]]], device='cuda:0', grad_fn=<MulBackward0>)","title":"\u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528\u526a\u679d\u5de5\u5177\u5e76\u4e86\u89e3\u5176\u4f5c\u7528\u65b9\u5f0f"},{"location":"7/#_17","text":"\u5047\u5982\u4f60\u5df2\u7ecf\u5bf9\u526a\u679d\u540e\u7684\u6a21\u578b\u8fdb\u884c\u4e86\u5fc5\u8981\u7684\u9a8c\u8bc1\uff0c\u5e76\u89c9\u5f97\u5b83\u53ef\u4ee5\u88ab\u4fdd\u5b58\u5e76\u5728\u5c06\u6765\u90e8\u7f72\u4f7f\u7528\uff0c\u90a3\u4e48\u4f60\u9700\u8981\u6301\u4e45\u5316\u6a21\u578b\u3002 # \u4e00\u822c\u6211\u4eec\u4f1a\u9996\u5148\u5c06buffer\u4e2d\u7684\u8499\u7248\u6c38\u4e45\u4f5c\u7528\u5728name_parameters\u4e2d\u7684\u53c2\u6570\u4e0a # \u8fd9\u91cc\u7684remove\u4e0d\u662f\u79fb\u9664\uff0c\u800c\u662f\u6c38\u4e45\u5316 prune . remove ( module , 'weight' ) print ( list ( module . named_parameters ())) \u8f93\u51fa\u6548\u679c\uff1a [('bias_orig', Parameter containing: tensor([-0.1214, -0.0749, -0.2656, -0.1519, -0.1021, 0.1425], device='cuda:0', requires_grad=True)), ('weight', Parameter containing: tensor([[[[ 0.0000, -0.2212, 0.0000], [ 0.2488, 0.0000, 0.0000], [-0.2412, -0.2400, -0.2016]]], [[[ 0.0000, 0.0000, -0.0000], [ 0.0000, -0.0000, -0.0000], [-0.0000, 0.0000, 0.0000]]], [[[-0.2070, 0.0000, 0.0000], [ 0.0000, 0.2077, 0.2369], [ 0.2108, 0.0861, -0.2279]]], [[[-0.0000, -0.0000, -0.0000], [-0.0000, 0.0000, 0.0000], [-0.0000, 0.0000, 0.0000]]], [[[ 0.2035, 0.0000, -0.1129], [ 0.3257, -0.0385, -0.0115], [-0.0000, -0.2145, -0.1947]]], [[[-0.0000, 0.0000, -0.0000], [-0.0000, 0.0000, 0.0000], [ 0.0000, -0.0000, 0.0000]]]], device='cuda:0', requires_grad=True))] print ( list ( module . named_buffers ())) \u8f93\u51fa\u6548\u679c\uff1a [] \u6b64\u65f6buffer\u4e2d\u5df2\u7ecf\u6ca1\u6709\u4efb\u4f55\u4fee\u6539\uff0c\u6b64\u65f6\u539f\u751f\u53c2\u6570\u548c\u771f\u5b9e\u53c2\u6570\u7b49\u4ef7\u3002 \u4fdd\u5b58\u5e8f\u5217\u5316\u6a21\u578b\uff1a PATH = \"./model.pth\" torch . save ( model . state_dict (), PATH ) print ( model . state_dict () . keys ()) \u8f93\u51fa\u6548\u679c\uff1a odict_keys(['conv1.bias', 'conv1.weight', 'conv2.weight', 'conv2.bias', 'fc1.weight', 'fc1.bias', 'fc2.weight', 'fc2.bias', 'fc3.weight', 'fc3.bias']) \u5b9e\u9645\u4e0a\u5047\u5982\u4f60\u4e0d\u8fdb\u884cprune.remove\u64cd\u4f5c\uff0c\u76f4\u63a5\u4fdd\u5b58state_dict()\u4e5f\u662f\u53ef\u4ee5\u7684\uff0c\u56e0\u4e3abuffer\u4e5f\u53ef\u4ee5\u88ab\u4fdd\u5b58\u5728state_dict\u4e2d\uff0c\u56e0\u4e3a\u526a\u679d\u540e\u5f80\u5f80\u9700\u8981\u7ee7\u7eed\u91cd\u65b0\u8bad\u7ec3\uff0c\u4e00\u822c\u76f4\u5230\u6700\u540e\u5224\u65ad\u526a\u679d\u6a21\u578b\u53ef\u7528\u624d\u4f7f\u7528remove\u6c38\u4e45\u5316\u526a\u679d\u53c2\u6570\u3002","title":"\u7b2c\u4e09\u6b65\uff1a\u6301\u4e45\u5316\u4fee\u526a\u540e\u7684\u6a21\u578b"},{"location":"7/#_18","text":"\u521a\u521a\u6211\u4eec\u5b66\u4e60\u7684\u90fd\u662f\u201c\u5c40\u90e8\u201d\u7684\u526a\u679d\u65b9\u5f0f\uff0c\u800c\u5b9e\u9645\u5de5\u7a0b\u4e2d\u6211\u4eec\u5f80\u5f80\u76f4\u63a5\u9488\u5bf9\u6a21\u578b\u8fdb\u884c\u6574\u4f53\u526a\u679d\u3002\u4e0b\u9762\u5c31\u662f\u6574\u4f53\u526a\u679d\u7684\u65b9\u6cd5\uff1a # \u83b7\u5f97\u6a21\u578b model = LeNet () # \u7528\u5143\u7ec4\u6307\u5b9a\u9700\u8981\u526a\u679d\u7684\u5c42\u548c\u53c2\u6570\u7c7b\u578b parameters_to_prune = ( ( model . conv1 , 'weight' ), ( model . conv2 , 'weight' ), ( model . fc1 , 'weight' ), ( model . fc2 , 'weight' ), ( model . fc3 , 'weight' ), ) # \u8fdb\u884c\u5168\u5c40\u526a\u679d\uff0c\u53c2\u6570\u5206\u522b\u662f\u9700\u8981\u526a\u679d\u7684\u5c42\u548c\u53c2\u6570\u7c7b\u578b\uff0c\u526a\u679d\u65b9\u6cd5\uff0c\u526a\u679d\u6bd4\u4f8b # \u901a\u8fc7\u8fd9\u6837\u7684\u64cd\u4f5c\u6211\u4eec\u5c31\u53ef\u4ee5\u5f97\u5230\u526a\u679d\u540e\u7684\u6a21\u578b\uff0c\u8fd9\u91cc\u76840.2\u662f\u6574\u4f53\u768420%\uff0c\u5404\u4e2a\u90e8\u5206\u526a\u679d\u572820%\u5de6\u53f3 # \u8fd9\u91cc\u4f7f\u7528\u4e86L1\u526a\u679d prune . global_unstructured ( parameters_to_prune , pruning_method = prune . L1Unstructured , amount = 0.2 , ) print ( model . state_dict () . keys ()) print ( \"#################\" ) # \u6c38\u4e45\u5316\u53c2\u6570 for module , name in parameters_to_prune : prune . remove ( module , name ) print ( model . state_dict () . keys ()) \u8f93\u51fa\u6548\u679c\uff1a dict_keys(['conv1.bias', 'conv1.weight', 'conv2.weight', 'conv2.bias', 'fc1.weight', 'fc1.bias', 'fc2.weight', 'fc2.bias', 'fc3.weight', 'fc3.bias']) odict_keys(['conv1.bias', 'conv1.weight_orig', 'conv1.weight_mask', 'conv2.bias', 'conv2.weight_orig', 'conv2.weight_mask', 'fc1.bias', 'fc1.weight_orig', 'fc1.weight_mask', 'fc2.bias', 'fc2.weight_orig', 'fc2.weight_mask', 'fc3.bias', 'fc3.weight_orig', 'fc3.weight_mask']) ################# odict_keys(['conv1.bias', 'conv1.weight', 'conv2.weight', 'conv2.bias', 'fc1.weight', 'fc1.bias', 'fc2.weight', 'fc2.bias', 'fc3.weight', 'fc3.bias']) odict_keys(['conv1.bias', 'conv1.weight', 'conv2.bias', 'conv2.weight', 'fc1.bias', 'fc1.weight', 'fc2.bias', 'fc2.weight', 'fc3.bias', 'fc3.weight']) \u68c0\u67e5\u4e00\u4e0b\u5168\u5c40\u526a\u679d\u768420%\u5728\u5404\u4e2a\u5c42\u4e2d\u526a\u679d\u5360\u6bd4: print ( \"Sparsity in conv1.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . conv1 . weight == 0 )) / float ( model . conv1 . weight . nelement ()) ) ) print ( \"Sparsity in conv2.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . conv2 . weight == 0 )) / float ( model . conv2 . weight . nelement ()) ) ) print ( \"Sparsity in fc1.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . fc1 . weight == 0 )) / float ( model . fc1 . weight . nelement ()) ) ) print ( \"Sparsity in fc2.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . fc2 . weight == 0 )) / float ( model . fc2 . weight . nelement ()) ) ) print ( \"Sparsity in fc3.weight: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . fc3 . weight == 0 )) / float ( model . fc3 . weight . nelement ()) ) ) print ( \"Global sparsity: {:.2f}%\" . format ( 100. * float ( torch . sum ( model . conv1 . weight == 0 ) + torch . sum ( model . conv2 . weight == 0 ) + torch . sum ( model . fc1 . weight == 0 ) + torch . sum ( model . fc2 . weight == 0 ) + torch . sum ( model . fc3 . weight == 0 ) ) / float ( model . conv1 . weight . nelement () + model . conv2 . weight . nelement () + model . fc1 . weight . nelement () + model . fc2 . weight . nelement () + model . fc3 . weight . nelement () ) ) ) \u8f93\u51fa\u6548\u679c\uff1a Sparsity in conv1.weight: 7.41% Sparsity in conv2.weight: 9.49% Sparsity in fc1.weight: 22.00% Sparsity in fc2.weight: 12.28% Sparsity in fc3.weight: 9.76% Global sparsity: 20.00% \u5e38\u7528\u7684\u526a\u679d\u65b9\u5f0f\u89e3\u91ca\uff1a RandomUnstructured\uff1a\u968f\u673a\u526a\u679d L1Unstructured\uff1a\u6309\u7167L1\u8303\u6570\uff08\u7edd\u5bf9\u503c\u5927\u5c0f\uff09\u526a\u679d\uff0c\u56e0\u4e3a\u6570\u503c\u8d8a\u5c0f\u5bf9\u7ed3\u679c\u7684\u6270\u52a8\u4e5f\u8d8a\u5c0f\u3002","title":"\u7b2c\u56db\u6b65\uff1a\u5de5\u7a0b\u4e2d\u5e38\u7528\u7684\u4fee\u526a\u65b9\u6cd5"},{"location":"7/#_19","text":"\u5b66\u4e60\u4e86\u6a21\u578b\u526a\u679d\u539f\u7406 \u5b66\u4e60\u4e86\u4f7f\u7528prune\u5bf9\u5df2\u6709\u6a21\u578b\u8fdb\u884c\u526a\u679d \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165\u5de5\u5177\u5305\u5e76\u83b7\u5f97\u6a21\u578b \u7b2c\u4e8c\u6b65\uff1a\u4f7f\u7528\u526a\u679d\u5de5\u5177\u5e76\u4e86\u89e3\u5176\u4f5c\u7528\u65b9\u5f0f \u7b2c\u4e09\u6b65\uff1a\u6301\u4e45\u5316\u4fee\u526a\u540e\u7684\u6a21\u578b \u7b2c\u56db\u6b65\uff1a\u5de5\u7a0b\u4e2d\u5e38\u7528\u7684\u4fee\u526a\u65b9\u6cd5","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"7/#73-onnx-runtime","text":"","title":"7.3 \u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u63a8\u65ad\u52a0\u901f"},{"location":"7/#_20","text":"\u4e86\u89e3ONNX\u53ca\u5176ONNX-Runtime\u7684\u4e3b\u8981\u4f5c\u7528\u3002 \u638c\u63e1\u5982\u4f55\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u63a8\u65ad\u52a0\u901f\u3002","title":"\u5b66\u4e60\u76ee\u6807"},{"location":"7/#onnxonnx-runtime","text":"ONNX\uff08Open Neural Network Exchange\uff09\u5f00\u653e\u5f0f\u795e\u7ecf\u7f51\u7edc\u4ea4\u6362\u683c\u5f0f\uff0c\u4e0etorch\u7684pth\uff0ckeras\u7684h5\uff0ctensorflow\u7684pb\u4e00\u6837\uff0c\u5b83\u5c5e\u4e8e\u4e00\u79cd\u6a21\u578b\u683c\u5f0f\u3002 \u8fd9\u79cd\u4ea4\u6362\u683c\u5f0f\u88ab\u8bbe\u8ba1\u7684\u521d\u8877\uff1a\u5e0c\u671b\u5404\u79cd\u6a21\u578b\u6846\u67b6\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u80fd\u591f\u901a\u7528\u3002\u800c\u73b0\u5728\u5b83\u5df2\u7ecf\u7ed3\u5408ONNX-Runtime\u6210\u4e3a\u4e00\u79cd\u52a0\u901f\u6a21\u578b\u63a8\u7406\u7684\u65b9\u6cd5\u3002 ONNX-Runtime\u5c31\u662f\u6307ONNX\u683c\u5f0f\u6a21\u578b\u7684\u8fd0\u884c\u73af\u5883\uff0c\u5b83\u7531\u5fae\u8f6f\u5f00\u6e90\uff0c\u8be5\u73af\u5883\u96c6\u6210\u591a\u79cd\u6a21\u578b\u52a0\u901f\u5de5\u5177\uff0c\u5982Nvidia\u7684TensorRT\u7b49\uff0c\u7528\u4e8e\u5feb\u901f\u6a21\u578b\u63a8\u65ad\u3002 \u80fd\u591f\u539f\u751f\u652f\u6301ONNX\u6a21\u578b\u8f6c\u6362\u7684\u6a21\u578b\u5305\u62ecPytorch\uff0cMXNET\uff0cCaffe2\u7b49\u6846\u67b6\uff08Tensorflow\u4e0d\u53ef\u4ee5\uff09\u3002 \u56fe\u4e2d\uff0c\u84dd\u8272\u7684\u90e8\u5206\u5c31\u662fONNX-Runtime\uff0c\u5b83\u80fd\u591f\u81ea\u52a8\u5229\u7528\u5df2\u6709\u8bbe\u5907\u4e0a\u7684\u5404\u79cd\u52a0\u901f\u5de5\u5177\uff0c\u5b8c\u6210\u6a21\u578b\u52a0\u901f\uff0c\u65e0\u9700\u4eba\u5de5\u53c2\u4e0e\uff0c\u53ea\u9700\u8981\u6211\u4eec\u5c06ONNX\u683c\u5f0f\u7684\u6a21\u578b\u4f5c\u4e3a\u8f93\u5165\u5373\u53ef\u3002","title":"\u4ec0\u4e48\u662fONNX\u548cONNX-Runtime"},{"location":"7/#onnx-runtime","text":"\u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177\u5305 \u7b2c\u4e8c\u6b65\uff1a\u5c06\u5df2\u6709\u6a21\u578b\u8f6c\u6362\u6210ONNX\u683c\u5f0f \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u9884\u6d4b \u7b2c\u56db\u6b65\uff1a\u5bf9\u6bd4\u7ed3\u679c\u5dee\u5f02\u548c\u63a8\u65ad\u65f6\u95f4","title":"\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u63a8\u65ad\u52a0\u901f\u7684\u6b65\u9aa4"},{"location":"7/#_21","text":"# onnx 1.7.0 # onnxruntime 1.4.0 pip install onnx onnxruntime","title":"\u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177\u5305"},{"location":"7/#onnx","text":"import torch import torch.onnx import torchvision # \u8fd9\u91cc\u4ee5resnet18\u6a21\u578b\u4e3a\u4f8b model = torchvision . models . resnet18 ( pretrained = True ) # \u968f\u673a\u521d\u59cb\u5316\u4e00\u4e2a\u6307\u5b9ashape\u7684\u8f93\u5165 input = torch . randn ( 1 , 3 , 224 , 224 , requires_grad = True ) # \u8bc4\u4f30\u6a21\u5f0f model . eval () # \u5b9a\u4e49onnx\u8f93\u5165\u8f93\u51fa\u7684\u540d\u5b57\uff08\u683c\u5f0f\u9700\u8981\uff09 input_names = [ \"input1\" ] output_names = [ \"output1\" ] onnx_model_name = \"resnet18.onnx\" # \u4f7f\u7528torch.onnx\u5bfc\u51faresnet18.onnx torch . onnx . export ( model , input , onnx_model_name , input_names = input_names , output_names = output_names ) \u8f93\u51fa\u6548\u679c: \u5728\u8be5\u811a\u672c\u8def\u5f84\u4e0b\u5f97\u5230resnet18.onnx\u683c\u5f0f\u7684\u6a21\u578b\u3002","title":"\u7b2c\u4e8c\u6b65\uff1a\u5c06\u5df2\u6709\u6a21\u578b\u8f6c\u6362\u6210ONNX\u683c\u5f0f"},{"location":"7/#onnx-runtime_1","text":"import onnxruntime # \u5f53\u524donnxruntime\u7684\u8f93\u5165\u8981\u6c42\u7684\u4e3anumpy\u5f62\u5f0f def to_numpy ( tensor ): \"\"\"\u5c06tensor\u8f6c\u5316\u6210numpy\"\"\" return tensor . detach () . cpu () . numpy () if tensor . requires_grad else tensor . cpu () . numpy () # \u4f7f\u7528\u6a21\u578b\u521b\u5efaonnxruntime\u7684session ort_session = onnxruntime . InferenceSession ( onnx_model_name ) # \u5728session\u4e2d\u8fd0\u884c\uff0c\u8981\u6c42\u8f93\u5165\u4e3adict\u5f62\u5f0f\uff0ckey\u4e3a\u4e4b\u524d\u5b9a\u4e49\u597d\u7684input\u540d\u5b57\uff0c\u4e14input\u5fc5\u987b\u4e3anumpy\u5f62\u5f0f ort_outs = ort_session . run ( None , { ort_session . get_inputs ()[ 0 ] . name : to_numpy ( input )})","title":"\u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u9884\u6d4b"},{"location":"7/#_22","text":"# pth\u6a21\u578b\u7684\u7ed3\u679c torch_out = to_numpy ( model ( input )) # onnx\u6a21\u578b\u7684\u7ed3\u679c ort_out = ort_outs [ 0 ] print ( torch_out ) print () print ( ort_out ) \u8f93\u51fa\u6548\u679c: ## \u7ed3\u679c\u662f\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u6ca1\u6709\u4efb\u4f55\u5dee\u5f02 [[ 6.46063685e-01 2.58094740e+00 2.67934680e+00 2.84586716e+00 4.45001364e+00 3.60939002e+00 3.51634717e+00 2.71348268e-01 -1.15397012e+00 -7.00954318e-01 -7.89242506e-01 9.08504605e-01 1.55155942e-01 1.08485329e+00 1.31591737e+00 5.42257011e-01]] [[ 6.46063685e-01 2.58094740e+00 2.67934680e+00 2.84586716e+00 4.45001364e+00 3.60939002e+00 3.51634717e+00 2.71348268e-01 -1.15397012e+00 -7.00954318e-01 -7.89242506e-01 9.08504605e-01 1.55155942e-01 1.08485329e+00 1.31591737e+00 5.42257011e-01]] import time # \u5bf9\u6bd4\u4e24\u8005\u5728CPU\u4e0a\u7684\u9884\u6d4b\u65f6\u95f4\u5dee\u5f02 # \u4e8c\u8005\u5728GPU\u4e0a\u7684\u8868\u73b0\u76f8\u5f53\uff0c\u56e0\u4e3aonnxruntime\u672c\u8eab\u4e5f\u662f\u8c03\u7528cuda start = time . time () torch_out = model ( input ) end = time . time () print ( end - start ) start = time . time () ort_outs = ort_session . run ( None , { \"input1\" : to_numpy ( input )}) end = time . time () print ( end - start ) \u8f93\u51fa\u6548\u679c: # pth\u6a21\u578b\u63a8\u65ad\u65f6\u95f4\u4e3a24.6ms 0.024605449676513672 # onnx\u4ec5\u97008.5ms\uff0c\u5927\u7ea6\u8282\u77012-3\u500d\u65f6\u95f4 0.008518030548095703","title":"\u7b2c\u56db\u6b65\uff1a\u5bf9\u6bd4\u7ed3\u679c\u5dee\u5f02\u548c\u63a8\u65ad\u65f6\u95f4"},{"location":"7/#onnx-runtime_2","text":"\u4e0b\u9762\u4ee5\u5176\u8c03\u7528TensorRT(nvidia\u52a0\u901f\u5de5\u5177)\u52a0\u901fBERT\u4e3a\u4f8b\u8fdb\u884c\u8bf4\u660e\uff1a \u5728BERT\u7f16\u7801\u5668\u4e2d\uff0c\u5c06LayerNormalization\u5c42\u548c\u6b8b\u5dee\u8fde\u63a5\u8fdb\u884c\u878d\u5408\u4ee5\u52a0\u901f\u8ba1\u7b97\u3002 \u5bf9gelu\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528 \u7b80\u5316gelu \u8ba1\u7b97\u65b9\u6cd5\u52a0\u901f\u8ba1\u7b97\u3002 \u5bf9\u6240\u6709\u7684self-attention layer\u4e2d\u7684\u5168\u8fde\u63a5\u5c42\u8fdb\u884c\u878d\u5408\uff0c\u4ee5\u51cf\u5c11\u5185\u5b58\u548c\u6b63\u53cd\u5411\u4f20\u64ad\u6b21\u6570\u52a0\u901f\u8ba1\u7b97\u3002 ONNX-Runtime\u5185\u7f6e\u9488\u5bf9\u4e3b\u6d41\u6a21\u578b\uff08BERT\uff0cRESNET\u7b49\uff09\u7684\u5e76\u884c\u8ba1\u7b97\u6a21\u5f0f\uff0c\u5b9e\u73b0\u52a0\u901f\u8ba1\u7b97\u3002","title":"ONNX-Runtime\u80fd\u591f\u52a0\u901f\u7684\u539f\u7406"},{"location":"7/#_23","text":"\u5b66\u4e60\u4e86\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u63a8\u65ad\u52a0\u901f\u7684\u6b65\u9aa4\uff1a \u7b2c\u4e00\u6b65\uff1a\u5b89\u88c5\u5fc5\u5907\u7684\u5de5\u5177\u5305 \u7b2c\u4e8c\u6b65\uff1a\u5c06\u5df2\u6709\u6a21\u578b\u8f6c\u6362\u6210ONNX\u683c\u5f0f \u7b2c\u4e09\u6b65\uff1a\u4f7f\u7528ONNX-Runtime\u8fdb\u884c\u6a21\u578b\u9884\u6d4b \u7b2c\u56db\u6b65\uff1a\u5bf9\u6bd4\u7ed3\u679c\u5dee\u5f02\u548c\u63a8\u65ad\u65f6\u95f4 ONNX-Runtime\u80fd\u591f\u52a0\u901f\u7684\u539f\u56e0\uff1a 1\uff0c\u4f5c\u4e3a\u52a0\u901f\u5de5\u5177\u7684\u96c6\u6210\u73af\u5883\uff0c\u80fd\u591f\u81ea\u52a8\u8c03\u7528\u52a0\u901f\u5de5\u5177cuda\uff0cTensorRT\uff0cnGragh\u7b49\u3002 2\uff0c\u5bf9\u7279\u5b9a\u6a21\u578b\u7684\u5c42\u548c\u5f20\u91cf\u8fdb\u884c\u878d\u5408\uff0c\u4ee5\u51cf\u5c11\u6b63\u53cd\u5411\u4f20\u64ad\u6b21\u6570\u3002 3\uff0c\u5bf9\u7279\u5b9a\u6fc0\u6d3b\u51fd\u6570gelu\u8fdb\u884c\u7b80\u5316\u8ba1\u7b97\u3002 4\uff0c\u9488\u5bf9\u4e3b\u6d41\u6a21\u578b\uff08BERT\uff0cRESNET\u7b49\uff09\u7684\u5e76\u884c\u8ba1\u7b97\u6a21\u5f0f\uff0c\u5b9e\u73b0\u52a0\u901f\u8ba1\u7b97\u3002","title":"\u5c0f\u8282\u603b\u7ed3"},{"location":"8/","text":"\u4fe1\u606f\u4e2d\u5fc3\u5bf9\u8bdd\u5b9e\u4f53\u62bd\u53d6API\u8bf4\u660e URL: http://47.241.24.21:8087/api/v1/get_info/ METHOD: POST DATA: sessionId\uff1a\u5bf9\u8bdd\u7684\u552f\u4e00\u6807\u8bc6 ip\uff1a\u7cfb\u7edf\u8bc6\u522b\u7684\u5b66\u5458\u53d1\u8d77\u5bf9\u8bdd\u5730\u5740 fromTitle\uff1a\u5b66\u5458\u53d1\u8d77\u5bf9\u8bdd\u7684\u9875\u9762 content\uff1a\u5b66\u5458\u4e0e\u54a8\u8be2\u5e08\u7684\u5bf9\u8bdd\u5185\u5bb9 content\u662f\u4e00\u4e2a\u5217\u8868\u5f62\u5f0f\uff0c\u5217\u8868\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4ee3\u8868\u54a8\u8be2\u5e08\u4e0e\u5b66\u5458\u7684\u4e00\u6b21\u5bf9\u8bdd\u3002 \u6bcf\u4e2a\u5b57\u5178\u4e2d\u4e00\u5b9a\u4e14\u53ea\u5305\u542b\"employee\"\u548c\"customer\"\u4e24\u4e2akey\uff0c\u5bf9\u5e94\u7684value\u4e3a\u5bf9\u8bdd\u5185\u5bb9\u3002\u8fd9\u91cc\u5047\u5b9aemployee\u7684\u5bf9\u8bdd\u65f6\u95f4\u4e00\u5b9a\u53d1\u751f\u5728customer\u4e4b\u524d\uff0c\u82e5customer\u5bf9\u8bdd\u524demployee\u65e0\u5bf9\u8bdd\u5185\u5bb9\uff0c\u5219\"employee\"\u4e3a\u7a7a\u5b57\u7b26\u4e32\"\", \u82e5customer\u5728\u6700\u540e\u65e0\u5bf9\u8bdd\u5185\u5bb9\uff0c\u5219\"customer\"\u4e3a\u7a7a\u5b57\u7b26\u4e32\"\"\u3002 \u5982\u679c\u4e00\u65b9\u6d88\u606f\u4eba\u5728\u8fde\u7eed\u53d1\u9001\u6d88\u606f\uff0c\u5219\u6bcf\u4e2a\u6d88\u606f\u4ee5\"\u00a5\"\u5206\u5272\u3002 DATA sample: { \"sessionId\" : \"23243\" , \"ip\" : \"\u4e2d\u56fd \u5317\u4eac \u5317\u4eac\" , \"fromTitle\" : \"\u9ed1\u9a6c\u7a0b\u5e8f\u5458C/C++\u4e0e\u7f51\u7edc\u653b\u9632\u57f9\u8bad\u5b98\u7f51-C/C++\u57f9\u8bad|C/C++\u4e0e\u7f51\u7edc\u653b\u9632\u57f9\u8bad\u673a\u6784\" , \"content\" : [ { \"employee\" : \"\u4f60\u597d\uff0c\u4f60\u662f\u60f3\u4e86\u89e3\u54ea\u4e2a\u8bfe\u7a0b\u5462\uff1f\u00a5\u8fd8\u5728\u4e48\u540c\u5b66\uff1f\" , \"customer\" : \"\u4ef7\u683c\uff1f\" }, { \"employee\" : \"\u60a8\u597d\u00a5\u60a8\u60f3\u4e86\u89e3\u54ea\u4e2a\u4e13\u4e1a\u7684\u5b66\u8d39\u5462\u00a5\u4e13\u4e1a\u4e0d\u540c\uff0c\u5b66\u65f6\u5b66\u8d39\u4e5f\u4e0d\u4e00\u6837\" , \"customer\" : \"C++\" }, { \"employee\" : \"\u8d35\u59d3\" , \"customer\" : \"\u5468\" }, { \"employee\" : \"\u597d\u7684\uff0c\u53ef\u4ee5\u7ed9\u60a8\u53d1\u9001\u4e00\u4efdC++\u7684\u8bfe\u7a0b\u8d44\u6599\uff0c\u5b66\u65f6\u5b66\u8d39\u548c\u5b66\u4e60\u8def\u7ebf\uff0c\u60a8\u53ef\u4ee5\u5148\u4e86\u89e3\u770b\u4e0b\" , \"customer\" : \"\u597d\" }, ], } RETURN: sessionId\uff1a\u5bf9\u8bdd\u7684\u552f\u4e00\u6807\u8bc6 subject\uff1a\u5b66\u5458\u7684\u610f\u5411\u5b66\u79d1 school\uff1a\u5b66\u5458\u7684\u610f\u5411\u6821\u533a phone\uff1a\u5b66\u5458\u7684\u624b\u673a\u53f7 wechat\uff1a\u5b66\u5458\u7684\u5fae\u4fe1 qq\uff1a\u5b66\u5458\u7684QQ\u53f7 name\uff1a\u5b66\u5458\u7684\u59d3\u540d RETURN Sample { \"sessionId\" : \"23243\" , \"subject\" : \"C++\" , \"school\" : \"\u5317\u4eac\" , \"phone\" : \"15242200223\" , \"wechat\" : \"15242200223\" , \"qq\" : \"unknown\" , \"name\" : \"\u5468\u540c\u5b66\" , } PYTHON \u8bf7\u6c42\u4ee3\u7801: import requests # \u8bf7\u6c42\u8def\u5f84\uff0c8087\u7aef\u53e3\u5728nginx\u7684\u914d\u7f6e\u4e2d\u6307\u5b9a url = \"http://47.241.24.21:8087/api/v1/get_info\" data = { \"sessionId\" : \"23243\" , \"ip\" : \"\u4e2d\u56fd \u5317\u4eac \u5317\u4eac\" , \"fromTitle\" : \"\u9ed1\u9a6c\u7a0b\u5e8f\u5458C/C++\u4e0e\u7f51\u7edc\u653b\u9632\u57f9\u8bad\u5b98\u7f51-C/C++\u57f9\u8bad|C/C++\u4e0e\u7f51\u7edc\u653b\u9632\u57f9\u8bad\u673a\u6784\" , \"content\" : [ { \"employee\" : \"\u4f60\u597d\uff0c\u4f60\u662f\u60f3\u4e86\u89e3\u54ea\u4e2a\u8bfe\u7a0b\u5462\uff1f\u00a5\u8fd8\u5728\u4e48\u540c\u5b66\uff1f\" , \"customer\" : \"\u4ef7\u683c\uff1f\" }, { \"employee\" : \"\u60a8\u597d\u00a5\u60a8\u60f3\u4e86\u89e3\u54ea\u4e2a\u4e13\u4e1a\u7684\u5b66\u8d39\u5462\u00a5\u4e13\u4e1a\u4e0d\u540c\uff0c\u5b66\u65f6\u5b66\u8d39\u4e5f\u4e0d\u4e00\u6837\" , \"customer\" : \"C++\" }, { \"employee\" : \"\u8d35\u59d3\" , \"customer\" : \"\u5468\" }, { \"employee\" : \"\u597d\u7684\uff0c\u53ef\u4ee5\u7ed9\u60a8\u53d1\u9001\u4e00\u4efdC++\u7684\u8bfe\u7a0b\u8d44\u6599\uff0c\u5b66\u65f6\u5b66\u8d39\u548c\u5b66\u4e60\u8def\u7ebf\uff0c\u60a8\u53ef\u4ee5\u5148\u4e86\u89e3\u770b\u4e0b\" , \"customer\" : \"\u597d\" }, ], } # \u591a\u5c42\u5d4c\u5957\u5fc5\u987b\u4f7f\u7528json res = requests . post ( url , json = data ) print ( res . text ) \u8f93\u51fa\u6548\u679c: { \"sessionId\":\"23243\", \"subject\":\"C++\", \"school\":\"unknown\", \"phone\":\"unknown\", \"wechat\":\"unknown\", \"qq\":\"unknown\", \"name\":\"\u5468\u540c\u5b66\" } \u786c\u4ef6\u9700\u6c42 \u8be5\u4efb\u52a1\u5c5e\u4e8e\u79bb\u7ebf\u4efb\u52a1\uff0c\u53ef\u7533\u8bf7\uff1a 16C\uff08CPU\u6838\u6570\uff09\uff0c32G\uff08\u5185\u5b58\u7a7a\u95f4\uff09\uff0c100G\uff08\u786c\u76d8\u7a7a\u95f4\uff09\u7684\u670d\u52a1\u5668\u89c4\u683c \u6839\u636e\u7ecf\u9a8c\u4ee5\u4e0a\u786c\u4ef6\u7684AI\u670d\u52a1\u63a5\u53e3QPS\u4e0a\u9650\u7ea6\u4e3a\uff1a1500 \u8003\u8bd5\u4e2d\u5fc3\u586b\u7a7a\u9898API\u8bf4\u660e URL: http://47.241.24.21:8087/api/v1/get_trans/ METHOD: POST DATA: \u5fc5\u987b\u4e3ajson\u683c\u5f0f. \u5171\u56db\u4e2akey\uff0c\u5206\u522b\u4e3a:pid, student_answer, true_answer, full_marks pid: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u95ee\u9898\u7684\u552f\u4e00\u6807\u8bc6 student_answer: \u5217\u8868\u7c7b\u578b\uff0c\u5b66\u751f\u7684\u7b54\u6848\uff0c\u82e5\u4e3a\u591a\u9879\u586b\u7a7a\u5219[\"a\", \"b\", \"...\"] true_answer: \u5217\u8868\u7c7b\u578b\uff0c\u6b63\u786e\u7b54\u6848\uff0c\u82e5\u4e3a\u591a\u9879\u586b\u7a7a\u5219[\"A\", \"B\", \"...\"] full_marks: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u8be5\u9898\u7684\u603b\u5206. DATA sample: { \"pid\" : \"12312\" , \"student_answer\" : [ \"alt\" ], \"true_answer\" : [ \"title\" ], \"full_marks\" : \"2\" , } RETURN: json\u683c\u5f0f. \u5171\u516d\u4e2akey\uff0c\u5206\u522b\u4e3a: status, pid, student_answer, true_answer, score, confidence. status: \u670d\u52a1\u54cd\u5e94\u7684\u72b6\u6001\uff0cstatus\u4e3a0\u4ee3\u8868\u6b63\u5e38\uff0cstatus\u4e3a1\u4ee3\u8868\u5f02\u5e38. pid, student_answer, true_answer\u4e0eDATA\u4e2d\u7684\u542b\u4e49\u76f8\u540c. score: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u670d\u52a1\u9884\u6d4b\u7684\u5f97\u5206. confidence: \u5f97\u5206\u7684\u7f6e\u4fe1\u5ea6\uff0c\u5206\u4e3a\u4e09\u4e2a\u7b49\u7ea7H\uff08\u9ad8\u7f6e\u4fe1\u5ea6\uff09\uff0cM\uff08\u4e2d\u7f6e\u4fe1\u5ea6\uff09\uff0cL\uff08\u4f4e\u7f6e\u4fe1\u5ea6\uff09. RETURN sample: { \"status\" : \"0\" , \"pid\" : \"12312\" , \"student_answer\" :[ \"alt\" ], \"true_answer\" :[ \"title\" ], \"score\" : \"0\" , \"confidence\" : \"H\" } PYTHON \u8bf7\u6c42\u4ee3\u7801: import requests url = \"http://47.241.24.21:8087/api/v1/get_trans/\" data = { \"pid\" : \"12312\" , \"student_answer\" : [ \"alt\" ], \"true_answer\" : [ \"title\" ], \"full_marks\" : \"2\" , } # \u591a\u5c42\u5d4c\u5957\u5fc5\u987b\u4f7f\u7528json res = requests . post ( url , json = data ) print ( res . text ) \u8f93\u51fa\u6548\u679c: { \"status\" : \"0\" , \"pid\" : \"12312\" , \"student_answer\" :[ \"alt\" ], \"true_answer\" :[ \"title\" ], \"score\" : \"0\" , \"confidence\" : \"M\" } \u786c\u4ef6\u9700\u6c42 \u8be5\u4efb\u52a1\u5c5e\u4e8e\u79bb\u7ebf\u4efb\u52a1\uff0c\u53ef\u7533\u8bf7\uff1a 16C\uff08CPU\u6838\u6570\uff09\uff0c32G\uff08\u5185\u5b58\u7a7a\u95f4\uff09\uff0c100G\uff08\u786c\u76d8\u7a7a\u95f4\uff09\u7684\u670d\u52a1\u5668\u89c4\u683c \u6839\u636e\u7ecf\u9a8c\u4ee5\u4e0a\u786c\u4ef6\u7684AI\u670d\u52a1\u63a5\u53e3QPS\u4e0a\u9650\u7ea6\u4e3a\uff1a1500 \u5fc5\u8981\u6587\u4ef6 \u5728\u4f7f\u7528Bert\u6a21\u578b\u65f6\uff0c\u9700\u8981\u7684run_glue.py\uff0c\u5177\u4f53\u4ee3\u7801\u5185\u5bb9\u8bf7\u8bbf\u95ee\uff1a http://git.itcast.cn/Stephen/AI-key-file/blob/master/run_glue.py \u6570\u636e\u5206\u6790\u56fe\u7247\u89e3\u6790API\u8bf4\u660e URL: http://47.241.24.21:8087/api/v1/get_pm/ METHOD: POST DATA: \u5fc5\u987b\u4e3ajson\u683c\u5f0f. image_id: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6 str(image_base64): \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u88abbase64\u7f16\u7801\u540e\u8fd8\u8981\u8f6c\u6210str DATA sample: { \"image_id\" : \"12345\" , \"image_base64\" : str(base 64 _data) } RETURN: json\u683c\u5f0f. image_id: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6 result: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u53ea\u53ef\u80fd\u4e3aoffline\u6216\u8005online\uff0c\u4ee3\u8868\u7ebf\u4e0b\u6216\u8005\u7ebf\u4e0a\u5f00\u73ed RETURN sample: { \"image_id\" : \"12345\" , \"result\" : \"offline\" } PYTHON \u8bf7\u6c42\u4ee3\u7801: import requests import base64 # \u5728\u8be5\u8def\u5f84\u4e0b\u51c6\u5907\u4e00\u5f20\u5e26\u8bc6\u522b\u7684\u56fe\u7247 image_path = \"/data/ItcastBrain/Pm/image/sample.jpg\" with open ( image_path , \"rb\" ) as f : # b64encode\uff1a\u7f16\u7801\uff0cb64decode: \u89e3\u7801 base64_data = base64 . b64encode ( f . read ()) data = { \"image_id\" : \"12345\" , \"image_base64\" : str ( base64_data )} url = \"http://47.241.24.21:8087/api/v1/get_pm/\" res = requests . post ( url , json = data ) print ( res . text ) \u8f93\u51fa\u6548\u679c: { \"image_id\" : \"12345\" , \"result\" : \"offline\" } \u786c\u4ef6\u9700\u6c42 \u8be5\u4efb\u52a1\u5c5e\u4e8e\u79bb\u7ebf\u4efb\u52a1\uff0c\u53ef\u7533\u8bf7\uff1a 16C\uff08CPU\u6838\u6570\uff09\uff0c32G\uff08\u5185\u5b58\u7a7a\u95f4\uff09\uff0c100G\uff08\u786c\u76d8\u7a7a\u95f4\uff09\u7684\u670d\u52a1\u5668\u89c4\u683c \u6839\u636e\u7ecf\u9a8c\u4ee5\u4e0a\u786c\u4ef6\u7684AI\u670d\u52a1\u63a5\u53e3QPS\u4e0a\u9650\u7ea6\u4e3a\uff1a1500","title":"8"},{"location":"8/#api","text":"URL: http://47.241.24.21:8087/api/v1/get_info/ METHOD: POST DATA: sessionId\uff1a\u5bf9\u8bdd\u7684\u552f\u4e00\u6807\u8bc6 ip\uff1a\u7cfb\u7edf\u8bc6\u522b\u7684\u5b66\u5458\u53d1\u8d77\u5bf9\u8bdd\u5730\u5740 fromTitle\uff1a\u5b66\u5458\u53d1\u8d77\u5bf9\u8bdd\u7684\u9875\u9762 content\uff1a\u5b66\u5458\u4e0e\u54a8\u8be2\u5e08\u7684\u5bf9\u8bdd\u5185\u5bb9 content\u662f\u4e00\u4e2a\u5217\u8868\u5f62\u5f0f\uff0c\u5217\u8868\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4ee3\u8868\u54a8\u8be2\u5e08\u4e0e\u5b66\u5458\u7684\u4e00\u6b21\u5bf9\u8bdd\u3002 \u6bcf\u4e2a\u5b57\u5178\u4e2d\u4e00\u5b9a\u4e14\u53ea\u5305\u542b\"employee\"\u548c\"customer\"\u4e24\u4e2akey\uff0c\u5bf9\u5e94\u7684value\u4e3a\u5bf9\u8bdd\u5185\u5bb9\u3002\u8fd9\u91cc\u5047\u5b9aemployee\u7684\u5bf9\u8bdd\u65f6\u95f4\u4e00\u5b9a\u53d1\u751f\u5728customer\u4e4b\u524d\uff0c\u82e5customer\u5bf9\u8bdd\u524demployee\u65e0\u5bf9\u8bdd\u5185\u5bb9\uff0c\u5219\"employee\"\u4e3a\u7a7a\u5b57\u7b26\u4e32\"\", \u82e5customer\u5728\u6700\u540e\u65e0\u5bf9\u8bdd\u5185\u5bb9\uff0c\u5219\"customer\"\u4e3a\u7a7a\u5b57\u7b26\u4e32\"\"\u3002 \u5982\u679c\u4e00\u65b9\u6d88\u606f\u4eba\u5728\u8fde\u7eed\u53d1\u9001\u6d88\u606f\uff0c\u5219\u6bcf\u4e2a\u6d88\u606f\u4ee5\"\u00a5\"\u5206\u5272\u3002 DATA sample: { \"sessionId\" : \"23243\" , \"ip\" : \"\u4e2d\u56fd \u5317\u4eac \u5317\u4eac\" , \"fromTitle\" : \"\u9ed1\u9a6c\u7a0b\u5e8f\u5458C/C++\u4e0e\u7f51\u7edc\u653b\u9632\u57f9\u8bad\u5b98\u7f51-C/C++\u57f9\u8bad|C/C++\u4e0e\u7f51\u7edc\u653b\u9632\u57f9\u8bad\u673a\u6784\" , \"content\" : [ { \"employee\" : \"\u4f60\u597d\uff0c\u4f60\u662f\u60f3\u4e86\u89e3\u54ea\u4e2a\u8bfe\u7a0b\u5462\uff1f\u00a5\u8fd8\u5728\u4e48\u540c\u5b66\uff1f\" , \"customer\" : \"\u4ef7\u683c\uff1f\" }, { \"employee\" : \"\u60a8\u597d\u00a5\u60a8\u60f3\u4e86\u89e3\u54ea\u4e2a\u4e13\u4e1a\u7684\u5b66\u8d39\u5462\u00a5\u4e13\u4e1a\u4e0d\u540c\uff0c\u5b66\u65f6\u5b66\u8d39\u4e5f\u4e0d\u4e00\u6837\" , \"customer\" : \"C++\" }, { \"employee\" : \"\u8d35\u59d3\" , \"customer\" : \"\u5468\" }, { \"employee\" : \"\u597d\u7684\uff0c\u53ef\u4ee5\u7ed9\u60a8\u53d1\u9001\u4e00\u4efdC++\u7684\u8bfe\u7a0b\u8d44\u6599\uff0c\u5b66\u65f6\u5b66\u8d39\u548c\u5b66\u4e60\u8def\u7ebf\uff0c\u60a8\u53ef\u4ee5\u5148\u4e86\u89e3\u770b\u4e0b\" , \"customer\" : \"\u597d\" }, ], } RETURN: sessionId\uff1a\u5bf9\u8bdd\u7684\u552f\u4e00\u6807\u8bc6 subject\uff1a\u5b66\u5458\u7684\u610f\u5411\u5b66\u79d1 school\uff1a\u5b66\u5458\u7684\u610f\u5411\u6821\u533a phone\uff1a\u5b66\u5458\u7684\u624b\u673a\u53f7 wechat\uff1a\u5b66\u5458\u7684\u5fae\u4fe1 qq\uff1a\u5b66\u5458\u7684QQ\u53f7 name\uff1a\u5b66\u5458\u7684\u59d3\u540d RETURN Sample { \"sessionId\" : \"23243\" , \"subject\" : \"C++\" , \"school\" : \"\u5317\u4eac\" , \"phone\" : \"15242200223\" , \"wechat\" : \"15242200223\" , \"qq\" : \"unknown\" , \"name\" : \"\u5468\u540c\u5b66\" , } PYTHON \u8bf7\u6c42\u4ee3\u7801: import requests # \u8bf7\u6c42\u8def\u5f84\uff0c8087\u7aef\u53e3\u5728nginx\u7684\u914d\u7f6e\u4e2d\u6307\u5b9a url = \"http://47.241.24.21:8087/api/v1/get_info\" data = { \"sessionId\" : \"23243\" , \"ip\" : \"\u4e2d\u56fd \u5317\u4eac \u5317\u4eac\" , \"fromTitle\" : \"\u9ed1\u9a6c\u7a0b\u5e8f\u5458C/C++\u4e0e\u7f51\u7edc\u653b\u9632\u57f9\u8bad\u5b98\u7f51-C/C++\u57f9\u8bad|C/C++\u4e0e\u7f51\u7edc\u653b\u9632\u57f9\u8bad\u673a\u6784\" , \"content\" : [ { \"employee\" : \"\u4f60\u597d\uff0c\u4f60\u662f\u60f3\u4e86\u89e3\u54ea\u4e2a\u8bfe\u7a0b\u5462\uff1f\u00a5\u8fd8\u5728\u4e48\u540c\u5b66\uff1f\" , \"customer\" : \"\u4ef7\u683c\uff1f\" }, { \"employee\" : \"\u60a8\u597d\u00a5\u60a8\u60f3\u4e86\u89e3\u54ea\u4e2a\u4e13\u4e1a\u7684\u5b66\u8d39\u5462\u00a5\u4e13\u4e1a\u4e0d\u540c\uff0c\u5b66\u65f6\u5b66\u8d39\u4e5f\u4e0d\u4e00\u6837\" , \"customer\" : \"C++\" }, { \"employee\" : \"\u8d35\u59d3\" , \"customer\" : \"\u5468\" }, { \"employee\" : \"\u597d\u7684\uff0c\u53ef\u4ee5\u7ed9\u60a8\u53d1\u9001\u4e00\u4efdC++\u7684\u8bfe\u7a0b\u8d44\u6599\uff0c\u5b66\u65f6\u5b66\u8d39\u548c\u5b66\u4e60\u8def\u7ebf\uff0c\u60a8\u53ef\u4ee5\u5148\u4e86\u89e3\u770b\u4e0b\" , \"customer\" : \"\u597d\" }, ], } # \u591a\u5c42\u5d4c\u5957\u5fc5\u987b\u4f7f\u7528json res = requests . post ( url , json = data ) print ( res . text ) \u8f93\u51fa\u6548\u679c: { \"sessionId\":\"23243\", \"subject\":\"C++\", \"school\":\"unknown\", \"phone\":\"unknown\", \"wechat\":\"unknown\", \"qq\":\"unknown\", \"name\":\"\u5468\u540c\u5b66\" }","title":"\u4fe1\u606f\u4e2d\u5fc3\u5bf9\u8bdd\u5b9e\u4f53\u62bd\u53d6API\u8bf4\u660e"},{"location":"8/#_1","text":"\u8be5\u4efb\u52a1\u5c5e\u4e8e\u79bb\u7ebf\u4efb\u52a1\uff0c\u53ef\u7533\u8bf7\uff1a 16C\uff08CPU\u6838\u6570\uff09\uff0c32G\uff08\u5185\u5b58\u7a7a\u95f4\uff09\uff0c100G\uff08\u786c\u76d8\u7a7a\u95f4\uff09\u7684\u670d\u52a1\u5668\u89c4\u683c \u6839\u636e\u7ecf\u9a8c\u4ee5\u4e0a\u786c\u4ef6\u7684AI\u670d\u52a1\u63a5\u53e3QPS\u4e0a\u9650\u7ea6\u4e3a\uff1a1500","title":"\u786c\u4ef6\u9700\u6c42"},{"location":"8/#api_1","text":"URL: http://47.241.24.21:8087/api/v1/get_trans/ METHOD: POST DATA: \u5fc5\u987b\u4e3ajson\u683c\u5f0f. \u5171\u56db\u4e2akey\uff0c\u5206\u522b\u4e3a:pid, student_answer, true_answer, full_marks pid: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u95ee\u9898\u7684\u552f\u4e00\u6807\u8bc6 student_answer: \u5217\u8868\u7c7b\u578b\uff0c\u5b66\u751f\u7684\u7b54\u6848\uff0c\u82e5\u4e3a\u591a\u9879\u586b\u7a7a\u5219[\"a\", \"b\", \"...\"] true_answer: \u5217\u8868\u7c7b\u578b\uff0c\u6b63\u786e\u7b54\u6848\uff0c\u82e5\u4e3a\u591a\u9879\u586b\u7a7a\u5219[\"A\", \"B\", \"...\"] full_marks: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u8be5\u9898\u7684\u603b\u5206. DATA sample: { \"pid\" : \"12312\" , \"student_answer\" : [ \"alt\" ], \"true_answer\" : [ \"title\" ], \"full_marks\" : \"2\" , } RETURN: json\u683c\u5f0f. \u5171\u516d\u4e2akey\uff0c\u5206\u522b\u4e3a: status, pid, student_answer, true_answer, score, confidence. status: \u670d\u52a1\u54cd\u5e94\u7684\u72b6\u6001\uff0cstatus\u4e3a0\u4ee3\u8868\u6b63\u5e38\uff0cstatus\u4e3a1\u4ee3\u8868\u5f02\u5e38. pid, student_answer, true_answer\u4e0eDATA\u4e2d\u7684\u542b\u4e49\u76f8\u540c. score: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u670d\u52a1\u9884\u6d4b\u7684\u5f97\u5206. confidence: \u5f97\u5206\u7684\u7f6e\u4fe1\u5ea6\uff0c\u5206\u4e3a\u4e09\u4e2a\u7b49\u7ea7H\uff08\u9ad8\u7f6e\u4fe1\u5ea6\uff09\uff0cM\uff08\u4e2d\u7f6e\u4fe1\u5ea6\uff09\uff0cL\uff08\u4f4e\u7f6e\u4fe1\u5ea6\uff09. RETURN sample: { \"status\" : \"0\" , \"pid\" : \"12312\" , \"student_answer\" :[ \"alt\" ], \"true_answer\" :[ \"title\" ], \"score\" : \"0\" , \"confidence\" : \"H\" } PYTHON \u8bf7\u6c42\u4ee3\u7801: import requests url = \"http://47.241.24.21:8087/api/v1/get_trans/\" data = { \"pid\" : \"12312\" , \"student_answer\" : [ \"alt\" ], \"true_answer\" : [ \"title\" ], \"full_marks\" : \"2\" , } # \u591a\u5c42\u5d4c\u5957\u5fc5\u987b\u4f7f\u7528json res = requests . post ( url , json = data ) print ( res . text ) \u8f93\u51fa\u6548\u679c: { \"status\" : \"0\" , \"pid\" : \"12312\" , \"student_answer\" :[ \"alt\" ], \"true_answer\" :[ \"title\" ], \"score\" : \"0\" , \"confidence\" : \"M\" }","title":"\u8003\u8bd5\u4e2d\u5fc3\u586b\u7a7a\u9898API\u8bf4\u660e"},{"location":"8/#_2","text":"\u8be5\u4efb\u52a1\u5c5e\u4e8e\u79bb\u7ebf\u4efb\u52a1\uff0c\u53ef\u7533\u8bf7\uff1a 16C\uff08CPU\u6838\u6570\uff09\uff0c32G\uff08\u5185\u5b58\u7a7a\u95f4\uff09\uff0c100G\uff08\u786c\u76d8\u7a7a\u95f4\uff09\u7684\u670d\u52a1\u5668\u89c4\u683c \u6839\u636e\u7ecf\u9a8c\u4ee5\u4e0a\u786c\u4ef6\u7684AI\u670d\u52a1\u63a5\u53e3QPS\u4e0a\u9650\u7ea6\u4e3a\uff1a1500","title":"\u786c\u4ef6\u9700\u6c42"},{"location":"8/#_3","text":"\u5728\u4f7f\u7528Bert\u6a21\u578b\u65f6\uff0c\u9700\u8981\u7684run_glue.py\uff0c\u5177\u4f53\u4ee3\u7801\u5185\u5bb9\u8bf7\u8bbf\u95ee\uff1a http://git.itcast.cn/Stephen/AI-key-file/blob/master/run_glue.py","title":"\u5fc5\u8981\u6587\u4ef6"},{"location":"8/#api_2","text":"URL: http://47.241.24.21:8087/api/v1/get_pm/ METHOD: POST DATA: \u5fc5\u987b\u4e3ajson\u683c\u5f0f. image_id: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6 str(image_base64): \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u88abbase64\u7f16\u7801\u540e\u8fd8\u8981\u8f6c\u6210str DATA sample: { \"image_id\" : \"12345\" , \"image_base64\" : str(base 64 _data) } RETURN: json\u683c\u5f0f. image_id: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u56fe\u7247\u7684\u552f\u4e00\u6807\u8bc6 result: \u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u53ea\u53ef\u80fd\u4e3aoffline\u6216\u8005online\uff0c\u4ee3\u8868\u7ebf\u4e0b\u6216\u8005\u7ebf\u4e0a\u5f00\u73ed RETURN sample: { \"image_id\" : \"12345\" , \"result\" : \"offline\" } PYTHON \u8bf7\u6c42\u4ee3\u7801: import requests import base64 # \u5728\u8be5\u8def\u5f84\u4e0b\u51c6\u5907\u4e00\u5f20\u5e26\u8bc6\u522b\u7684\u56fe\u7247 image_path = \"/data/ItcastBrain/Pm/image/sample.jpg\" with open ( image_path , \"rb\" ) as f : # b64encode\uff1a\u7f16\u7801\uff0cb64decode: \u89e3\u7801 base64_data = base64 . b64encode ( f . read ()) data = { \"image_id\" : \"12345\" , \"image_base64\" : str ( base64_data )} url = \"http://47.241.24.21:8087/api/v1/get_pm/\" res = requests . post ( url , json = data ) print ( res . text ) \u8f93\u51fa\u6548\u679c: { \"image_id\" : \"12345\" , \"result\" : \"offline\" }","title":"\u6570\u636e\u5206\u6790\u56fe\u7247\u89e3\u6790API\u8bf4\u660e"},{"location":"8/#_4","text":"\u8be5\u4efb\u52a1\u5c5e\u4e8e\u79bb\u7ebf\u4efb\u52a1\uff0c\u53ef\u7533\u8bf7\uff1a 16C\uff08CPU\u6838\u6570\uff09\uff0c32G\uff08\u5185\u5b58\u7a7a\u95f4\uff09\uff0c100G\uff08\u786c\u76d8\u7a7a\u95f4\uff09\u7684\u670d\u52a1\u5668\u89c4\u683c \u6839\u636e\u7ecf\u9a8c\u4ee5\u4e0a\u786c\u4ef6\u7684AI\u670d\u52a1\u63a5\u53e3QPS\u4e0a\u9650\u7ea6\u4e3a\uff1a1500","title":"\u786c\u4ef6\u9700\u6c42"},{"location":"9/","text":"\u7acb\u9879\u80cc\u666f \u660e\u786eAI\u5b66\u79d1\u7684\u5c5e\u6027\uff1a\"\u540e\u7aef\u7684\u540e\u7aef\"\uff0c\u4e0eJava\uff0fPython\u7565\u6709\u4e0d\u540c\uff0cAI\u7684\u9879\u76ee\u5e76\u4e0d\u662f\u4e00\u4e2a\u4ece0-1\u7684\u8fc7\u7a0b\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b \uff0c\u5b83\u662f\u4e00\u4e2a1+\u7684\u8fc7\u7a0b\u3002\u5b83\u5fc5\u987b\u5728\u5df2\u6709\u7684\u9879\u76ee\u57fa\u7840\u4e0a\u5bf9\u67d0\u4e9b\u529f\u80fd\u8fdb\u884c\u4f18\u5316\u8d4b\u80fd\uff0c\u4f8b\u5982\uff1a\u4ece\u7edf\u8ba1\u63a8\u8350\u7cfb\u7edf\u5230\u57fa\u4e8e\u6570\u636e\u6316\u6398\u7684\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\uff0c\u4ece\u7b80\u5355\u7684\u6587\u672c\u7d22\u5f15\u641c\u7d22\u5230\u6587\u672c\u8bed\u4e49\u641c\u7d22\u3002 \u6b63\u56e0\u5982\u6b64\uff0cAI\u9879\u76ee\u7684\"\u754c\"\u5c31\u662f\u4e00\u4e2a\u5305\u542b N\u4e2aAPI\u7684\u670d\u52a1 \uff0c\u8fd9\u4e9b\u670d\u52a1\u4e00\u822c\u53ea\u88ab\u540e\u7aef\u7cfb\u7edf\u8c03\u7528\u3002AI\u7684\u9879\u76ee\u5f62\u6001\u65e0\u6cd5\u5f88\u597d\u7684\u4ee5\u4e00\u4e2a\u5e94\u7528\u6216\u7f51\u7ad9\u7684\u5f62\u5f0f\u5c55\u73b0\u7ed9\u5927\u5bb6\u3002\u8003\u8651\u5230\u8ba9\u5b66\u5458\u66f4\u597d\u7684\u7406\u89e3\u9879\u76ee\uff0c\u65e9\u671f\u7684AI\u9879\u76ee\u5c55\u793a\uff0c\u4e5f\u662f\u7531\u6211\u4eec\u7814\u7a76\u5458\u81ea\u5df1\u642d\u5efa\u7b80\u5355\u7684\u540e\u7aef\u548c\u524d\u7aef\u9875\u9762\uff08\u6bd4\u5982\u73b0\u5728pip\u7684CLS\u9879\u76ee\uff09\uff0c\u4f46\u662f\u4ece\u6548\u679c\u7684\u7f8e\u89c2\u548c\u4eba\u5458\u6295\u5165\u7684\u7cbe\u529b\u4e0a\uff0c\u6211\u4eec\u89c9\u5f97\u8fd9\u6837\u5e76\u4e0d\u5408\u9002\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u5f00\u59cb\u62bd\u8c61AI\u80fd\u591f\u7684\u5c55\u793a\u6a21\u5f0f\uff1a\u6587\u672c\u8f93\u5165--->\u6587\u672c\u8f93\u51fa\uff0c\u56fe\u7247\u8f93\u5165--->\u6587\u672c\u8f93\u51fa\uff0c\u56fe\u7247\u8f93\u5165--->\u56fe\u7247\u8f93\u51fa \u6211\u4eec\u5e0c\u671b\u6709\u8fd9\u6837\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5728AI\u5de5\u7a0b\u5e08\u5b8c\u6210AI\u670d\u52a1\u6253\u5305\u540e\uff0c\u901a\u8fc7\u914d\u7f6e\u5c55\u793a\u4fe1\u606f\uff0c\u8f93\u5165\u793a\u4f8b\uff0c\u8f93\u51fa\u793a\u4f8b\uff0c\u670d\u52a1\u8bf4\u660e\u7b49\u7b49\uff0c\u5c31\u53ef\u4ee5\u751f\u6210\u7edf\u4e00\u6837\u5f0f\u7684\u5c55\u793a\u9875\u9762\u7528\u4e8e\u6559\u5b66\u3002\u8fd9\u4e5f\u662f\u7acb\u9879\u7684\u80cc\u666f\u4e5f\u662f\u521d\u8877\u3002 \u975e\u5c55\u793a\u7aefAI\u9879\u76ee\u8fdb\u5c55\u7b80\u8ff0 \u5bf9\u4e8e\u5c55\u793a\u7aef\u5982\u4f55\uff0c\u5e76\u4e0d\u5f71\u54cdAI\u9879\u76ee\u7684\u5b9e\u9645\u5e94\u7528\u7684\u8fdb\u5c55\u3002 \u5b8c\u6210\u5bf9\u4fe1\u606f\u4e2d\u5fc3\u54a8\u8be2\u90e8\u95e8\u4fe1\u606f\u63d0\u53d6\u670d\u52a1\u7684\u652f\u6301\u3002 \u8be6\u60c5\uff1a http://52.83.69.131:8123/2/ \u5b8c\u6210\u9662\u6821\u90a6\u8003\u8bd5\u9898\u81ea\u52a8\u6279\u9605\u670d\u52a1\u7684\u652f\u6301\u3002 \u8be6\u60c5: http://52.83.69.131:8123/4/ \u5b8c\u6210\u6570\u636e\u5206\u6790\u56e2\u961f\u5728\u75ab\u60c5\u5f71\u54cd\u4e0b\u5168\u56fd\u673a\u7ebf\u4e0a\u5f00\u73ed\u7edf\u8ba1\uff08\u56fe\u50cf\u7c7b\uff09\u670d\u52a1\u7684\u652f\u6301\u3002 \u8be6\u60c5: http://52.83.69.131:8123/4/ \u5b8c\u6210\u4ea7\u54c1\u7ecf\u7406\u56e2\u961f\u7ade\u54c1\u5206\u6790\u6d41\u91cf\u7edf\u8ba1\uff08\u56fe\u50cf\u7c7b\uff09\u670d\u52a1\u7684\u652f\u6301\u3002 \u4e3a\u4ec0\u4e48\u8981\u5408\u4f5c\u5462\uff0c\u5b9e\u73b0\u771f\u5b9e\u7684AI\u9879\u76ee\u7684\u75db\u70b9\u5c31\u662f\uff1a\u771f\u5b9e\u7684\u6570\u636e\u548c\u4e1a\u52a1\u573a\u666f\uff0c\u5408\u4f5c\u80fd\u5e2e\u6211\u4eec\u89e3\u51b3\u8fd9\u6837\u7684\u9700\u6c42\u3002 \u4ee5\u4e0a\u7684\u6280\u672f\u70b9\u90fd\u5c06\u5728\u4e00\u5b9a\u52a0\u5de5\u540e\u8f6c\u5316\u6210\u5b9e\u9645\u7684AI\u8bfe\u7a0b\u8bb2\u4e49\u548c\u89c6\u9891\u3002\u540c\u65f6\u4e5f\u662f\u4f20\u667a\u5927\u8111\u5c55\u793a\u7aef\u9700\u8981\u5448\u73b0\u7684\u5185\u5bb9\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a \u66f4\u591a\u7684\u529f\u80fd \u9664\u4e86\u5c55\u793a\u5916\uff0c\u56e0\u4e3a\u6211\u4eec\u7684AI\u88ab\u5b9e\u9645\u5e94\u7528\uff0c\u5bf9\u4e8e\u670d\u52a1\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u6d4b\u8bd5\u548c\u76d1\u63a7\u4e5f\u662f\u5fc5\u4e0d\u53ef\u5c11\uff0c\u73b0\u5728\uff0c\u6211\u4eec\u6b63\u5728\u81ea\u5df1\u5b8c\u6210\u8fd9\u4e9b\u5de5\u4f5c\u3002\u6211\u4eec\u5e0c\u671b\u8fd9\u4e9b\u529f\u80fd\u4e5f\u80fd\u6210\u4e3a\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff1a \u5bf9\u63d0\u4f9b\u7684AI\u670d\u52a1\u8fdb\u884c\u76f8\u5173\u7684\u6d4b\u8bd5\u3002 \u5bf9\u670d\u52a1\u72b6\u6001\u63d0\u4f9b\u4e00\u5b9a\u7684\u76d1\u63a7\u3002 \u8fd9\u662f\u4e00\u4e2a\u5bf9\u5de5\u7a0b\u5e08\u5f00\u653e\u7684\u540e\u7aef\u5e73\u53f0\uff0c\u5982\u56fe\u6240\u793a\uff1a \u9879\u76ee\u7684\u4f5c\u7528 \u66f4\u597d\u7684\u589e\u5f3aAI\u6559\u5b66\u6548\u679c\uff0c\u8ba9\u5b66\u751f\u80fd\u591f\u770b\u5230\u5e76\u8bd5\u7528\u8fd9\u4e9b\u529f\u80fd\u3002 \u66f4\u597d\u7684\u5c55\u793a\u5df2\u6709\u7684AI\u9879\u76ee\uff0c\u4ee5\u4fc3\u6210\u66f4\u591a\u7684\u5185\u90e8\u5408\u4f5c\u3002 \u51cf\u5c11AI\u7814\u7a76\u5458\u5728\u5c55\u793a\u7aef\u7684\u7cbe\u529b\uff0c\u4ee5\u4fbf\u66f4\u597d\u7684\u7814\u7a76\u6709\u5173\u7684\u6a21\u578b\u6559\u5b66\u3002 \u603b\u7ed3 \u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5177\u6709\u6307\u5b9a\u62bd\u8c61\u6a21\u5f0f\u7684\u53ef\u914d\u7f6e\u7684AI\u9879\u76ee\u6548\u679c\u5c55\u793a\u5e73\u53f0\u3002","title":"9"},{"location":"9/#_1","text":"\u660e\u786eAI\u5b66\u79d1\u7684\u5c5e\u6027\uff1a\"\u540e\u7aef\u7684\u540e\u7aef\"\uff0c\u4e0eJava\uff0fPython\u7565\u6709\u4e0d\u540c\uff0cAI\u7684\u9879\u76ee\u5e76\u4e0d\u662f\u4e00\u4e2a\u4ece0-1\u7684\u8fc7\u7a0b\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b \uff0c\u5b83\u662f\u4e00\u4e2a1+\u7684\u8fc7\u7a0b\u3002\u5b83\u5fc5\u987b\u5728\u5df2\u6709\u7684\u9879\u76ee\u57fa\u7840\u4e0a\u5bf9\u67d0\u4e9b\u529f\u80fd\u8fdb\u884c\u4f18\u5316\u8d4b\u80fd\uff0c\u4f8b\u5982\uff1a\u4ece\u7edf\u8ba1\u63a8\u8350\u7cfb\u7edf\u5230\u57fa\u4e8e\u6570\u636e\u6316\u6398\u7684\u4e2a\u6027\u5316\u63a8\u8350\u7cfb\u7edf\uff0c\u4ece\u7b80\u5355\u7684\u6587\u672c\u7d22\u5f15\u641c\u7d22\u5230\u6587\u672c\u8bed\u4e49\u641c\u7d22\u3002 \u6b63\u56e0\u5982\u6b64\uff0cAI\u9879\u76ee\u7684\"\u754c\"\u5c31\u662f\u4e00\u4e2a\u5305\u542b N\u4e2aAPI\u7684\u670d\u52a1 \uff0c\u8fd9\u4e9b\u670d\u52a1\u4e00\u822c\u53ea\u88ab\u540e\u7aef\u7cfb\u7edf\u8c03\u7528\u3002AI\u7684\u9879\u76ee\u5f62\u6001\u65e0\u6cd5\u5f88\u597d\u7684\u4ee5\u4e00\u4e2a\u5e94\u7528\u6216\u7f51\u7ad9\u7684\u5f62\u5f0f\u5c55\u73b0\u7ed9\u5927\u5bb6\u3002\u8003\u8651\u5230\u8ba9\u5b66\u5458\u66f4\u597d\u7684\u7406\u89e3\u9879\u76ee\uff0c\u65e9\u671f\u7684AI\u9879\u76ee\u5c55\u793a\uff0c\u4e5f\u662f\u7531\u6211\u4eec\u7814\u7a76\u5458\u81ea\u5df1\u642d\u5efa\u7b80\u5355\u7684\u540e\u7aef\u548c\u524d\u7aef\u9875\u9762\uff08\u6bd4\u5982\u73b0\u5728pip\u7684CLS\u9879\u76ee\uff09\uff0c\u4f46\u662f\u4ece\u6548\u679c\u7684\u7f8e\u89c2\u548c\u4eba\u5458\u6295\u5165\u7684\u7cbe\u529b\u4e0a\uff0c\u6211\u4eec\u89c9\u5f97\u8fd9\u6837\u5e76\u4e0d\u5408\u9002\u3002 \u81f3\u6b64\uff0c\u6211\u4eec\u5f00\u59cb\u62bd\u8c61AI\u80fd\u591f\u7684\u5c55\u793a\u6a21\u5f0f\uff1a\u6587\u672c\u8f93\u5165--->\u6587\u672c\u8f93\u51fa\uff0c\u56fe\u7247\u8f93\u5165--->\u6587\u672c\u8f93\u51fa\uff0c\u56fe\u7247\u8f93\u5165--->\u56fe\u7247\u8f93\u51fa \u6211\u4eec\u5e0c\u671b\u6709\u8fd9\u6837\u4e00\u4e2a\u7cfb\u7edf\uff0c\u5728AI\u5de5\u7a0b\u5e08\u5b8c\u6210AI\u670d\u52a1\u6253\u5305\u540e\uff0c\u901a\u8fc7\u914d\u7f6e\u5c55\u793a\u4fe1\u606f\uff0c\u8f93\u5165\u793a\u4f8b\uff0c\u8f93\u51fa\u793a\u4f8b\uff0c\u670d\u52a1\u8bf4\u660e\u7b49\u7b49\uff0c\u5c31\u53ef\u4ee5\u751f\u6210\u7edf\u4e00\u6837\u5f0f\u7684\u5c55\u793a\u9875\u9762\u7528\u4e8e\u6559\u5b66\u3002\u8fd9\u4e5f\u662f\u7acb\u9879\u7684\u80cc\u666f\u4e5f\u662f\u521d\u8877\u3002","title":"\u7acb\u9879\u80cc\u666f"},{"location":"9/#ai","text":"\u5bf9\u4e8e\u5c55\u793a\u7aef\u5982\u4f55\uff0c\u5e76\u4e0d\u5f71\u54cdAI\u9879\u76ee\u7684\u5b9e\u9645\u5e94\u7528\u7684\u8fdb\u5c55\u3002 \u5b8c\u6210\u5bf9\u4fe1\u606f\u4e2d\u5fc3\u54a8\u8be2\u90e8\u95e8\u4fe1\u606f\u63d0\u53d6\u670d\u52a1\u7684\u652f\u6301\u3002 \u8be6\u60c5\uff1a http://52.83.69.131:8123/2/ \u5b8c\u6210\u9662\u6821\u90a6\u8003\u8bd5\u9898\u81ea\u52a8\u6279\u9605\u670d\u52a1\u7684\u652f\u6301\u3002 \u8be6\u60c5: http://52.83.69.131:8123/4/ \u5b8c\u6210\u6570\u636e\u5206\u6790\u56e2\u961f\u5728\u75ab\u60c5\u5f71\u54cd\u4e0b\u5168\u56fd\u673a\u7ebf\u4e0a\u5f00\u73ed\u7edf\u8ba1\uff08\u56fe\u50cf\u7c7b\uff09\u670d\u52a1\u7684\u652f\u6301\u3002 \u8be6\u60c5: http://52.83.69.131:8123/4/ \u5b8c\u6210\u4ea7\u54c1\u7ecf\u7406\u56e2\u961f\u7ade\u54c1\u5206\u6790\u6d41\u91cf\u7edf\u8ba1\uff08\u56fe\u50cf\u7c7b\uff09\u670d\u52a1\u7684\u652f\u6301\u3002 \u4e3a\u4ec0\u4e48\u8981\u5408\u4f5c\u5462\uff0c\u5b9e\u73b0\u771f\u5b9e\u7684AI\u9879\u76ee\u7684\u75db\u70b9\u5c31\u662f\uff1a\u771f\u5b9e\u7684\u6570\u636e\u548c\u4e1a\u52a1\u573a\u666f\uff0c\u5408\u4f5c\u80fd\u5e2e\u6211\u4eec\u89e3\u51b3\u8fd9\u6837\u7684\u9700\u6c42\u3002 \u4ee5\u4e0a\u7684\u6280\u672f\u70b9\u90fd\u5c06\u5728\u4e00\u5b9a\u52a0\u5de5\u540e\u8f6c\u5316\u6210\u5b9e\u9645\u7684AI\u8bfe\u7a0b\u8bb2\u4e49\u548c\u89c6\u9891\u3002\u540c\u65f6\u4e5f\u662f\u4f20\u667a\u5927\u8111\u5c55\u793a\u7aef\u9700\u8981\u5448\u73b0\u7684\u5185\u5bb9\u3002\u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u975e\u5c55\u793a\u7aefAI\u9879\u76ee\u8fdb\u5c55\u7b80\u8ff0"},{"location":"9/#_2","text":"\u9664\u4e86\u5c55\u793a\u5916\uff0c\u56e0\u4e3a\u6211\u4eec\u7684AI\u88ab\u5b9e\u9645\u5e94\u7528\uff0c\u5bf9\u4e8e\u670d\u52a1\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u6d4b\u8bd5\u548c\u76d1\u63a7\u4e5f\u662f\u5fc5\u4e0d\u53ef\u5c11\uff0c\u73b0\u5728\uff0c\u6211\u4eec\u6b63\u5728\u81ea\u5df1\u5b8c\u6210\u8fd9\u4e9b\u5de5\u4f5c\u3002\u6211\u4eec\u5e0c\u671b\u8fd9\u4e9b\u529f\u80fd\u4e5f\u80fd\u6210\u4e3a\u5176\u4e2d\u7684\u4e00\u90e8\u5206\uff1a \u5bf9\u63d0\u4f9b\u7684AI\u670d\u52a1\u8fdb\u884c\u76f8\u5173\u7684\u6d4b\u8bd5\u3002 \u5bf9\u670d\u52a1\u72b6\u6001\u63d0\u4f9b\u4e00\u5b9a\u7684\u76d1\u63a7\u3002 \u8fd9\u662f\u4e00\u4e2a\u5bf9\u5de5\u7a0b\u5e08\u5f00\u653e\u7684\u540e\u7aef\u5e73\u53f0\uff0c\u5982\u56fe\u6240\u793a\uff1a","title":"\u66f4\u591a\u7684\u529f\u80fd"},{"location":"9/#_3","text":"\u66f4\u597d\u7684\u589e\u5f3aAI\u6559\u5b66\u6548\u679c\uff0c\u8ba9\u5b66\u751f\u80fd\u591f\u770b\u5230\u5e76\u8bd5\u7528\u8fd9\u4e9b\u529f\u80fd\u3002 \u66f4\u597d\u7684\u5c55\u793a\u5df2\u6709\u7684AI\u9879\u76ee\uff0c\u4ee5\u4fc3\u6210\u66f4\u591a\u7684\u5185\u90e8\u5408\u4f5c\u3002 \u51cf\u5c11AI\u7814\u7a76\u5458\u5728\u5c55\u793a\u7aef\u7684\u7cbe\u529b\uff0c\u4ee5\u4fbf\u66f4\u597d\u7684\u7814\u7a76\u6709\u5173\u7684\u6a21\u578b\u6559\u5b66\u3002","title":"\u9879\u76ee\u7684\u4f5c\u7528"},{"location":"9/#_4","text":"\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5177\u6709\u6307\u5b9a\u62bd\u8c61\u6a21\u5f0f\u7684\u53ef\u914d\u7f6e\u7684AI\u9879\u76ee\u6548\u679c\u5c55\u793a\u5e73\u53f0\u3002","title":"\u603b\u7ed3"}]}